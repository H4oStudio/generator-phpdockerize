<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 *
 * @final since Symfony 3.3
 */
class websiteDevDebugProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i <= 4; ++$i) {
            $this->targetDirs[$i] = $dir = dirname($dir);
        }
        $this->parameters = $this->getDefaultParameters();

        $this->services = array();
        $this->normalizedIds = array(
            'jms\\serializer\\arraytransformerinterface' => 'JMS\\Serializer\\ArrayTransformerInterface',
            'jms\\serializer\\serializerinterface' => 'JMS\\Serializer\\SerializerInterface',
            'sulu_navigationcontext.document.subscriber.navigation_context' => 'sulu_navigationContext.document.subscriber.navigation_context',
        );
        $this->methodMap = array(
            '1_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee' => 'get160e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492eeService',
            '2_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee' => 'get260e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492eeService',
            'annotation_reader' => 'getAnnotationReaderService',
            'annotations.reader' => 'getAnnotations_ReaderService',
            'argument_resolver.default' => 'getArgumentResolver_DefaultService',
            'argument_resolver.request' => 'getArgumentResolver_RequestService',
            'argument_resolver.request_attribute' => 'getArgumentResolver_RequestAttributeService',
            'argument_resolver.service' => 'getArgumentResolver_ServiceService',
            'argument_resolver.session' => 'getArgumentResolver_SessionService',
            'argument_resolver.variadic' => 'getArgumentResolver_VariadicService',
            'assets.context' => 'getAssets_ContextService',
            'assets.packages' => 'getAssets_PackagesService',
            'bazinga_hateoas.expression_language' => 'getBazingaHateoas_ExpressionLanguageService',
            'cache.annotations' => 'getCache_AnnotationsService',
            'cache.annotations.recorder_inner' => 'getCache_Annotations_RecorderInnerService',
            'cache.app' => 'getCache_AppService',
            'cache.app.recorder_inner' => 'getCache_App_RecorderInnerService',
            'cache.default_clearer' => 'getCache_DefaultClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.serializer.recorder_inner' => 'getCache_Serializer_RecorderInnerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system.recorder_inner' => 'getCache_System_RecorderInnerService',
            'cache.validator' => 'getCache_ValidatorService',
            'cache.validator.recorder_inner' => 'getCache_Validator_RecorderInnerService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'cmf_routing.dynamic_router' => 'getCmfRouting_DynamicRouterService',
            'cmf_routing.enhancer.route_content' => 'getCmfRouting_Enhancer_RouteContentService',
            'cmf_routing.final_matcher' => 'getCmfRouting_FinalMatcherService',
            'cmf_routing.generator' => 'getCmfRouting_GeneratorService',
            'cmf_routing.matcher.dummy_collection' => 'getCmfRouting_Matcher_DummyCollectionService',
            'cmf_routing.matcher.dummy_context' => 'getCmfRouting_Matcher_DummyContextService',
            'cmf_routing.nested_matcher' => 'getCmfRouting_NestedMatcherService',
            'cmf_routing.persistence.doctrine.route_condition_metadata_listener' => 'getCmfRouting_Persistence_Doctrine_RouteConditionMetadataListenerService',
            'cmf_routing.redirect_controller' => 'getCmfRouting_RedirectControllerService',
            'cmf_routing.route_type_form_type' => 'getCmfRouting_RouteTypeFormTypeService',
            'cmf_routing.router' => 'getCmfRouting_RouterService',
            'cmf_routing.validator.route_defaults' => 'getCmfRouting_Validator_RouteDefaultsService',
            'cmf_sulu_custom_urls.final_matcher' => 'getCmfSuluCustomUrls_FinalMatcherService',
            'config_cache_factory' => 'getConfigCacheFactoryService',
            'console.command.symfony_bundle_webserverbundle_command_serverruncommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerruncommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstartcommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstatuscommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstopcommandService',
            'console.error_listener' => 'getConsole_ErrorListenerService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'data_collector.dump' => 'getDataCollector_DumpService',
            'data_collector.form' => 'getDataCollector_FormService',
            'data_collector.form.extractor' => 'getDataCollector_Form_ExtractorService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'data_collector.translation' => 'getDataCollector_TranslationService',
            'debug.argument_resolver' => 'getDebug_ArgumentResolverService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.debug_handlers_listener' => 'getDebug_DebugHandlersListenerService',
            'debug.dump_listener' => 'getDebug_DumpListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.file_link_formatter' => 'getDebug_FileLinkFormatterService',
            'debug.log_processor' => 'getDebug_LogProcessorService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'deprecated.form.registry' => 'getDeprecated_Form_RegistryService',
            'deprecated.form.registry.csrf' => 'getDeprecated_Form_Registry_CsrfService',
            'doctrine' => 'getDoctrineService',
            'doctrine.cache_clear_metadata_command' => 'getDoctrine_CacheClearMetadataCommandService',
            'doctrine.cache_clear_query_cache_command' => 'getDoctrine_CacheClearQueryCacheCommandService',
            'doctrine.cache_clear_result_command' => 'getDoctrine_CacheClearResultCommandService',
            'doctrine.cache_collection_region_command' => 'getDoctrine_CacheCollectionRegionCommandService',
            'doctrine.clear_entity_region_command' => 'getDoctrine_ClearEntityRegionCommandService',
            'doctrine.clear_query_region_command' => 'getDoctrine_ClearQueryRegionCommandService',
            'doctrine.database_create_command' => 'getDoctrine_DatabaseCreateCommandService',
            'doctrine.database_drop_command' => 'getDoctrine_DatabaseDropCommandService',
            'doctrine.database_import_command' => 'getDoctrine_DatabaseImportCommandService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.ensure_production_settings_command' => 'getDoctrine_EnsureProductionSettingsCommandService',
            'doctrine.fixtures_load_command' => 'getDoctrine_FixturesLoadCommandService',
            'doctrine.generate_entities_command' => 'getDoctrine_GenerateEntitiesCommandService',
            'doctrine.mapping_convert_command' => 'getDoctrine_MappingConvertCommandService',
            'doctrine.mapping_import_command' => 'getDoctrine_MappingImportCommandService',
            'doctrine.mapping_info_command' => 'getDoctrine_MappingInfoCommandService',
            'doctrine.orm.default_entity_listener_resolver' => 'getDoctrine_Orm_DefaultEntityListenerResolverService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_entity_manager.property_info_extractor' => 'getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService',
            'doctrine.orm.default_listeners.attach_entity_listeners' => 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'doctrine.query_dql_command' => 'getDoctrine_QueryDqlCommandService',
            'doctrine.query_sql_command' => 'getDoctrine_QuerySqlCommandService',
            'doctrine.schema_create_command' => 'getDoctrine_SchemaCreateCommandService',
            'doctrine.schema_drop_command' => 'getDoctrine_SchemaDropCommandService',
            'doctrine.schema_update_command' => 'getDoctrine_SchemaUpdateCommandService',
            'doctrine.schema_validate_command' => 'getDoctrine_SchemaValidateCommandService',
            'doctrine_cache.contains_command' => 'getDoctrineCache_ContainsCommandService',
            'doctrine_cache.delete_command' => 'getDoctrineCache_DeleteCommandService',
            'doctrine_cache.flush_command' => 'getDoctrineCache_FlushCommandService',
            'doctrine_cache.providers.doctrine.orm.default_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.default_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.default_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService',
            'doctrine_cache.providers.phpcr_meta' => 'getDoctrineCache_Providers_PhpcrMetaService',
            'doctrine_cache.providers.phpcr_nodes' => 'getDoctrineCache_Providers_PhpcrNodesService',
            'doctrine_cache.providers.sulu_websocket' => 'getDoctrineCache_Providers_SuluWebsocketService',
            'doctrine_cache.stats_command' => 'getDoctrineCache_StatsCommandService',
            'doctrine_phpcr' => 'getDoctrinePhpcrService',
            'doctrine_phpcr.admin.default_session' => 'getDoctrinePhpcr_Admin_DefaultSessionService',
            'doctrine_phpcr.admin.jackalope.repository.default' => 'getDoctrinePhpcr_Admin_Jackalope_Repository_DefaultService',
            'doctrine_phpcr.admin.jackalope.repository.live' => 'getDoctrinePhpcr_Admin_Jackalope_Repository_LiveService',
            'doctrine_phpcr.admin.live_session' => 'getDoctrinePhpcr_Admin_LiveSessionService',
            'doctrine_phpcr.console_dumper' => 'getDoctrinePhpcr_ConsoleDumperService',
            'doctrine_phpcr.default_session' => 'getDoctrinePhpcr_DefaultSessionService',
            'doctrine_phpcr.initializer_manager' => 'getDoctrinePhpcr_InitializerManagerService',
            'doctrine_phpcr.jackalope.repository.default' => 'getDoctrinePhpcr_Jackalope_Repository_DefaultService',
            'doctrine_phpcr.jackalope.repository.factory.doctrinedbal' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_DoctrinedbalService',
            'doctrine_phpcr.jackalope.repository.factory.jackrabbit' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_JackrabbitService',
            'doctrine_phpcr.jackalope.repository.factory.prismic' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_PrismicService',
            'doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_Service_DoctrinedbalService',
            'doctrine_phpcr.jackalope.repository.factory.service.jackrabbit' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_Service_JackrabbitService',
            'doctrine_phpcr.jackalope.repository.factory.service.prismic' => 'getDoctrinePhpcr_Jackalope_Repository_Factory_Service_PrismicService',
            'doctrine_phpcr.jackalope.repository.live' => 'getDoctrinePhpcr_Jackalope_Repository_LiveService',
            'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener' => 'getDoctrinePhpcr_JackalopeDoctrineDbal_SchemaListenerService',
            'dtl_content.form.factory.document_type' => 'getDtlContent_Form_Factory_DocumentTypeService',
            'dtl_content.form.type.home' => 'getDtlContent_Form_Type_HomeService',
            'dtl_content.form.type.page' => 'getDtlContent_Form_Type_PageService',
            'dubture_ffmpeg.ffmpeg' => 'getDubtureFfmpeg_FfmpegService',
            'dubture_ffmpeg.ffprobe' => 'getDubtureFfmpeg_FfprobeService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.server_params' => 'getForm_ServerParamsService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.phpcr.reference' => 'getForm_Type_Phpcr_ReferenceService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.range' => 'getForm_Type_RangeService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.data_collector' => 'getForm_TypeExtension_Form_DataCollectorService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_extension.upload.validator' => 'getForm_TypeExtension_Upload_ValidatorService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_rest.body_listener' => 'getFosRest_BodyListenerService',
            'fos_rest.decoder.json' => 'getFosRest_Decoder_JsonService',
            'fos_rest.decoder.jsontoform' => 'getFosRest_Decoder_JsontoformService',
            'fos_rest.decoder.xml' => 'getFosRest_Decoder_XmlService',
            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',
            'fos_rest.exception_format_negotiator' => 'getFosRest_ExceptionFormatNegotiatorService',
            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',
            'fos_rest.inflector.doctrine' => 'getFosRest_Inflector_DoctrineService',
            'fos_rest.normalizer.camel_keys' => 'getFosRest_Normalizer_CamelKeysService',
            'fos_rest.normalizer.camel_keys_with_leading_underscore' => 'getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService',
            'fos_rest.request.param_fetcher' => 'getFosRest_Request_ParamFetcherService',
            'fos_rest.request.param_fetcher.reader' => 'getFosRest_Request_ParamFetcher_ReaderService',
            'fos_rest.routing.loader.controller' => 'getFosRest_Routing_Loader_ControllerService',
            'fos_rest.routing.loader.processor' => 'getFosRest_Routing_Loader_ProcessorService',
            'fos_rest.routing.loader.reader.action' => 'getFosRest_Routing_Loader_Reader_ActionService',
            'fos_rest.routing.loader.reader.controller' => 'getFosRest_Routing_Loader_Reader_ControllerService',
            'fos_rest.routing.loader.xml_collection' => 'getFosRest_Routing_Loader_XmlCollectionService',
            'fos_rest.routing.loader.yaml_collection' => 'getFosRest_Routing_Loader_YamlCollectionService',
            'fos_rest.serializer.exception_wrapper_normalizer' => 'getFosRest_Serializer_ExceptionWrapperNormalizerService',
            'fos_rest.serializer.exception_wrapper_serialize_handler' => 'getFosRest_Serializer_ExceptionWrapperSerializeHandlerService',
            'fos_rest.view.exception_wrapper_handler' => 'getFosRest_View_ExceptionWrapperHandlerService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'fos_rest.violation_formatter' => 'getFosRest_ViolationFormatterService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.esi' => 'getFragment_Renderer_EsiService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'fragment.renderer.ssi' => 'getFragment_Renderer_SsiService',
            'hateoas.configuration.provider.resolver' => 'getHateoas_Configuration_Provider_ResolverService',
            'hateoas.configuration.relations_repository' => 'getHateoas_Configuration_RelationsRepositoryService',
            'hateoas.embeds_factory' => 'getHateoas_EmbedsFactoryService',
            'hateoas.event_subscriber.json' => 'getHateoas_EventSubscriber_JsonService',
            'hateoas.event_subscriber.xml' => 'getHateoas_EventSubscriber_XmlService',
            'hateoas.expression.evaluator' => 'getHateoas_Expression_EvaluatorService',
            'hateoas.expression.link' => 'getHateoas_Expression_LinkService',
            'hateoas.generator.registry' => 'getHateoas_Generator_RegistryService',
            'hateoas.generator.symfony' => 'getHateoas_Generator_SymfonyService',
            'hateoas.helper.link' => 'getHateoas_Helper_LinkService',
            'hateoas.link_factory' => 'getHateoas_LinkFactoryService',
            'hateoas.links_factory' => 'getHateoas_LinksFactoryService',
            'hateoas.serializer.exclusion_manager' => 'getHateoas_Serializer_ExclusionManagerService',
            'hateoas.twig.link' => 'getHateoas_Twig_LinkService',
            'http_kernel' => 'getHttpKernelService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.accessor_strategy' => 'getJmsSerializer_AccessorStrategyService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.expression_evaluator' => 'getJmsSerializer_ExpressionEvaluatorService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata.file_locator' => 'getJmsSerializer_Metadata_FileLocatorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.metadata_factory' => 'getJmsSerializer_MetadataFactoryService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'jms_serializer.stopwatch_subscriber' => 'getJmsSerializer_StopwatchSubscriberService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.twig_extension.serializer_runtime_helper' => 'getJmsSerializer_TwigExtension_SerializerRuntimeHelperService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'kernel.class_cache.cache_warmer' => 'getKernel_ClassCache_CacheWarmerService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'massive_build.build.registry' => 'getMassiveBuild_Build_RegistryService',
            'massive_build.builder.virtual.dev' => 'getMassiveBuild_Builder_Virtual_DevService',
            'massive_build.builder.virtual.maintain' => 'getMassiveBuild_Builder_Virtual_MaintainService',
            'massive_build.builder.virtual.prod' => 'getMassiveBuild_Builder_Virtual_ProdService',
            'massive_build.command.build' => 'getMassiveBuild_Command_BuildService',
            'massive_search.adapter.test' => 'getMassiveSearch_Adapter_TestService',
            'massive_search.adapter.zend_lucene' => 'getMassiveSearch_Adapter_ZendLuceneService',
            'massive_search.command.index_rebuild_deprecated' => 'getMassiveSearch_Command_IndexRebuildDeprecatedService',
            'massive_search.command.init' => 'getMassiveSearch_Command_InitService',
            'massive_search.command.purge' => 'getMassiveSearch_Command_PurgeService',
            'massive_search.command.query' => 'getMassiveSearch_Command_QueryService',
            'massive_search.command.reindex' => 'getMassiveSearch_Command_ReindexService',
            'massive_search.command.status' => 'getMassiveSearch_Command_StatusService',
            'massive_search.converter' => 'getMassiveSearch_ConverterService',
            'massive_search.converter.date_converter' => 'getMassiveSearch_Converter_DateConverterService',
            'massive_search.converter.json_converter' => 'getMassiveSearch_Converter_JsonConverterService',
            'massive_search.events.deindex_listener' => 'getMassiveSearch_Events_DeindexListenerService',
            'massive_search.events.index_listener' => 'getMassiveSearch_Events_IndexListenerService',
            'massive_search.events.zend_rebuild' => 'getMassiveSearch_Events_ZendRebuildService',
            'massive_search.expression_language' => 'getMassiveSearch_ExpressionLanguageService',
            'massive_search.factory_default' => 'getMassiveSearch_FactoryDefaultService',
            'massive_search.index_name_decorator' => 'getMassiveSearch_IndexNameDecoratorService',
            'massive_search.localization_decorator' => 'getMassiveSearch_LocalizationDecoratorService',
            'massive_search.metadata.cache.file_cache' => 'getMassiveSearch_Metadata_Cache_FileCacheService',
            'massive_search.metadata.driver.chain' => 'getMassiveSearch_Metadata_Driver_ChainService',
            'massive_search.metadata.driver.xml' => 'getMassiveSearch_Metadata_Driver_XmlService',
            'massive_search.metadata.factory' => 'getMassiveSearch_Metadata_FactoryService',
            'massive_search.metadata.field_evaluator' => 'getMassiveSearch_Metadata_FieldEvaluatorService',
            'massive_search.metadata.file_locator' => 'getMassiveSearch_Metadata_FileLocatorService',
            'massive_search.metadata.provider.chain' => 'getMassiveSearch_Metadata_Provider_ChainService',
            'massive_search.metadata.provider.default' => 'getMassiveSearch_Metadata_Provider_DefaultService',
            'massive_search.object_to_document_converter' => 'getMassiveSearch_ObjectToDocumentConverterService',
            'massive_search.prefix_decorator' => 'getMassiveSearch_PrefixDecoratorService',
            'massive_search.reindex.provider.doctrine_orm' => 'getMassiveSearch_Reindex_Provider_DoctrineOrmService',
            'massive_search.reindex.provider_registry' => 'getMassiveSearch_Reindex_ProviderRegistryService',
            'massive_search.reindex.resume_manager' => 'getMassiveSearch_Reindex_ResumeManagerService',
            'massive_search.search.event_subscriber.doctrine_orm' => 'getMassiveSearch_Search_EventSubscriber_DoctrineOrmService',
            'massive_search.search.event_subscriber.purge_subscriber' => 'getMassiveSearch_Search_EventSubscriber_PurgeSubscriberService',
            'massive_search.search_manager' => 'getMassiveSearch_SearchManagerService',
            'monolog.activation_strategy.not_found' => 'getMonolog_ActivationStrategy_NotFoundService',
            'monolog.handler.console' => 'getMonolog_Handler_ConsoleService',
            'monolog.handler.console_very_verbose' => 'getMonolog_Handler_ConsoleVeryVerboseService',
            'monolog.handler.fingers_crossed.error_level_activation_strategy' => 'getMonolog_Handler_FingersCrossed_ErrorLevelActivationStrategyService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.handler.null_internal' => 'getMonolog_Handler_NullInternalService',
            'monolog.logger.cache' => 'getMonolog_Logger_CacheService',
            'monolog.logger.console' => 'getMonolog_Logger_ConsoleService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.doctrine_phpcr' => 'getMonolog_Logger_DoctrinePhpcrService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.php' => 'getMonolog_Logger_PhpService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.sulu_document_manager' => 'getMonolog_Logger_SuluDocumentManagerService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'monolog.logger.translation' => 'getMonolog_Logger_TranslationService',
            'monolog.processor.psr_log_message' => 'getMonolog_Processor_PsrLogMessageService',
            'phpcr_migrations.command.initialize' => 'getPhpcrMigrations_Command_InitializeService',
            'phpcr_migrations.command.migrate' => 'getPhpcrMigrations_Command_MigrateService',
            'phpcr_migrations.command.status' => 'getPhpcrMigrations_Command_StatusService',
            'phpcr_migrations.migrator_factory' => 'getPhpcrMigrations_MigratorFactoryService',
            'phpcr_migrations.version_finder' => 'getPhpcrMigrations_VersionFinderService',
            'phpcr_migrations.version_storage' => 'getPhpcrMigrations_VersionStorageService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request_stack' => 'getRequestStackService',
            'resolve_controller_name_subscriber' => 'getResolveControllerNameSubscriberService',
            'response_listener' => 'getResponseListenerService',
            'router.request_context' => 'getRouter_RequestContextService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'sensio_distribution.security_checker' => 'getSensioDistribution_SecurityCheckerService',
            'sensio_distribution.security_checker.command' => 'getSensioDistribution_SecurityChecker_CommandService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.security.listener' => 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_locator.e64d23c3bf770e2cf44b71643280668d' => 'getServiceLocator_E64d23c3bf770e2cf44b71643280668dService',
            'session' => 'getSessionService',
            'session.handler' => 'getSession_HandlerService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' => 'getSession_Storage_MetadataBagService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'stof_doctrine_extensions.uploadable.manager' => 'getStofDoctrineExtensions_Uploadable_ManagerService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'sulu.cache.warmer.structure' => 'getSulu_Cache_Warmer_StructureService',
            'sulu.content.localization_finder' => 'getSulu_Content_LocalizationFinderService',
            'sulu.content.mapper' => 'getSulu_Content_MapperService',
            'sulu.content.path_cleaner' => 'getSulu_Content_PathCleanerService',
            'sulu.content.path_cleaner.replacer_loader' => 'getSulu_Content_PathCleaner_ReplacerLoaderService',
            'sulu.content.path_cleaner.replacer_loader.file_locator' => 'getSulu_Content_PathCleaner_ReplacerLoader_FileLocatorService',
            'sulu.content.query_executor' => 'getSulu_Content_QueryExecutorService',
            'sulu.content.resource_locator.strategy.tree_full_edit' => 'getSulu_Content_ResourceLocator_Strategy_TreeFullEditService',
            'sulu.content.resource_locator.strategy.tree_generator' => 'getSulu_Content_ResourceLocator_Strategy_TreeGeneratorService',
            'sulu.content.resource_locator.strategy.tree_leaf_edit' => 'getSulu_Content_ResourceLocator_Strategy_TreeLeafEditService',
            'sulu.content.resource_locator.strategy_pool' => 'getSulu_Content_ResourceLocator_StrategyPoolService',
            'sulu.content.rlp.mapper.phpcr' => 'getSulu_Content_Rlp_Mapper_PhpcrService',
            'sulu.content.structure_manager' => 'getSulu_Content_StructureManagerService',
            'sulu.content.type.block' => 'getSulu_Content_Type_BlockService',
            'sulu.content.type.checkbox' => 'getSulu_Content_Type_CheckboxService',
            'sulu.content.type.color' => 'getSulu_Content_Type_ColorService',
            'sulu.content.type.date' => 'getSulu_Content_Type_DateService',
            'sulu.content.type.email' => 'getSulu_Content_Type_EmailService',
            'sulu.content.type.internal_links' => 'getSulu_Content_Type_InternalLinksService',
            'sulu.content.type.multiple_select' => 'getSulu_Content_Type_MultipleSelectService',
            'sulu.content.type.password' => 'getSulu_Content_Type_PasswordService',
            'sulu.content.type.phone' => 'getSulu_Content_Type_PhoneService',
            'sulu.content.type.resource_locator' => 'getSulu_Content_Type_ResourceLocatorService',
            'sulu.content.type.single_internal_link' => 'getSulu_Content_Type_SingleInternalLinkService',
            'sulu.content.type.single_select' => 'getSulu_Content_Type_SingleSelectService',
            'sulu.content.type.text_area' => 'getSulu_Content_Type_TextAreaService',
            'sulu.content.type.text_editor' => 'getSulu_Content_Type_TextEditorService',
            'sulu.content.type.text_line' => 'getSulu_Content_Type_TextLineService',
            'sulu.content.type.time' => 'getSulu_Content_Type_TimeService',
            'sulu.content.type.url' => 'getSulu_Content_Type_UrlService',
            'sulu.content.type_manager' => 'getSulu_Content_TypeManagerService',
            'sulu.content.webspace_structure_provider' => 'getSulu_Content_WebspaceStructureProviderService',
            'sulu.content.webspace_structure_provider.cache' => 'getSulu_Content_WebspaceStructureProvider_CacheService',
            'sulu.core.localization_manager' => 'getSulu_Core_LocalizationManagerService',
            'sulu.persistence.event_subscriber.orm.metadata' => 'getSulu_Persistence_EventSubscriber_Orm_MetadataService',
            'sulu.persistence.event_subscriber.orm.timestampable' => 'getSulu_Persistence_EventSubscriber_Orm_TimestampableService',
            'sulu.persistence.event_subscriber.orm.user_blame' => 'getSulu_Persistence_EventSubscriber_Orm_UserBlameService',
            'sulu.phpcr.session' => 'getSulu_Phpcr_SessionService',
            'sulu.repository.access_control' => 'getSulu_Repository_AccessControlService',
            'sulu.repository.category' => 'getSulu_Repository_CategoryService',
            'sulu.repository.category_meta' => 'getSulu_Repository_CategoryMetaService',
            'sulu.repository.category_translation' => 'getSulu_Repository_CategoryTranslationService',
            'sulu.repository.contact' => 'getSulu_Repository_ContactService',
            'sulu.repository.keyword' => 'getSulu_Repository_KeywordService',
            'sulu.repository.media' => 'getSulu_Repository_MediaService',
            'sulu.repository.role' => 'getSulu_Repository_RoleService',
            'sulu.repository.role_setting' => 'getSulu_Repository_RoleSettingService',
            'sulu.repository.route' => 'getSulu_Repository_RouteService',
            'sulu.repository.tag' => 'getSulu_Repository_TagService',
            'sulu.repository.user' => 'getSulu_Repository_UserService',
            'sulu.util.node_helper' => 'getSulu_Util_NodeHelperService',
            'sulu_category.category_manager' => 'getSuluCategory_CategoryManagerService',
            'sulu_category.category_request_handler' => 'getSuluCategory_CategoryRequestHandlerService',
            'sulu_category.content.type.category_list' => 'getSuluCategory_Content_Type_CategoryListService',
            'sulu_category.keyword_manager' => 'getSuluCategory_KeywordManagerService',
            'sulu_category.twig_extension' => 'getSuluCategory_TwigExtensionService',
            'sulu_contact.account_factory' => 'getSuluContact_AccountFactoryService',
            'sulu_contact.account_listener' => 'getSuluContact_AccountListenerService',
            'sulu_contact.account_manager' => 'getSuluContact_AccountManagerService',
            'sulu_contact.account_repository' => 'getSuluContact_AccountRepositoryService',
            'sulu_contact.contact_manager' => 'getSuluContact_ContactManagerService',
            'sulu_contact.contact_repository' => 'getSuluContact_ContactRepositoryService',
            'sulu_contact.contact_title_repository' => 'getSuluContact_ContactTitleRepositoryService',
            'sulu_contact.content.contact' => 'getSuluContact_Content_ContactService',
            'sulu_contact.country_repository' => 'getSuluContact_CountryRepositoryService',
            'sulu_contact.customer_manager' => 'getSuluContact_CustomerManagerService',
            'sulu_contact.js_config' => 'getSuluContact_JsConfigService',
            'sulu_contact.smart_content.data_provider.account' => 'getSuluContact_SmartContent_DataProvider_AccountService',
            'sulu_contact.smart_content.data_provider.contact' => 'getSuluContact_SmartContent_DataProvider_ContactService',
            'sulu_contact.twig' => 'getSuluContact_TwigService',
            'sulu_contact.twig.cache' => 'getSuluContact_Twig_CacheService',
            'sulu_contact.util.id_converter' => 'getSuluContact_Util_IdConverterService',
            'sulu_contact.util.index_comparator' => 'getSuluContact_Util_IndexComparatorService',
            'sulu_content.command.cleanup_history' => 'getSuluContent_Command_CleanupHistoryService',
            'sulu_content.command.maintain_resource_locator' => 'getSuluContent_Command_MaintainResourceLocatorService',
            'sulu_content.compat.serializer.handler.page_bridge' => 'getSuluContent_Compat_Serializer_Handler_PageBridgeService',
            'sulu_content.compat.structure.legacy_property_factory' => 'getSuluContent_Compat_Structure_LegacyPropertyFactoryService',
            'sulu_content.content_repository' => 'getSuluContent_ContentRepositoryService',
            'sulu_content.document.serializer.handler.extension_container' => 'getSuluContent_Document_Serializer_Handler_ExtensionContainerService',
            'sulu_content.document.serializer.handler.structure' => 'getSuluContent_Document_Serializer_Handler_StructureService',
            'sulu_content.document.serializer.subscriber.extension_container' => 'getSuluContent_Document_Serializer_Subscriber_ExtensionContainerService',
            'sulu_content.document.serializer.subscriber.locale' => 'getSuluContent_Document_Serializer_Subscriber_LocaleService',
            'sulu_content.document.serializer.subscriber.parent_behavior' => 'getSuluContent_Document_Serializer_Subscriber_ParentBehaviorService',
            'sulu_content.document.serializer.subscriber.path_behavior' => 'getSuluContent_Document_Serializer_Subscriber_PathBehaviorService',
            'sulu_content.document.serializer.subscriber.redirect_type_behavior' => 'getSuluContent_Document_Serializer_Subscriber_RedirectTypeBehaviorService',
            'sulu_content.document.serializer.subscriber.shadow_locale_behavior' => 'getSuluContent_Document_Serializer_Subscriber_ShadowLocaleBehaviorService',
            'sulu_content.document.serializer.subscriber.structure_behavior' => 'getSuluContent_Document_Serializer_Subscriber_StructureBehaviorService',
            'sulu_content.document.serializer.subscriber.workflow_stage_behavior' => 'getSuluContent_Document_Serializer_Subscriber_WorkflowStageBehaviorService',
            'sulu_content.document.subscriber.content' => 'getSuluContent_Document_Subscriber_ContentService',
            'sulu_content.document_manager.content_initializer' => 'getSuluContent_DocumentManager_ContentInitializerService',
            'sulu_content.export.manager' => 'getSuluContent_Export_ManagerService',
            'sulu_content.export.webspace' => 'getSuluContent_Export_WebspaceService',
            'sulu_content.export_twig_extension' => 'getSuluContent_ExportTwigExtensionService',
            'sulu_content.extension.excerpt' => 'getSuluContent_Extension_ExcerptService',
            'sulu_content.extension.manager' => 'getSuluContent_Extension_ManagerService',
            'sulu_content.extension.seo' => 'getSuluContent_Extension_SeoService',
            'sulu_content.import.manager' => 'getSuluContent_Import_ManagerService',
            'sulu_content.import.webspace' => 'getSuluContent_Import_WebspaceService',
            'sulu_content.import.webspace.xliff12' => 'getSuluContent_Import_Webspace_Xliff12Service',
            'sulu_content.js_config.server' => 'getSuluContent_JsConfig_ServerService',
            'sulu_content.js_config.webspace_input_types' => 'getSuluContent_JsConfig_WebspaceInputTypesService',
            'sulu_content.jsconfig' => 'getSuluContent_JsconfigService',
            'sulu_content.jsconfig.apps' => 'getSuluContent_Jsconfig_AppsService',
            'sulu_content.link_tag' => 'getSuluContent_LinkTagService',
            'sulu_content.link_tag.page_provider' => 'getSuluContent_LinkTag_PageProviderService',
            'sulu_content.link_tag.provider_pool' => 'getSuluContent_LinkTag_ProviderPoolService',
            'sulu_content.node_repository' => 'getSuluContent_NodeRepositoryService',
            'sulu_content.permission_listener' => 'getSuluContent_PermissionListenerService',
            'sulu_content.preview.defaults_provider' => 'getSuluContent_Preview_DefaultsProviderService',
            'sulu_content.preview.object_provider' => 'getSuluContent_Preview_ObjectProviderService',
            'sulu_content.reference_store.content' => 'getSuluContent_ReferenceStore_ContentService',
            'sulu_content.rl_repository' => 'getSuluContent_RlRepositoryService',
            'sulu_content.search.event_subscriber.blame_timestamp' => 'getSuluContent_Search_EventSubscriber_BlameTimestampService',
            'sulu_content.search.event_subscriber.structure' => 'getSuluContent_Search_EventSubscriber_StructureService',
            'sulu_content.search.metadata.provider.structure' => 'getSuluContent_Search_Metadata_Provider_StructureService',
            'sulu_content.search.reindex.structure_provider' => 'getSuluContent_Search_Reindex_StructureProviderService',
            'sulu_content.smart_content.content_type' => 'getSuluContent_SmartContent_ContentTypeService',
            'sulu_content.smart_content.data_provider.content' => 'getSuluContent_SmartContent_DataProvider_ContentService',
            'sulu_content.smart_content.data_provider.content.proxy_factory' => 'getSuluContent_SmartContent_DataProvider_Content_ProxyFactoryService',
            'sulu_content.smart_content.data_provider.content.query_builder' => 'getSuluContent_SmartContent_DataProvider_Content_QueryBuilderService',
            'sulu_content.smart_content.data_provider_pool' => 'getSuluContent_SmartContent_DataProviderPoolService',
            'sulu_content.structure.factory' => 'getSuluContent_Structure_FactoryService',
            'sulu_content.teaser.content_type' => 'getSuluContent_Teaser_ContentTypeService',
            'sulu_content.teaser.manager' => 'getSuluContent_Teaser_ManagerService',
            'sulu_content.teaser.provider.content' => 'getSuluContent_Teaser_Provider_ContentService',
            'sulu_content.teaser.provider_pool' => 'getSuluContent_Teaser_ProviderPoolService',
            'sulu_content.twig_extension' => 'getSuluContent_TwigExtensionService',
            'sulu_core.array_serialization_visitor' => 'getSuluCore_ArraySerializationVisitorService',
            'sulu_core.build.builder.cache' => 'getSuluCore_Build_Builder_CacheService',
            'sulu_core.build.builder.database' => 'getSuluCore_Build_Builder_DatabaseService',
            'sulu_core.build.builder.fixtures' => 'getSuluCore_Build_Builder_FixturesService',
            'sulu_core.build.builder.node_order' => 'getSuluCore_Build_Builder_NodeOrderService',
            'sulu_core.build.builder.phpcr' => 'getSuluCore_Build_Builder_PhpcrService',
            'sulu_core.build.builder.phpcr_migrations' => 'getSuluCore_Build_Builder_PhpcrMigrationsService',
            'sulu_core.cache.memoize' => 'getSuluCore_Cache_MemoizeService',
            'sulu_core.cache.memoize.cache' => 'getSuluCore_Cache_Memoize_CacheService',
            'sulu_core.doctrine.references' => 'getSuluCore_Doctrine_ReferencesService',
            'sulu_core.doctrine_list_builder_factory' => 'getSuluCore_DoctrineListBuilderFactoryService',
            'sulu_core.doctrine_rest_helper' => 'getSuluCore_DoctrineRestHelperService',
            'sulu_core.list_builder.field_descriptor_factory' => 'getSuluCore_ListBuilder_FieldDescriptorFactoryService',
            'sulu_core.list_builder.metadata.file_locator' => 'getSuluCore_ListBuilder_Metadata_FileLocatorService',
            'sulu_core.list_builder.metadata.parameter_bag' => 'getSuluCore_ListBuilder_Metadata_ParameterBagService',
            'sulu_core.list_builder.metadata.provider.chain' => 'getSuluCore_ListBuilder_Metadata_Provider_ChainService',
            'sulu_core.list_builder.metadata.provider.doctrine' => 'getSuluCore_ListBuilder_Metadata_Provider_DoctrineService',
            'sulu_core.list_builder.metadata.provider.doctrine.cache' => 'getSuluCore_ListBuilder_Metadata_Provider_Doctrine_CacheService',
            'sulu_core.list_builder.metadata.provider.doctrine.driver.xml' => 'getSuluCore_ListBuilder_Metadata_Provider_Doctrine_Driver_XmlService',
            'sulu_core.list_builder.metadata.provider.doctrine.factory' => 'getSuluCore_ListBuilder_Metadata_Provider_Doctrine_FactoryService',
            'sulu_core.list_builder.metadata.provider.general' => 'getSuluCore_ListBuilder_Metadata_Provider_GeneralService',
            'sulu_core.list_builder.metadata.provider.general.cache' => 'getSuluCore_ListBuilder_Metadata_Provider_General_CacheService',
            'sulu_core.list_builder.metadata.provider.general.driver.xml' => 'getSuluCore_ListBuilder_Metadata_Provider_General_Driver_XmlService',
            'sulu_core.list_builder.metadata.provider.general.event_subscriber' => 'getSuluCore_ListBuilder_Metadata_Provider_General_EventSubscriberService',
            'sulu_core.list_builder.metadata.provider.general.factory' => 'getSuluCore_ListBuilder_Metadata_Provider_General_FactoryService',
            'sulu_core.list_rest_helper' => 'getSuluCore_ListRestHelperService',
            'sulu_core.proxy_manager.configuration' => 'getSuluCore_ProxyManager_ConfigurationService',
            'sulu_core.request_processor.parameter' => 'getSuluCore_RequestProcessor_ParameterService',
            'sulu_core.request_processor.portal_information' => 'getSuluCore_RequestProcessor_PortalInformationService',
            'sulu_core.request_processor.url' => 'getSuluCore_RequestProcessor_UrlService',
            'sulu_core.request_processor.website' => 'getSuluCore_RequestProcessor_WebsiteService',
            'sulu_core.rest.datetime_handler' => 'getSuluCore_Rest_DatetimeHandlerService',
            'sulu_core.rest.exception_wrapper_handler' => 'getSuluCore_Rest_ExceptionWrapperHandlerService',
            'sulu_core.rest.view_handler.csv' => 'getSuluCore_Rest_ViewHandler_CsvService',
            'sulu_core.rest_helper' => 'getSuluCore_RestHelperService',
            'sulu_core.webspace.document_manager.webspace_initializer' => 'getSuluCore_Webspace_DocumentManager_WebspaceInitializerService',
            'sulu_core.webspace.loader.delegator' => 'getSuluCore_Webspace_Loader_DelegatorService',
            'sulu_core.webspace.loader.resolver' => 'getSuluCore_Webspace_Loader_ResolverService',
            'sulu_core.webspace.loader.xml.1.0' => 'getSuluCore_Webspace_Loader_Xml_1_0Service',
            'sulu_core.webspace.loader.xml.1.1' => 'getSuluCore_Webspace_Loader_Xml_1_1Service',
            'sulu_core.webspace.request_analyzer' => 'getSuluCore_Webspace_RequestAnalyzerService',
            'sulu_core.webspace.settings_manager' => 'getSuluCore_Webspace_SettingsManagerService',
            'sulu_core.webspace.url_provider' => 'getSuluCore_Webspace_UrlProviderService',
            'sulu_core.webspace.url_provider.default' => 'getSuluCore_Webspace_UrlProvider_DefaultService',
            'sulu_core.webspace.webspace_manager' => 'getSuluCore_Webspace_WebspaceManagerService',
            'sulu_core.webspace.webspace_manager.url_replacer' => 'getSuluCore_Webspace_WebspaceManager_UrlReplacerService',
            'sulu_custom_urls.domain_generator' => 'getSuluCustomUrls_DomainGeneratorService',
            'sulu_custom_urls.initializer' => 'getSuluCustomUrls_InitializerService',
            'sulu_custom_urls.invalidate.subscriber' => 'getSuluCustomUrls_Invalidate_SubscriberService',
            'sulu_custom_urls.manager' => 'getSuluCustomUrls_ManagerService',
            'sulu_custom_urls.repository' => 'getSuluCustomUrls_RepositoryService',
            'sulu_custom_urls.request_processor' => 'getSuluCustomUrls_RequestProcessorService',
            'sulu_custom_urls.routing.generator' => 'getSuluCustomUrls_Routing_GeneratorService',
            'sulu_custom_urls.routing.nested_matcher' => 'getSuluCustomUrls_Routing_NestedMatcherService',
            'sulu_custom_urls.routing.provider' => 'getSuluCustomUrls_Routing_ProviderService',
            'sulu_custom_urls.routing.route_enhancers.content' => 'getSuluCustomUrls_Routing_RouteEnhancers_ContentService',
            'sulu_custom_urls.routing.route_enhancers.external_link' => 'getSuluCustomUrls_Routing_RouteEnhancers_ExternalLinkService',
            'sulu_custom_urls.routing.route_enhancers.internal_link' => 'getSuluCustomUrls_Routing_RouteEnhancers_InternalLinkService',
            'sulu_custom_urls.routing.route_enhancers.redirect' => 'getSuluCustomUrls_Routing_RouteEnhancers_RedirectService',
            'sulu_custom_urls.routing.route_enhancers.seo' => 'getSuluCustomUrls_Routing_RouteEnhancers_SeoService',
            'sulu_custom_urls.routing.route_enhancers.structure' => 'getSuluCustomUrls_Routing_RouteEnhancers_StructureService',
            'sulu_custom_urls.routing.route_enhancers.trailing_html' => 'getSuluCustomUrls_Routing_RouteEnhancers_TrailingHtmlService',
            'sulu_custom_urls.routing.route_enhancers.trailing_slash' => 'getSuluCustomUrls_Routing_RouteEnhancers_TrailingSlashService',
            'sulu_custom_urls.routing.router' => 'getSuluCustomUrls_Routing_RouterService',
            'sulu_custom_urls.subscriber' => 'getSuluCustomUrls_SubscriberService',
            'sulu_custom_urls.url_provider' => 'getSuluCustomUrls_UrlProviderService',
            'sulu_document_manager.command.fixtures_load' => 'getSuluDocumentManager_Command_FixturesLoadService',
            'sulu_document_manager.command.initialize' => 'getSuluDocumentManager_Command_InitializeService',
            'sulu_document_manager.data_fixtures.executor' => 'getSuluDocumentManager_DataFixtures_ExecutorService',
            'sulu_document_manager.data_fixtures.loader' => 'getSuluDocumentManager_DataFixtures_LoaderService',
            'sulu_document_manager.decorated_default_session' => 'getSuluDocumentManager_DecoratedDefaultSessionService',
            'sulu_document_manager.decorated_live_session' => 'getSuluDocumentManager_DecoratedLiveSessionService',
            'sulu_document_manager.document.subscriber.compat.content_mapper' => 'getSuluDocumentManager_Document_Subscriber_Compat_ContentMapperService',
            'sulu_document_manager.document.subscriber.extension' => 'getSuluDocumentManager_Document_Subscriber_ExtensionService',
            'sulu_document_manager.document.subscriber.fallback_localization' => 'getSuluDocumentManager_Document_Subscriber_FallbackLocalizationService',
            'sulu_document_manager.document.subscriber.order' => 'getSuluDocumentManager_Document_Subscriber_OrderService',
            'sulu_document_manager.document.subscriber.publish' => 'getSuluDocumentManager_Document_Subscriber_PublishService',
            'sulu_document_manager.document.subscriber.robot' => 'getSuluDocumentManager_Document_Subscriber_RobotService',
            'sulu_document_manager.document.subscriber.route' => 'getSuluDocumentManager_Document_Subscriber_RouteService',
            'sulu_document_manager.document.subscriber.security' => 'getSuluDocumentManager_Document_Subscriber_SecurityService',
            'sulu_document_manager.document.subscriber.shadow_copy_properties' => 'getSuluDocumentManager_Document_Subscriber_ShadowCopyPropertiesService',
            'sulu_document_manager.document.subscriber.shadow_locale' => 'getSuluDocumentManager_Document_Subscriber_ShadowLocaleService',
            'sulu_document_manager.document.subscriber.target' => 'getSuluDocumentManager_Document_Subscriber_TargetService',
            'sulu_document_manager.document.subscriber.title' => 'getSuluDocumentManager_Document_Subscriber_TitleService',
            'sulu_document_manager.document.subscriber.webspace' => 'getSuluDocumentManager_Document_Subscriber_WebspaceService',
            'sulu_document_manager.document.subscriber.workflow_stage' => 'getSuluDocumentManager_Document_Subscriber_WorkflowStageService',
            'sulu_document_manager.document_inspector' => 'getSuluDocumentManager_DocumentInspectorService',
            'sulu_document_manager.document_manager' => 'getSuluDocumentManager_DocumentManagerService',
            'sulu_document_manager.document_registry' => 'getSuluDocumentManager_DocumentRegistryService',
            'sulu_document_manager.event_dispatcher' => 'getSuluDocumentManager_EventDispatcherService',
            'sulu_document_manager.initializer' => 'getSuluDocumentManager_InitializerService',
            'sulu_document_manager.initializer.root_path_purge_initializer' => 'getSuluDocumentManager_Initializer_RootPathPurgeInitializerService',
            'sulu_document_manager.initializer.workspace' => 'getSuluDocumentManager_Initializer_WorkspaceService',
            'sulu_document_manager.metadata_factory' => 'getSuluDocumentManager_MetadataFactoryService',
            'sulu_document_manager.metadata_factory.base' => 'getSuluDocumentManager_MetadataFactory_BaseService',
            'sulu_document_manager.namespace_registry' => 'getSuluDocumentManager_NamespaceRegistryService',
            'sulu_document_manager.node_helper' => 'getSuluDocumentManager_NodeHelperService',
            'sulu_document_manager.node_manager' => 'getSuluDocumentManager_NodeManagerService',
            'sulu_document_manager.path_builder' => 'getSuluDocumentManager_PathBuilderService',
            'sulu_document_manager.path_segment_registry' => 'getSuluDocumentManager_PathSegmentRegistryService',
            'sulu_document_manager.property_encoder' => 'getSuluDocumentManager_PropertyEncoderService',
            'sulu_document_manager.proxy_factory' => 'getSuluDocumentManager_ProxyFactoryService',
            'sulu_document_manager.proxy_manager.factory.ghost' => 'getSuluDocumentManager_ProxyManager_Factory_GhostService',
            'sulu_document_manager.routing.version_loader' => 'getSuluDocumentManager_Routing_VersionLoaderService',
            'sulu_document_manager.serializer.handler.children_collection' => 'getSuluDocumentManager_Serializer_Handler_ChildrenCollectionService',
            'sulu_document_manager.serializer.subscriber.children_behavior' => 'getSuluDocumentManager_Serializer_Subscriber_ChildrenBehaviorService',
            'sulu_document_manager.serializer.subscriber.document' => 'getSuluDocumentManager_Serializer_Subscriber_DocumentService',
            'sulu_document_manager.serializer.subscriber.proxy' => 'getSuluDocumentManager_Serializer_Subscriber_ProxyService',
            'sulu_document_manager.session_manager' => 'getSuluDocumentManager_SessionManagerService',
            'sulu_document_manager.slugifier' => 'getSuluDocumentManager_SlugifierService',
            'sulu_document_manager.subscriber.behavior.alias' => 'getSuluDocumentManager_Subscriber_Behavior_AliasService',
            'sulu_document_manager.subscriber.behavior.auto_name' => 'getSuluDocumentManager_Subscriber_Behavior_AutoNameService',
            'sulu_document_manager.subscriber.behavior.base_path' => 'getSuluDocumentManager_Subscriber_Behavior_BasePathService',
            'sulu_document_manager.subscriber.behavior.filing' => 'getSuluDocumentManager_Subscriber_Behavior_FilingService',
            'sulu_document_manager.subscriber.behavior.path' => 'getSuluDocumentManager_Subscriber_Behavior_PathService',
            'sulu_document_manager.subscriber.behavior.path.explicit' => 'getSuluDocumentManager_Subscriber_Behavior_Path_ExplicitService',
            'sulu_document_manager.subscriber.behavior.remove_content' => 'getSuluDocumentManager_Subscriber_Behavior_RemoveContentService',
            'sulu_document_manager.subscriber.core.instantiator' => 'getSuluDocumentManager_Subscriber_Core_InstantiatorService',
            'sulu_document_manager.subscriber.core.mapping' => 'getSuluDocumentManager_Subscriber_Core_MappingService',
            'sulu_document_manager.subscriber.core.registrator' => 'getSuluDocumentManager_Subscriber_Core_RegistratorService',
            'sulu_document_manager.subscriber.phpcr.find' => 'getSuluDocumentManager_Subscriber_Phpcr_FindService',
            'sulu_document_manager.subscriber.phpcr.general' => 'getSuluDocumentManager_Subscriber_Phpcr_GeneralService',
            'sulu_document_manager.subscriber.phpcr.mixin' => 'getSuluDocumentManager_Subscriber_Phpcr_MixinService',
            'sulu_document_manager.subscriber.phpcr.query' => 'getSuluDocumentManager_Subscriber_Phpcr_QueryService',
            'sulu_document_manager.subscriber.phpcr.refresh' => 'getSuluDocumentManager_Subscriber_Phpcr_RefreshService',
            'sulu_document_manager.subscriber.phpcr.remove' => 'getSuluDocumentManager_Subscriber_Phpcr_RemoveService',
            'sulu_document_manager.subscriber.phpcr.reorder' => 'getSuluDocumentManager_Subscriber_Phpcr_ReorderService',
            'sulu_document_manager.subscriber.security' => 'getSuluDocumentManager_Subscriber_SecurityService',
            'sulu_document_manager.suscriber.behavior.author' => 'getSuluDocumentManager_Suscriber_Behavior_AuthorService',
            'sulu_document_manager.suscriber.behavior.blame' => 'getSuluDocumentManager_Suscriber_Behavior_BlameService',
            'sulu_document_manager.suscriber.behavior.children' => 'getSuluDocumentManager_Suscriber_Behavior_ChildrenService',
            'sulu_document_manager.suscriber.behavior.locale' => 'getSuluDocumentManager_Suscriber_Behavior_LocaleService',
            'sulu_document_manager.suscriber.behavior.node_name' => 'getSuluDocumentManager_Suscriber_Behavior_NodeNameService',
            'sulu_document_manager.suscriber.behavior.parent' => 'getSuluDocumentManager_Suscriber_Behavior_ParentService',
            'sulu_document_manager.suscriber.behavior.timestamp' => 'getSuluDocumentManager_Suscriber_Behavior_TimestampService',
            'sulu_document_manager.suscriber.behavior.uuid' => 'getSuluDocumentManager_Suscriber_Behavior_UuidService',
            'sulu_hash.auditable_hasher' => 'getSuluHash_AuditableHasherService',
            'sulu_hash.event_subscriber.serializer' => 'getSuluHash_EventSubscriber_SerializerService',
            'sulu_hash.request_hash_checker' => 'getSuluHash_RequestHashCheckerService',
            'sulu_http_cache.cache_lifetime.resolver' => 'getSuluHttpCache_CacheLifetime_ResolverService',
            'sulu_http_cache.event_subscriber.flush' => 'getSuluHttpCache_EventSubscriber_FlushService',
            'sulu_http_cache.event_subscriber.invalidation' => 'getSuluHttpCache_EventSubscriber_InvalidationService',
            'sulu_http_cache.event_subscriber.update_response' => 'getSuluHttpCache_EventSubscriber_UpdateResponseService',
            'sulu_http_cache.handler.aggregate' => 'getSuluHttpCache_Handler_AggregateService',
            'sulu_http_cache.handler.debug' => 'getSuluHttpCache_Handler_DebugService',
            'sulu_http_cache.proxy_client.symfony' => 'getSuluHttpCache_ProxyClient_SymfonyService',
            'sulu_http_cache.proxy_client.varnish' => 'getSuluHttpCache_ProxyClient_VarnishService',
            'sulu_location.content.type.location' => 'getSuluLocation_Content_Type_LocationService',
            'sulu_location.controller.geoloactor' => 'getSuluLocation_Controller_GeoloactorService',
            'sulu_location.gelocator.service.nominatim' => 'getSuluLocation_Gelocator_Service_NominatimService',
            'sulu_location.geolocator.guzzle.client' => 'getSuluLocation_Geolocator_Guzzle_ClientService',
            'sulu_location.geolocator.manager' => 'getSuluLocation_Geolocator_ManagerService',
            'sulu_location.geolocator.service.google' => 'getSuluLocation_Geolocator_Service_GoogleService',
            'sulu_location.map_manager' => 'getSuluLocation_MapManagerService',
            'sulu_markup.parser' => 'getSuluMarkup_ParserService',
            'sulu_markup.parser.delegating_html_extractor' => 'getSuluMarkup_Parser_DelegatingHtmlExtractorService',
            'sulu_markup.parser.html_extractor' => 'getSuluMarkup_Parser_HtmlExtractorService',
            'sulu_markup.response_listener' => 'getSuluMarkup_ResponseListenerService',
            'sulu_markup.tag.registry' => 'getSuluMarkup_Tag_RegistryService',
            'sulu_media.adapter' => 'getSuluMedia_AdapterService',
            'sulu_media.collection_manager' => 'getSuluMedia_CollectionManagerService',
            'sulu_media.collection_repository' => 'getSuluMedia_CollectionRepositoryService',
            'sulu_media.disposition_type.resolver' => 'getSuluMedia_DispositionType_ResolverService',
            'sulu_media.file_validator' => 'getSuluMedia_FileValidatorService',
            'sulu_media.file_version_meta_repository' => 'getSuluMedia_FileVersionMetaRepositoryService',
            'sulu_media.format_cache' => 'getSuluMedia_FormatCacheService',
            'sulu_media.format_cache_clearer' => 'getSuluMedia_FormatCacheClearerService',
            'sulu_media.format_manager' => 'getSuluMedia_FormatManagerService',
            'sulu_media.format_options_manager' => 'getSuluMedia_FormatOptionsManagerService',
            'sulu_media.format_options_repository' => 'getSuluMedia_FormatOptionsRepositoryService',
            'sulu_media.image.converter' => 'getSuluMedia_Image_ConverterService',
            'sulu_media.image.cropper' => 'getSuluMedia_Image_CropperService',
            'sulu_media.image.focus' => 'getSuluMedia_Image_FocusService',
            'sulu_media.image.media_extractor' => 'getSuluMedia_Image_MediaExtractorService',
            'sulu_media.image.scaler' => 'getSuluMedia_Image_ScalerService',
            'sulu_media.image.transformation.crop' => 'getSuluMedia_Image_Transformation_CropService',
            'sulu_media.image.transformation.paste' => 'getSuluMedia_Image_Transformation_PasteService',
            'sulu_media.image.transformation_pool' => 'getSuluMedia_Image_TransformationPoolService',
            'sulu_media.markup' => 'getSuluMedia_MarkupService',
            'sulu_media.media_manager' => 'getSuluMedia_MediaManagerService',
            'sulu_media.permission_listener' => 'getSuluMedia_PermissionListenerService',
            'sulu_media.search.subscriber.media' => 'getSuluMedia_Search_Subscriber_MediaService',
            'sulu_media.search.subscriber.structure_media' => 'getSuluMedia_Search_Subscriber_StructureMediaService',
            'sulu_media.security_context' => 'getSuluMedia_SecurityContextService',
            'sulu_media.smart_content.data_provider.media' => 'getSuluMedia_SmartContent_DataProvider_MediaService',
            'sulu_media.smart_content.data_provider.media.repository' => 'getSuluMedia_SmartContent_DataProvider_Media_RepositoryService',
            'sulu_media.storage' => 'getSuluMedia_StorageService',
            'sulu_media.storage.file_system' => 'getSuluMedia_Storage_FileSystemService',
            'sulu_media.system_collections.builder' => 'getSuluMedia_SystemCollections_BuilderService',
            'sulu_media.system_collections.cache' => 'getSuluMedia_SystemCollections_CacheService',
            'sulu_media.system_collections.manager' => 'getSuluMedia_SystemCollections_ManagerService',
            'sulu_media.twig_extension.disposition_type' => 'getSuluMedia_TwigExtension_DispositionTypeService',
            'sulu_media.twig_extension.media' => 'getSuluMedia_TwigExtension_MediaService',
            'sulu_media.type.media_selection' => 'getSuluMedia_Type_MediaSelectionService',
            'sulu_media.type_manager' => 'getSuluMedia_TypeManagerService',
            'sulu_media.video_thumbnail_generator' => 'getSuluMedia_VideoThumbnailGeneratorService',
            'sulu_navigationContext.document.subscriber.navigation_context' => 'getSuluNavigationContext_Document_Subscriber_NavigationContextService',
            'sulu_redirect_type.document.subscriber.redirect_type' => 'getSuluRedirectType_Document_Subscriber_RedirectTypeService',
            'sulu_resource_segment.document.subscriber.resource_segment' => 'getSuluResourceSegment_Document_Subscriber_ResourceSegmentService',
            'sulu_route.chain_generator' => 'getSuluRoute_ChainGeneratorService',
            'sulu_route.content_type' => 'getSuluRoute_ContentTypeService',
            'sulu_route.generator.expression_token_provider' => 'getSuluRoute_Generator_ExpressionTokenProviderService',
            'sulu_route.generator.route_generator' => 'getSuluRoute_Generator_RouteGeneratorService',
            'sulu_route.manager.conflict_resolver.auto_increment' => 'getSuluRoute_Manager_ConflictResolver_AutoIncrementService',
            'sulu_route.manager.route_manager' => 'getSuluRoute_Manager_RouteManagerService',
            'sulu_route.routing.defaults_provider' => 'getSuluRoute_Routing_DefaultsProviderService',
            'sulu_route.routing.final_matcher' => 'getSuluRoute_Routing_FinalMatcherService',
            'sulu_route.routing.generator' => 'getSuluRoute_Routing_GeneratorService',
            'sulu_route.routing.nested_matcher' => 'getSuluRoute_Routing_NestedMatcherService',
            'sulu_route.routing.provider' => 'getSuluRoute_Routing_ProviderService',
            'sulu_route.routing.proxy_factory' => 'getSuluRoute_Routing_ProxyFactoryService',
            'sulu_route.routing.router' => 'getSuluRoute_Routing_RouterService',
            'sulu_search.build.index' => 'getSuluSearch_Build_IndexService',
            'sulu_search.controller.website_search' => 'getSuluSearch_Controller_WebsiteSearchService',
            'sulu_search.event_listener.hit' => 'getSuluSearch_EventListener_HitService',
            'sulu_search.index_configuration_provider' => 'getSuluSearch_IndexConfigurationProviderService',
            'sulu_search.search.factory' => 'getSuluSearch_Search_FactoryService',
            'sulu_security.access_control_manager' => 'getSuluSecurity_AccessControlManagerService',
            'sulu_security.authentication_entry_point' => 'getSuluSecurity_AuthenticationEntryPointService',
            'sulu_security.authentication_handler' => 'getSuluSecurity_AuthenticationHandlerService',
            'sulu_security.build.user' => 'getSuluSecurity_Build_UserService',
            'sulu_security.document.serializer.subscriber.security' => 'getSuluSecurity_Document_Serializer_Subscriber_SecurityService',
            'sulu_security.group_repository' => 'getSuluSecurity_GroupRepositoryService',
            'sulu_security.mask_converter' => 'getSuluSecurity_MaskConverterService',
            'sulu_security.salt_generator' => 'getSuluSecurity_SaltGeneratorService',
            'sulu_security.token_generator' => 'getSuluSecurity_TokenGeneratorService',
            'sulu_security.twig_extension.user' => 'getSuluSecurity_TwigExtension_UserService',
            'sulu_security.twig_extension.user.cache' => 'getSuluSecurity_TwigExtension_User_CacheService',
            'sulu_security.user_manager' => 'getSuluSecurity_UserManagerService',
            'sulu_security.user_provider' => 'getSuluSecurity_UserProviderService',
            'sulu_security.user_repository' => 'getSuluSecurity_UserRepositoryService',
            'sulu_security.user_setting_repository' => 'getSuluSecurity_UserSettingRepositoryService',
            'sulu_snippet.content.snippet' => 'getSuluSnippet_Content_SnippetService',
            'sulu_snippet.default_snippet.manager' => 'getSuluSnippet_DefaultSnippet_ManagerService',
            'sulu_snippet.document.snippet_initializer' => 'getSuluSnippet_Document_SnippetInitializerService',
            'sulu_snippet.export.snippet' => 'getSuluSnippet_Export_SnippetService',
            'sulu_snippet.form.snippet' => 'getSuluSnippet_Form_SnippetService',
            'sulu_snippet.import.snippet' => 'getSuluSnippet_Import_SnippetService',
            'sulu_snippet.import.webspace.xliff12' => 'getSuluSnippet_Import_Webspace_Xliff12Service',
            'sulu_snippet.jsconfig' => 'getSuluSnippet_JsconfigService',
            'sulu_snippet.reference_store.snippet' => 'getSuluSnippet_ReferenceStore_SnippetService',
            'sulu_snippet.repository' => 'getSuluSnippet_RepositoryService',
            'sulu_snippet.resolver' => 'getSuluSnippet_ResolverService',
            'sulu_snippet.smart_content.snippet_data_provider' => 'getSuluSnippet_SmartContent_SnippetDataProviderService',
            'sulu_snippet.twig.area_snippet' => 'getSuluSnippet_Twig_AreaSnippetService',
            'sulu_snippet.twig.default_snippet' => 'getSuluSnippet_Twig_DefaultSnippetService',
            'sulu_snippet.twig.snippet' => 'getSuluSnippet_Twig_SnippetService',
            'sulu_snippet.twig.snippet.memoized' => 'getSuluSnippet_Twig_Snippet_MemoizedService',
            'sulu_tag.content.type.tag_list' => 'getSuluTag_Content_Type_TagListService',
            'sulu_tag.search.tags_converter' => 'getSuluTag_Search_TagsConverterService',
            'sulu_tag.tag_manager' => 'getSuluTag_TagManagerService',
            'sulu_tag.tag_repository' => 'getSuluTag_TagRepositoryService',
            'sulu_tag.tag_request_handler' => 'getSuluTag_TagRequestHandlerService',
            'sulu_tag.twig_extension' => 'getSuluTag_TwigExtensionService',
            'sulu_translate.export' => 'getSuluTranslate_ExportService',
            'sulu_website.analytics.manager' => 'getSuluWebsite_Analytics_ManagerService',
            'sulu_website.analytics.repository' => 'getSuluWebsite_Analytics_RepositoryService',
            'sulu_website.analytics.response_listener' => 'getSuluWebsite_Analytics_ResponseListenerService',
            'sulu_website.data_collector.sulu_collector' => 'getSuluWebsite_DataCollector_SuluCollectorService',
            'sulu_website.default_locale.portal_provider' => 'getSuluWebsite_DefaultLocale_PortalProviderService',
            'sulu_website.default_locale.request_provider' => 'getSuluWebsite_DefaultLocale_RequestProviderService',
            'sulu_website.domains.repository' => 'getSuluWebsite_Domains_RepositoryService',
            'sulu_website.event_subscriber.generator' => 'getSuluWebsite_EventSubscriber_GeneratorService',
            'sulu_website.exception_controller' => 'getSuluWebsite_ExceptionControllerService',
            'sulu_website.http_cache.clearer' => 'getSuluWebsite_HttpCache_ClearerService',
            'sulu_website.navigation_mapper' => 'getSuluWebsite_NavigationMapperService',
            'sulu_website.provider.content' => 'getSuluWebsite_Provider_ContentService',
            'sulu_website.redirect_exception_listener' => 'getSuluWebsite_RedirectExceptionListenerService',
            'sulu_website.reference_store_pool' => 'getSuluWebsite_ReferenceStorePoolService',
            'sulu_website.resolver.parameter' => 'getSuluWebsite_Resolver_ParameterService',
            'sulu_website.resolver.request_analyzer' => 'getSuluWebsite_Resolver_RequestAnalyzerService',
            'sulu_website.resolver.structure' => 'getSuluWebsite_Resolver_StructureService',
            'sulu_website.resolver.template_attribute' => 'getSuluWebsite_Resolver_TemplateAttributeService',
            'sulu_website.router_listener' => 'getSuluWebsite_RouterListenerService',
            'sulu_website.routing.portal_loader' => 'getSuluWebsite_Routing_PortalLoaderService',
            'sulu_website.routing.request_listener' => 'getSuluWebsite_Routing_RequestListenerService',
            'sulu_website.sitemap' => 'getSuluWebsite_SitemapService',
            'sulu_website.sitemap.pages_provider' => 'getSuluWebsite_Sitemap_PagesProviderService',
            'sulu_website.sitemap.pool' => 'getSuluWebsite_Sitemap_PoolService',
            'sulu_website.sitemap.xml_dumper' => 'getSuluWebsite_Sitemap_XmlDumperService',
            'sulu_website.sitemap.xml_renderer' => 'getSuluWebsite_Sitemap_XmlRendererService',
            'sulu_website.translator.request_analyzer' => 'getSuluWebsite_Translator_RequestAnalyzerService',
            'sulu_website.twig.content' => 'getSuluWebsite_Twig_ContentService',
            'sulu_website.twig.content.memoized' => 'getSuluWebsite_Twig_Content_MemoizedService',
            'sulu_website.twig.content_path' => 'getSuluWebsite_Twig_ContentPathService',
            'sulu_website.twig.meta' => 'getSuluWebsite_Twig_MetaService',
            'sulu_website.twig.navigation' => 'getSuluWebsite_Twig_NavigationService',
            'sulu_website.twig.navigation.memoized' => 'getSuluWebsite_Twig_Navigation_MemoizedService',
            'sulu_website.twig.seo' => 'getSuluWebsite_Twig_SeoService',
            'sulu_website.twig.sitemap' => 'getSuluWebsite_Twig_SitemapService',
            'sulu_website.twig.sitemap.memoized' => 'getSuluWebsite_Twig_Sitemap_MemoizedService',
            'sulu_website.twig.util' => 'getSuluWebsite_Twig_UtilService',
            'sulu_websocket.admin' => 'getSuluWebsocket_AdminService',
            'sulu_websocket.admin.message_builder' => 'getSuluWebsocket_Admin_MessageBuilderService',
            'sulu_websocket.fallback_controller' => 'getSuluWebsocket_FallbackControllerService',
            'sulu_websocket.manager' => 'getSuluWebsocket_ManagerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'templating' => 'getTemplatingService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.json' => 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.json' => 'getTranslation_Loader_JsonService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator.data_collector' => 'getTranslator_DataCollectorService',
            'translator.default' => 'getTranslator_DefaultService',
            'translator_listener' => 'getTranslatorListenerService',
            'twig' => 'getTwigService',
            'twig.controller.preview_error' => 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.form.renderer' => 'getTwig_Form_RendererService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.profile' => 'getTwig_ProfileService',
            'twig.runtime.httpkernel' => 'getTwig_Runtime_HttpkernelService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'uri_signer' => 'getUriSignerService',
            'validate_request_listener' => 'getValidateRequestListenerService',
            'validator' => 'getValidatorService',
            'validator.builder' => 'getValidator_BuilderService',
            'validator.email' => 'getValidator_EmailService',
            'validator.expression' => 'getValidator_ExpressionService',
            'var_dumper.cli_dumper' => 'getVarDumper_CliDumperService',
            'var_dumper.cloner' => 'getVarDumper_ClonerService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.csp.handler' => 'getWebProfiler_Csp_HandlerService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
        );
        $this->privates = array(
            '1_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee' => true,
            '2_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee' => true,
            'annotations.reader' => true,
            'argument_resolver.default' => true,
            'argument_resolver.request' => true,
            'argument_resolver.request_attribute' => true,
            'argument_resolver.service' => true,
            'argument_resolver.session' => true,
            'argument_resolver.variadic' => true,
            'cache.annotations' => true,
            'cache.annotations.recorder_inner' => true,
            'cache.app.recorder_inner' => true,
            'cache.serializer.recorder_inner' => true,
            'cache.system.recorder_inner' => true,
            'cache.validator' => true,
            'cache.validator.recorder_inner' => true,
            'cmf_routing.matcher.dummy_collection' => true,
            'cmf_routing.matcher.dummy_context' => true,
            'console.error_listener' => true,
            'controller_name_converter' => true,
            'debug.file_link_formatter' => true,
            'debug.log_processor' => true,
            'doctrine.dbal.logger.profiling.default' => true,
            'form.server_params' => true,
            'form.type.choice' => true,
            'form.type.form' => true,
            'form.type_extension.csrf' => true,
            'form.type_extension.form.data_collector' => true,
            'form.type_extension.form.http_foundation' => true,
            'form.type_extension.form.validator' => true,
            'form.type_extension.repeated.validator' => true,
            'form.type_extension.submit.validator' => true,
            'form.type_extension.upload.validator' => true,
            'form.type_guesser.validator' => true,
            'hateoas.configuration.relations_repository' => true,
            'hateoas.embeds_factory' => true,
            'hateoas.link_factory' => true,
            'hateoas.links_factory' => true,
            'jms_serializer.metadata.file_locator' => true,
            'jms_serializer.metadata_factory' => true,
            'jms_serializer.unserialize_object_constructor' => true,
            'monolog.processor.psr_log_message' => true,
            'phpcr_migrations.version_finder' => true,
            'phpcr_migrations.version_storage' => true,
            'resolve_controller_name_subscriber' => true,
            'router.request_context' => true,
            'service_locator.e64d23c3bf770e2cf44b71643280668d' => true,
            'session.storage.metadata_bag' => true,
            'sulu_contact.util.id_converter' => true,
            'sulu_contact.util.index_comparator' => true,
            'sulu_content.smart_content.data_provider.content.query_builder' => true,
            'sulu_core.proxy_manager.configuration' => true,
            'sulu_document_manager.document_registry' => true,
            'sulu_document_manager.metadata_factory' => true,
            'sulu_document_manager.metadata_factory.base' => true,
            'sulu_document_manager.namespace_registry' => true,
            'sulu_document_manager.node_manager' => true,
            'sulu_document_manager.path_builder' => true,
            'sulu_document_manager.property_encoder' => true,
            'sulu_document_manager.slugifier' => true,
            'swiftmailer.mailer.default.transport.eventdispatcher' => true,
            'templating.locator' => true,
            'translator.data_collector' => true,
            'web_profiler.csp.handler' => true,
        );
        $this->aliases = array(
            'JMS\\Serializer\\ArrayTransformerInterface' => 'jms_serializer',
            'JMS\\Serializer\\SerializerInterface' => 'jms_serializer',
            'cache.app_clearer' => 'cache.default_clearer',
            'cmf_routing.route_provider' => 'sulu_website.provider.content',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.default_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.default_metadata_cache',
            'doctrine.orm.default_query_cache' => 'doctrine_cache.providers.doctrine.orm.default_query_cache',
            'doctrine.orm.default_result_cache' => 'doctrine_cache.providers.doctrine.orm.default_result_cache',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'doctrine_phpcr.admin.jackalope_doctrine_dbal.default_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.admin.jackalope_doctrine_dbal.live_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.jackalope_doctrine_dbal.default_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.jackalope_doctrine_dbal.live_connection' => 'doctrine.dbal.default_connection',
            'doctrine_phpcr.live_session' => 'sulu_document_manager.decorated_live_session',
            'doctrine_phpcr.session' => 'sulu_document_manager.decorated_live_session',
            'event_dispatcher' => 'debug.event_dispatcher',
            'fos_rest.exception_handler' => 'sulu_core.rest.exception_wrapper_handler',
            'fos_rest.inflector' => 'fos_rest.inflector.doctrine',
            'fos_rest.router' => 'cmf_routing.router',
            'fos_rest.serializer' => 'jms_serializer',
            'fos_rest.templating' => 'templating',
            'jms_serializer.cache_naming_strategy' => 'jms_serializer.naming_strategy',
            'mailer' => 'swiftmailer.mailer.default',
            'massive_search.adapter' => 'massive_search.adapter.zend_lucene',
            'massive_search.factory' => 'sulu_search.search.factory',
            'massive_search.index_name_decorator.default' => 'massive_search.prefix_decorator',
            'router' => 'cmf_routing.router',
            'router_listener' => 'sulu_website.router_listener',
            'serializer' => 'jms_serializer',
            'session.storage' => 'session.storage.native',
            'sulu.content.rlp.strategy.tree' => 'sulu.content.resource_locator.strategy.tree_leaf_edit',
            'sulu_category.category_repository' => 'sulu.repository.category',
            'sulu_category.keyword_repository' => 'sulu.repository.keyword',
            'sulu_document_manager.default_session' => 'sulu_document_manager.decorated_live_session',
            'sulu_document_manager.live_session' => 'sulu_document_manager.decorated_live_session',
            'sulu_http_cache.handler' => 'sulu_http_cache.handler.aggregate',
            'sulu_http_cache.proxy_client' => 'sulu_http_cache.proxy_client.symfony',
            'sulu_website.default_locale.provider' => 'sulu_website.default_locale.portal_provider',
            'sulu_website.exception.controller' => 'sulu_website.exception_controller',
            'sulu_websocket.websocket.cache' => 'doctrine_cache.providers.sulu_websocket',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
            'translator' => 'sulu_website.translator.request_analyzer',
            'twig.controller.exception' => 'sulu_website.exception_controller',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    /**
     * {@inheritdoc}
     */
    public function isCompiled()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function isFrozen()
    {
        @trigger_error(sprintf('The %s() method is deprecated since version 3.3 and will be removed in 4.0. Use the isCompiled() method instead.', __METHOD__), E_USER_DEPRECATED);

        return true;
    }

    /**
     * Gets the public 'annotation_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\CachedReader
     */
    protected function getAnnotationReaderService()
    {
        return $this->services['annotation_reader'] = new \Doctrine\Common\Annotations\CachedReader(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, new \Symfony\Component\Cache\DoctrineProvider(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create((__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'})), true);
    }

    /**
     * Gets the public 'assets.context' shared service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext
     */
    protected function getAssets_ContextService()
    {
        return $this->services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected function getAssets_PackagesService()
    {
        return $this->services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), ${($_ = isset($this->services['assets.context']) ? $this->services['assets.context'] : $this->get('assets.context')) && false ?: '_'}), array());
    }

    /**
     * Gets the public 'bazinga_hateoas.expression_language' shared service.
     *
     * @return \Bazinga\Bundle\HateoasBundle\ExpressionLanguage\ExpressionLanguage
     */
    protected function getBazingaHateoas_ExpressionLanguageService()
    {
        return $this->services['bazinga_hateoas.expression_language'] = new \Bazinga\Bundle\HateoasBundle\ExpressionLanguage\ExpressionLanguage();
    }

    /**
     * Gets the public 'cache.app' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AppService()
    {
        return $this->services['cache.app'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.app.recorder_inner']) ? $this->services['cache.app.recorder_inner'] : $this->getCache_App_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'cache.default_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_DefaultClearerService()
    {
        return $this->services['cache.default_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(array('cache.app' => ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'}, 'cache.system' => ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'}, 'cache.validator' => ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}, 'cache.annotations' => ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache.global_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_GlobalClearerService()
    {
        return $this->services['cache.global_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(array('cache.app' => ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'}, 'cache.system' => ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'}, 'cache.validator' => ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}, 'cache.annotations' => ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache.system' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_SystemService()
    {
        return $this->services['cache.system'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.system.recorder_inner']) ? $this->services['cache.system.recorder_inner'] : $this->getCache_System_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'cache_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array(0 => ${($_ = isset($this->services['cache.default_clearer']) ? $this->services['cache.default_clearer'] : $this->get('cache.default_clearer')) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache_warmer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate
     */
    protected function getCacheWarmerService()
    {
        $a = ${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'};
        $b = ${($_ = isset($this->services['templating.filename_parser']) ? $this->services['templating.filename_parser'] : $this->get('templating.filename_parser')) && false ?: '_'};

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this->targetDirs[4].'/app/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}), 1 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer(${($_ = isset($this->services['validator.builder']) ? $this->services['validator.builder'] : $this->get('validator.builder')) && false ?: '_'}, (__DIR__.'/validation.php'), ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}), 2 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->get('translator.default')) && false ?: '_'}), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'}), 4 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, (__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}), 5 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer(new \Symfony\Component\DependencyInjection\ServiceLocator(array('twig' => function () {
            $f = function (\Twig\Environment $v) { return $v; }; return $f(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'});
        })), $c, array(($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form') => NULL)), 6 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer($this, new \Symfony\Bundle\TwigBundle\TemplateIterator($a, ($this->targetDirs[4].'/app'), array(($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form') => NULL))), 7 => ${($_ = isset($this->services['sulu.cache.warmer.structure']) ? $this->services['sulu.cache.warmer.structure'] : $this->get('sulu.cache.warmer.structure')) && false ?: '_'}, 8 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'})));
    }

    /**
     * Gets the public 'cmf_routing.dynamic_router' shared service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter
     */
    protected function getCmfRouting_DynamicRouterService()
    {
        $this->services['cmf_routing.dynamic_router'] = $instance = new \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter(${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.nested_matcher']) ? $this->services['cmf_routing.nested_matcher'] : $this->get('cmf_routing.nested_matcher')) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.generator']) ? $this->services['cmf_routing.generator'] : $this->get('cmf_routing.generator')) && false ?: '_'}, '', ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.provider.content']) ? $this->services['sulu_website.provider.content'] : $this->get('sulu_website.provider.content')) && false ?: '_'});

        $instance->setRequestStack(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
        $instance->addRouteEnhancer(${($_ = isset($this->services['cmf_routing.enhancer.route_content']) ? $this->services['cmf_routing.enhancer.route_content'] : $this->get('cmf_routing.enhancer.route_content')) && false ?: '_'}, 100);

        return $instance;
    }

    /**
     * Gets the public 'cmf_routing.enhancer.route_content' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\Enhancer\RouteContentEnhancer
     */
    protected function getCmfRouting_Enhancer_RouteContentService()
    {
        return $this->services['cmf_routing.enhancer.route_content'] = new \Symfony\Cmf\Component\Routing\Enhancer\RouteContentEnhancer('_route_object', '_content');
    }

    /**
     * Gets the public 'cmf_routing.final_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher
     */
    protected function getCmfRouting_FinalMatcherService()
    {
        return $this->services['cmf_routing.final_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher(${($_ = isset($this->services['cmf_routing.matcher.dummy_collection']) ? $this->services['cmf_routing.matcher.dummy_collection'] : $this->getCmfRouting_Matcher_DummyCollectionService()) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.matcher.dummy_context']) ? $this->services['cmf_routing.matcher.dummy_context'] : $this->getCmfRouting_Matcher_DummyContextService()) && false ?: '_'});
    }

    /**
     * Gets the public 'cmf_routing.generator' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\ContentAwareGenerator
     */
    protected function getCmfRouting_GeneratorService()
    {
        return $this->services['cmf_routing.generator'] = new \Symfony\Cmf\Component\Routing\ContentAwareGenerator(${($_ = isset($this->services['sulu_website.provider.content']) ? $this->services['sulu_website.provider.content'] : $this->get('sulu_website.provider.content')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'cmf_routing.nested_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher
     */
    protected function getCmfRouting_NestedMatcherService()
    {
        return $this->services['cmf_routing.nested_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher(${($_ = isset($this->services['sulu_website.provider.content']) ? $this->services['sulu_website.provider.content'] : $this->get('sulu_website.provider.content')) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.final_matcher']) ? $this->services['cmf_routing.final_matcher'] : $this->get('cmf_routing.final_matcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'cmf_routing.persistence.doctrine.route_condition_metadata_listener' shared service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\RouteConditionMetadataListener
     */
    protected function getCmfRouting_Persistence_Doctrine_RouteConditionMetadataListenerService()
    {
        return $this->services['cmf_routing.persistence.doctrine.route_condition_metadata_listener'] = new \Symfony\Cmf\Bundle\RoutingBundle\Doctrine\RouteConditionMetadataListener();
    }

    /**
     * Gets the public 'cmf_routing.redirect_controller' shared service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Controller\RedirectController
     */
    protected function getCmfRouting_RedirectControllerService()
    {
        return $this->services['cmf_routing.redirect_controller'] = new \Symfony\Cmf\Bundle\RoutingBundle\Controller\RedirectController(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'});
    }

    /**
     * Gets the public 'cmf_routing.route_type_form_type' shared service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Form\Type\RouteTypeType
     */
    protected function getCmfRouting_RouteTypeFormTypeService()
    {
        return $this->services['cmf_routing.route_type_form_type'] = new \Symfony\Cmf\Bundle\RoutingBundle\Form\Type\RouteTypeType();
    }

    /**
     * Gets the public 'cmf_routing.router' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\ChainRouter
     */
    protected function getCmfRouting_RouterService()
    {
        $a = ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'};

        $b = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, ($this->targetDirs[4].'/app/config/website/routing_dev.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'websiteDevDebugProjectContainerUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'websiteDevDebugProjectContainerUrlMatcher', 'strict_requirements' => true), $a);
        $b->setConfigCacheFactory(${($_ = isset($this->services['config_cache_factory']) ? $this->services['config_cache_factory'] : $this->get('config_cache_factory')) && false ?: '_'});

        $this->services['cmf_routing.router'] = $instance = new \Symfony\Cmf\Component\Routing\ChainRouter(${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->setContext($a);
        $instance->add($b, '100');
        $instance->add(${($_ = isset($this->services['cmf_routing.dynamic_router']) ? $this->services['cmf_routing.dynamic_router'] : $this->get('cmf_routing.dynamic_router')) && false ?: '_'}, '20');
        $instance->add(${($_ = isset($this->services['sulu_custom_urls.routing.router']) ? $this->services['sulu_custom_urls.routing.router'] : $this->get('sulu_custom_urls.routing.router')) && false ?: '_'}, 30);
        $instance->add(${($_ = isset($this->services['sulu_route.routing.router']) ? $this->services['sulu_route.routing.router'] : $this->get('sulu_route.routing.router')) && false ?: '_'}, 20);

        return $instance;
    }

    /**
     * Gets the public 'cmf_routing.validator.route_defaults' shared service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Validator\Constraints\RouteDefaultsTemplatingValidator
     */
    protected function getCmfRouting_Validator_RouteDefaultsService()
    {
        return $this->services['cmf_routing.validator.route_defaults'] = new \Symfony\Cmf\Bundle\RoutingBundle\Validator\Constraints\RouteDefaultsTemplatingValidator(${($_ = isset($this->services['debug.controller_resolver']) ? $this->services['debug.controller_resolver'] : $this->get('debug.controller_resolver')) && false ?: '_'}, new \Symfony\Bundle\TwigBundle\TwigEngine(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'cmf_sulu_custom_urls.final_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher
     */
    protected function getCmfSuluCustomUrls_FinalMatcherService()
    {
        return $this->services['cmf_sulu_custom_urls.final_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher(${($_ = isset($this->services['cmf_routing.matcher.dummy_collection']) ? $this->services['cmf_routing.matcher.dummy_collection'] : $this->getCmfRouting_Matcher_DummyCollectionService()) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.matcher.dummy_context']) ? $this->services['cmf_routing.matcher.dummy_context'] : $this->getCmfRouting_Matcher_DummyContextService()) && false ?: '_'});
    }

    /**
     * Gets the public 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected function getConfigCacheFactoryService()
    {
        return $this->services['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['1_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee']) ? $this->services['1_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee'] : $this->get160e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492eeService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['2_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee']) ? $this->services['2_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee'] : $this->get260e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492eeService()) && false ?: '_'};
        }, 2));
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverruncommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerRunCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerruncommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverruncommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerRunCommand(($this->targetDirs[4].'/public'), 'dev');
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStartCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstartcommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstartcommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStartCommand(($this->targetDirs[4].'/public'), 'dev');
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStatusCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstatuscommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstatuscommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStatusCommand();
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStopCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstopcommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstopcommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStopCommand();
    }

    /**
     * Gets the public 'data_collector.dump' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector
     */
    protected function getDataCollector_DumpService()
    {
        return $this->services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, 'UTF-8', ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, NULL);
    }

    /**
     * Gets the public 'data_collector.form' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector
     */
    protected function getDataCollector_FormService()
    {
        return $this->services['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector(${($_ = isset($this->services['data_collector.form.extractor']) ? $this->services['data_collector.form.extractor'] : $this->get('data_collector.form.extractor')) && false ?: '_'});
    }

    /**
     * Gets the public 'data_collector.form.extractor' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this->services['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the public 'data_collector.request' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the public 'data_collector.router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the public 'data_collector.translation' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector
     */
    protected function getDataCollector_TranslationService()
    {
        return $this->services['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector(${($_ = isset($this->services['translator.data_collector']) ? $this->services['translator.data_collector'] : $this->getTranslator_DataCollectorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver
     */
    protected function getDebug_ArgumentResolverService()
    {
        return $this->services['debug.argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory(), new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['argument_resolver.request_attribute']) ? $this->services['argument_resolver.request_attribute'] : $this->getArgumentResolver_RequestAttributeService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['argument_resolver.request']) ? $this->services['argument_resolver.request'] : $this->getArgumentResolver_RequestService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['argument_resolver.session']) ? $this->services['argument_resolver.session'] : $this->getArgumentResolver_SessionService()) && false ?: '_'};
            yield 3 => ${($_ = isset($this->services['argument_resolver.service']) ? $this->services['argument_resolver.service'] : $this->getArgumentResolver_ServiceService()) && false ?: '_'};
            yield 4 => ${($_ = isset($this->services['argument_resolver.default']) ? $this->services['argument_resolver.default'] : $this->getArgumentResolver_DefaultService()) && false ?: '_'};
            yield 5 => ${($_ = isset($this->services['argument_resolver.variadic']) ? $this->services['argument_resolver.variadic'] : $this->getArgumentResolver_VariadicService()) && false ?: '_'};
        }, 6)), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.controller_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, ${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'}, ${($_ = isset($this->services['debug.argument_resolver']) ? $this->services['debug.argument_resolver'] : $this->get('debug.argument_resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, ${($_ = isset($this->services['monolog.logger.php']) ? $this->services['monolog.logger.php'] : $this->get('monolog.logger.php', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, -1, -1, true, ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'debug.dump_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener
     */
    protected function getDebug_DumpListenerService()
    {
        return $this->services['debug.dump_listener'] = new \Symfony\Component\HttpKernel\EventListener\DumpListener(${($_ = isset($this->services['var_dumper.cloner']) ? $this->services['var_dumper.cloner'] : $this->get('var_dumper.cloner')) && false ?: '_'}, ${($_ = isset($this->services['var_dumper.cli_dumper']) ? $this->services['var_dumper.cli_dumper'] : $this->get('var_dumper.cli_dumper')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.event_dispatcher' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.event']) ? $this->services['monolog.logger.event'] : $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.router']) ? $this->services['data_collector.router'] : $this->get('data_collector.router')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['fos_rest.body_listener']) ? $this->services['fos_rest.body_listener'] : $this->get('fos_rest.body_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 10);
        $instance->addListener('massive_search.index', array(0 => function () {
            return ${($_ = isset($this->services['massive_search.events.index_listener']) ? $this->services['massive_search.events.index_listener'] : $this->get('massive_search.events.index_listener')) && false ?: '_'};
        }, 1 => 'onIndex'), 0);
        $instance->addListener('massive_search.deindex', array(0 => function () {
            return ${($_ = isset($this->services['massive_search.events.deindex_listener']) ? $this->services['massive_search.events.deindex_listener'] : $this->get('massive_search.events.deindex_listener')) && false ?: '_'};
        }, 1 => 'onDeindex'), 0);
        $instance->addListener('massive_search.index_rebuild', array(0 => function () {
            return ${($_ = isset($this->services['massive_search.events.zend_rebuild']) ? $this->services['massive_search.events.zend_rebuild'] : $this->get('massive_search.events.zend_rebuild')) && false ?: '_'};
        }, 1 => 'onIndexRebuild'), -999);
        $instance->addListener('sulu_security.permission_update', array(0 => function () {
            return ${($_ = isset($this->services['sulu_media.permission_listener']) ? $this->services['sulu_media.permission_listener'] : $this->get('sulu_media.permission_listener')) && false ?: '_'};
        }, 1 => 'onPermissionUpdate'), 0);
        $instance->addListener('massive_search.hit', array(0 => function () {
            return ${($_ = isset($this->services['sulu_search.event_listener.hit']) ? $this->services['sulu_search.event_listener.hit'] : $this->get('sulu_search.event_listener.hit')) && false ?: '_'};
        }, 1 => 'onHit'), 0);
        $instance->addListener('sulu_security.permission_update', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.permission_listener']) ? $this->services['sulu_content.permission_listener'] : $this->get('sulu_content.permission_listener')) && false ?: '_'};
        }, 1 => 'onPermissionUpdate'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['sulu_website.routing.request_listener']) ? $this->services['sulu_website.routing.request_listener'] : $this->get('sulu_website.routing.request_listener')) && false ?: '_'};
        }, 1 => 'onRequest'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sulu_website.analytics.response_listener']) ? $this->services['sulu_website.analytics.response_listener'] : $this->get('sulu_website.analytics.response_listener')) && false ?: '_'};
        }, 1 => 'onResponse'), -5);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sulu_markup.response_listener']) ? $this->services['sulu_markup.response_listener'] : $this->get('sulu_markup.response_listener')) && false ?: '_'};
        }, 1 => 'replaceMarkup'), -10);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['response_listener']) ? $this->services['response_listener'] : $this->get('response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['streamed_response_listener']) ? $this->services['streamed_response_listener'] : $this->get('streamed_response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -1024);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['locale_listener']) ? $this->services['locale_listener'] : $this->get('locale_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 16);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['locale_listener']) ? $this->services['locale_listener'] : $this->get('locale_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['validate_request_listener']) ? $this->services['validate_request_listener'] : $this->get('validate_request_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 256);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['resolve_controller_name_subscriber']) ? $this->services['resolve_controller_name_subscriber'] : $this->getResolveControllerNameSubscriberService()) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 24);
        $instance->addListener('console.error', array(0 => function () {
            return ${($_ = isset($this->services['console.error_listener']) ? $this->services['console.error_listener'] : $this->getConsole_ErrorListenerService()) && false ?: '_'};
        }, 1 => 'onConsoleError'), -128);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['console.error_listener']) ? $this->services['console.error_listener'] : $this->getConsole_ErrorListenerService()) && false ?: '_'};
        }, 1 => 'onConsoleTerminate'), -128);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['session_listener']) ? $this->services['session_listener'] : $this->get('session_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 128);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['session.save_listener']) ? $this->services['session.save_listener'] : $this->get('session.save_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -1000);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['fragment.listener']) ? $this->services['fragment.listener'] : $this->get('fragment.listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 48);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['translator_listener']) ? $this->services['translator_listener'] : $this->get('translator_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 10);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['translator_listener']) ? $this->services['translator_listener'] : $this->get('translator_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -100);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelException'), 0);
        $instance->addListener('kernel.terminate', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelTerminate'), -1024);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['debug.debug_handlers_listener']) ? $this->services['debug.debug_handlers_listener'] : $this->get('debug.debug_handlers_listener')) && false ?: '_'};
        }, 1 => 'configure'), 2048);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['twig.exception_listener']) ? $this->services['twig.exception_listener'] : $this->get('twig.exception_listener')) && false ?: '_'};
        }, 1 => 'onKernelException'), -128);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'};
        }, 1 => 'onCommand'), 255);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'};
        }, 1 => 'onTerminate'), -255);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console_very_verbose']) ? $this->services['monolog.handler.console_very_verbose'] : $this->get('monolog.handler.console_very_verbose')) && false ?: '_'};
        }, 1 => 'onCommand'), 255);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console_very_verbose']) ? $this->services['monolog.handler.console_very_verbose'] : $this->get('monolog.handler.console_very_verbose')) && false ?: '_'};
        }, 1 => 'onTerminate'), -255);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onException'), 0);
        $instance->addListener('kernel.terminate', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('console.error', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onException'), 0);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.controller.listener']) ? $this->services['sensio_framework_extra.controller.listener'] : $this->get('sensio_framework_extra.controller.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.converter.listener']) ? $this->services['sensio_framework_extra.converter.listener'] : $this->get('sensio_framework_extra.converter.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.view.listener']) ? $this->services['sensio_framework_extra.view.listener'] : $this->get('sensio_framework_extra.view.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), -128);
        $instance->addListener('kernel.view', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.view.listener']) ? $this->services['sensio_framework_extra.view.listener'] : $this->get('sensio_framework_extra.view.listener')) && false ?: '_'};
        }, 1 => 'onKernelView'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.cache.listener']) ? $this->services['sensio_framework_extra.cache.listener'] : $this->get('sensio_framework_extra.cache.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.cache.listener']) ? $this->services['sensio_framework_extra.cache.listener'] : $this->get('sensio_framework_extra.cache.listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.security.listener']) ? $this->services['sensio_framework_extra.security.listener'] : $this->get('sensio_framework_extra.security.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('massive_search.index_rebuild', array(0 => function () {
            return ${($_ = isset($this->services['massive_search.search.event_subscriber.purge_subscriber']) ? $this->services['massive_search.search.event_subscriber.purge_subscriber'] : $this->get('massive_search.search.event_subscriber.purge_subscriber')) && false ?: '_'};
        }, 1 => 'purgeIndexes'), 500);
        $instance->addListener('massive_search.pre_index', array(0 => function () {
            return ${($_ = isset($this->services['sulu_media.search.subscriber.structure_media']) ? $this->services['sulu_media.search.subscriber.structure_media'] : $this->get('sulu_media.search.subscriber.structure_media')) && false ?: '_'};
        }, 1 => 'handlePreIndex'), 0);
        $instance->addListener('massive_search.pre_index', array(0 => function () {
            return ${($_ = isset($this->services['sulu_media.search.subscriber.media']) ? $this->services['sulu_media.search.subscriber.media'] : $this->get('sulu_media.search.subscriber.media')) && false ?: '_'};
        }, 1 => 'handlePreIndex'), 0);
        $instance->addListener('massive_search.pre_index', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.search.event_subscriber.blame_timestamp']) ? $this->services['sulu_content.search.event_subscriber.blame_timestamp'] : $this->get('sulu_content.search.event_subscriber.blame_timestamp')) && false ?: '_'};
        }, 1 => 'handleBlameTimestamp'), 0);
        $instance->addListener('massive_search.hit', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.search.event_subscriber.blame_timestamp']) ? $this->services['sulu_content.search.event_subscriber.blame_timestamp'] : $this->get('sulu_content.search.event_subscriber.blame_timestamp')) && false ?: '_'};
        }, 1 => 'handleBlameTimestampHitMapping'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['sulu_website.router_listener']) ? $this->services['sulu_website.router_listener'] : $this->get('sulu_website.router_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 32);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['sulu_website.router_listener']) ? $this->services['sulu_website.router_listener'] : $this->get('sulu_website.router_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['sulu_website.redirect_exception_listener']) ? $this->services['sulu_website.redirect_exception_listener'] : $this->get('sulu_website.redirect_exception_listener')) && false ?: '_'};
        }, 1 => 'redirectPartialMatch'), 0);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['sulu_website.redirect_exception_listener']) ? $this->services['sulu_website.redirect_exception_listener'] : $this->get('sulu_website.redirect_exception_listener')) && false ?: '_'};
        }, 1 => 'redirectTrailingSlashOrHtml'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sulu_website.event_subscriber.generator']) ? $this->services['sulu_website.event_subscriber.generator'] : $this->get('sulu_website.event_subscriber.generator')) && false ?: '_'};
        }, 1 => 'onResponse'), 0);
        $instance->addListener('kernel.terminate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_http_cache.event_subscriber.flush']) ? $this->services['sulu_http_cache.event_subscriber.flush'] : $this->get('sulu_http_cache.event_subscriber.flush')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_http_cache.event_subscriber.flush']) ? $this->services['sulu_http_cache.event_subscriber.flush'] : $this->get('sulu_http_cache.event_subscriber.flush')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sulu_http_cache.event_subscriber.update_response']) ? $this->services['sulu_http_cache.event_subscriber.update_response'] : $this->get('sulu_http_cache.event_subscriber.update_response')) && false ?: '_'};
        }, 1 => 'onResponse'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['web_profiler.debug_toolbar']) ? $this->services['web_profiler.debug_toolbar'] : $this->get('web_profiler.debug_toolbar')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -128);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['debug.dump_listener']) ? $this->services['debug.dump_listener'] : $this->get('debug.dump_listener')) && false ?: '_'};
        }, 1 => 'configure'), 1024);

        return $instance;
    }

    /**
     * Gets the public 'debug.stopwatch' shared service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the public 'deprecated.form.registry' shared service.
     *
     * @return \stdClass
     *
     * @deprecated The service "deprecated.form.registry" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0
     */
    protected function getDeprecated_Form_RegistryService()
    {
        @trigger_error('The service "deprecated.form.registry" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0', E_USER_DEPRECATED);

        $this->services['deprecated.form.registry'] = $instance = new \stdClass();

        $instance->registry = array(0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->getForm_TypeGuesser_ValidatorService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->getForm_Type_ChoiceService()) && false ?: '_'}, 2 => ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->getForm_Type_FormService()) && false ?: '_'}, 3 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->getForm_TypeExtension_Form_HttpFoundationService()) && false ?: '_'}, 4 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->getForm_TypeExtension_Form_ValidatorService()) && false ?: '_'}, 5 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->getForm_TypeExtension_Repeated_ValidatorService()) && false ?: '_'}, 6 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->getForm_TypeExtension_Submit_ValidatorService()) && false ?: '_'}, 7 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->getForm_TypeExtension_Upload_ValidatorService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'deprecated.form.registry.csrf' shared service.
     *
     * @return \stdClass
     *
     * @deprecated The service "deprecated.form.registry.csrf" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0
     */
    protected function getDeprecated_Form_Registry_CsrfService()
    {
        @trigger_error('The service "deprecated.form.registry.csrf" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0', E_USER_DEPRECATED);

        $this->services['deprecated.form.registry.csrf'] = $instance = new \stdClass();

        $instance->registry = array(0 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->getForm_TypeExtension_CsrfService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection'), array('default' => 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the public 'doctrine.cache_clear_metadata_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearMetadataCommandService()
    {
        return $this->services['doctrine.cache_clear_metadata_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_clear_query_cache_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearQueryCacheCommandService()
    {
        return $this->services['doctrine.cache_clear_query_cache_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_clear_result_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearResultCommandService()
    {
        return $this->services['doctrine.cache_clear_result_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_collection_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand
     */
    protected function getDoctrine_CacheCollectionRegionCommandService()
    {
        return $this->services['doctrine.cache_collection_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.clear_entity_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand
     */
    protected function getDoctrine_ClearEntityRegionCommandService()
    {
        return $this->services['doctrine.clear_entity_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.clear_query_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand
     */
    protected function getDoctrine_ClearQueryRegionCommandService()
    {
        return $this->services['doctrine.clear_query_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_create_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand
     */
    protected function getDoctrine_DatabaseCreateCommandService()
    {
        return $this->services['doctrine.database_create_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_drop_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand
     */
    protected function getDoctrine_DatabaseDropCommandService()
    {
        return $this->services['doctrine.database_drop_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_import_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand
     */
    protected function getDoctrine_DatabaseImportCommandService()
    {
        return $this->services['doctrine.database_import_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array());
    }

    /**
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger(${($_ = isset($this->services['monolog.logger.doctrine']) ? $this->services['monolog.logger.doctrine'] : $this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Gedmo\Tree\TreeListener();
        $c->setAnnotationReader(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});

        $d = new \Doctrine\ORM\Tools\ResolveTargetEntityListener();
        $d->addResolveTargetEntity('Sulu\\Bundle\\MediaBundle\\Entity\\CollectionInterface', 'Sulu\\Bundle\\MediaBundle\\Entity\\Collection', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\ContactBundle\\Entity\\AccountInterface', 'Sulu\\Bundle\\ContactBundle\\Entity\\Account', array());
        $d->addResolveTargetEntity('Sulu\\Component\\Contact\\Model\\ContactInterface', 'Sulu\\Bundle\\ContactBundle\\Entity\\Contact', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\MediaBundle\\Entity\\MediaInterface', 'Sulu\\Bundle\\MediaBundle\\Entity\\Media', array());
        $d->addResolveTargetEntity('Sulu\\Component\\Security\\Authentication\\UserInterface', 'Sulu\\Bundle\\SecurityBundle\\Entity\\User', array());
        $d->addResolveTargetEntity('Sulu\\Component\\Security\\Authentication\\RoleInterface', 'Sulu\\Bundle\\SecurityBundle\\Entity\\Role', array());
        $d->addResolveTargetEntity('Sulu\\Component\\Security\\Authentication\\RoleSettingInterface', 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSetting', array());
        $d->addResolveTargetEntity('Sulu\\Component\\Security\\Authorization\\AccessControl\\AccessControlInterface', 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryInterface', 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMetaInterface', 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMeta', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslationInterface', 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslation', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\CategoryBundle\\Entity\\KeywordInterface', 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\TagBundle\\Tag\\TagInterface', 'Sulu\\Bundle\\TagBundle\\Entity\\Tag', array());
        $d->addResolveTargetEntity('Sulu\\Bundle\\RouteBundle\\Model\\RouteInterface', 'Sulu\\Bundle\\RouteBundle\\Entity\\Route', array());

        $e = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $e->addEventSubscriber(${($_ = isset($this->services['sulu.persistence.event_subscriber.orm.metadata']) ? $this->services['sulu.persistence.event_subscriber.orm.metadata'] : $this->get('sulu.persistence.event_subscriber.orm.metadata')) && false ?: '_'});
        $e->addEventSubscriber(${($_ = isset($this->services['cmf_routing.persistence.doctrine.route_condition_metadata_listener']) ? $this->services['cmf_routing.persistence.doctrine.route_condition_metadata_listener'] : $this->get('cmf_routing.persistence.doctrine.route_condition_metadata_listener')) && false ?: '_'});
        $e->addEventSubscriber(${($_ = isset($this->services['sulu.persistence.event_subscriber.orm.user_blame']) ? $this->services['sulu.persistence.event_subscriber.orm.user_blame'] : $this->get('sulu.persistence.event_subscriber.orm.user_blame')) && false ?: '_'});
        $e->addEventSubscriber(${($_ = isset($this->services['sulu.persistence.event_subscriber.orm.timestampable']) ? $this->services['sulu.persistence.event_subscriber.orm.timestampable'] : $this->get('sulu.persistence.event_subscriber.orm.timestampable')) && false ?: '_'});
        $e->addEventSubscriber(${($_ = isset($this->services['massive_search.search.event_subscriber.doctrine_orm']) ? $this->services['massive_search.search.event_subscriber.doctrine_orm'] : $this->get('massive_search.search.event_subscriber.doctrine_orm')) && false ?: '_'});
        $e->addEventSubscriber($c);
        $e->addEventSubscriber($d);
        $e->addEventSubscriber(${($_ = isset($this->services['sulu_core.doctrine.references']) ? $this->services['sulu_core.doctrine.references'] : $this->get('sulu_core.doctrine.references')) && false ?: '_'});
        $e->addEventListener(array(0 => 'postGenerateSchema'), 'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener');
        $e->addEventListener(array(0 => 'postPersist'), ${($_ = isset($this->services['sulu_contact.account_listener']) ? $this->services['sulu_contact.account_listener'] : $this->get('sulu_contact.account_listener')) && false ?: '_'});
        $e->addEventListener(array(0 => 'loadClassMetadata'), ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : $this->get('doctrine.orm.default_listeners.attach_entity_listeners')) && false ?: '_'});

        return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->get('doctrine.dbal.connection_factory')) && false ?: '_'}->createConnection(array('driver' => 'pdo_mysql', 'host' => 'db', 'port' => NULL, 'dbname' => 'sulu', 'user' => 'root', 'password' => 'root', 'charset' => 'UTF8', 'driverOptions' => array(), 'serverVersion' => 5.5, 'defaultTableOptions' => array()), $b, $e, array());
    }

    /**
     * Gets the public 'doctrine.ensure_production_settings_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand
     */
    protected function getDoctrine_EnsureProductionSettingsCommandService()
    {
        return $this->services['doctrine.ensure_production_settings_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.fixtures_load_command' shared service.
     *
     * @return \Doctrine\Bundle\FixturesBundle\Command\LoadDataFixturesDoctrineCommand
     */
    protected function getDoctrine_FixturesLoadCommandService()
    {
        return $this->services['doctrine.fixtures_load_command'] = new \Doctrine\Bundle\FixturesBundle\Command\LoadDataFixturesDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.generate_entities_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand
     */
    protected function getDoctrine_GenerateEntitiesCommandService()
    {
        return $this->services['doctrine.generate_entities_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_convert_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand
     */
    protected function getDoctrine_MappingConvertCommandService()
    {
        return $this->services['doctrine.mapping_convert_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_import_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand
     */
    protected function getDoctrine_MappingImportCommandService()
    {
        return $this->services['doctrine.mapping_import_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_info_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand
     */
    protected function getDoctrine_MappingInfoCommandService()
    {
        return $this->services['doctrine.mapping_info_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this);
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public function getDoctrine_Orm_DefaultEntityManagerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['doctrine.orm.default_entity_manager'] = DoctrineORMEntityManager_00000000199dc25f000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDoctrine_Orm_DefaultEntityManagerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $a = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver(array(($this->targetDirs[4].'/vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity') => 'Gedmo\\Tree\\Entity', ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/config/doctrine') => 'Sulu\\Bundle\\ContactBundle\\Entity', ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/config/doctrine') => 'Sulu\\Bundle\\MediaBundle\\Entity', ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/config/doctrine') => 'Sulu\\Bundle\\SecurityBundle\\Entity', ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/config/doctrine') => 'Sulu\\Bundle\\CategoryBundle\\Entity', ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/config/doctrine') => 'Sulu\\Bundle\\TagBundle\\Entity', ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/config/doctrine') => 'Sulu\\Bundle\\WebsiteBundle\\Entity', ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/config/doctrine') => 'Sulu\\Bundle\\RouteBundle\\Entity'));
        $a->setGlobalBasename('mapping');

        $b = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $b->addDriver($a, 'Gedmo\\Tree\\Entity');
        $b->addDriver($a, 'Sulu\\Bundle\\ContactBundle\\Entity');
        $b->addDriver($a, 'Sulu\\Bundle\\MediaBundle\\Entity');
        $b->addDriver($a, 'Sulu\\Bundle\\SecurityBundle\\Entity');
        $b->addDriver($a, 'Sulu\\Bundle\\CategoryBundle\\Entity');
        $b->addDriver($a, 'Sulu\\Bundle\\TagBundle\\Entity');
        $b->addDriver($a, 'Sulu\\Bundle\\WebsiteBundle\\Entity');
        $b->addDriver($a, 'Sulu\\Bundle\\RouteBundle\\Entity');
        $b->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}, array(0 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/Entity'))), 'Sulu\\Bundle\\CoreBundle\\Entity');

        $c = new \Doctrine\ORM\Configuration();
        $c->setEntityNamespaces(array('GedmoTree' => 'Gedmo\\Tree\\Entity', 'SuluCoreBundle' => 'Sulu\\Bundle\\CoreBundle\\Entity', 'SuluContactBundle' => 'Sulu\\Bundle\\ContactBundle\\Entity', 'SuluMediaBundle' => 'Sulu\\Bundle\\MediaBundle\\Entity', 'SuluSecurityBundle' => 'Sulu\\Bundle\\SecurityBundle\\Entity', 'SuluCategoryBundle' => 'Sulu\\Bundle\\CategoryBundle\\Entity', 'SuluTagBundle' => 'Sulu\\Bundle\\TagBundle\\Entity', 'SuluWebsiteBundle' => 'Sulu\\Bundle\\WebsiteBundle\\Entity', 'SuluRouteBundle' => 'Sulu\\Bundle\\RouteBundle\\Entity'));
        $c->setMetadataCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_metadata_cache')) && false ?: '_'});
        $c->setQueryCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_query_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_query_cache')) && false ?: '_'});
        $c->setResultCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_result_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_result_cache')) && false ?: '_'});
        $c->setMetadataDriverImpl($b);
        $c->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $c->setProxyNamespace('Proxies');
        $c->setAutoGenerateProxyClasses(true);
        $c->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $c->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $c->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
        $c->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $c->setEntityListenerResolver(${($_ = isset($this->services['doctrine.orm.default_entity_listener_resolver']) ? $this->services['doctrine.orm.default_entity_listener_resolver'] : $this->get('doctrine.orm.default_entity_listener_resolver')) && false ?: '_'});
        $c->addCustomStringFunction('group_concat', 'Oro\\ORM\\Query\\AST\\Functions\\String\\GroupConcat');
        $c->addCustomStringFunction('CAST', 'Sulu\\Component\\Rest\\DQL\\Cast');

        $instance = \Doctrine\ORM\EntityManager::create(${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}, $c);

        ${($_ = isset($this->services['doctrine.orm.default_manager_configurator']) ? $this->services['doctrine.orm.default_manager_configurator'] : $this->get('doctrine.orm.default_manager_configurator')) && false ?: '_'}->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager.property_info_extractor' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor
     */
    protected function getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService()
    {
        return $this->services['doctrine.orm.default_entity_manager.property_info_extractor'] = new \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getMetadataFactory());
    }

    /**
     * Gets the public 'doctrine.orm.default_listeners.attach_entity_listeners' shared service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener
     */
    protected function getDoctrine_Orm_DefaultListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the public 'doctrine.orm.default_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the public 'doctrine.orm.validator.unique' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'doctrine.orm.validator_initializer' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'doctrine.query_dql_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand
     */
    protected function getDoctrine_QueryDqlCommandService()
    {
        return $this->services['doctrine.query_dql_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.query_sql_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand
     */
    protected function getDoctrine_QuerySqlCommandService()
    {
        return $this->services['doctrine.query_sql_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_create_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaCreateCommandService()
    {
        return $this->services['doctrine.schema_create_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_drop_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaDropCommandService()
    {
        return $this->services['doctrine.schema_drop_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_update_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaUpdateCommandService()
    {
        return $this->services['doctrine.schema_update_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_validate_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand
     */
    protected function getDoctrine_SchemaValidateCommandService()
    {
        return $this->services['doctrine.schema_validate_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand();
    }

    /**
     * Gets the public 'doctrine_cache.contains_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand
     */
    protected function getDoctrineCache_ContainsCommandService()
    {
        return $this->services['doctrine_cache.contains_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand();
    }

    /**
     * Gets the public 'doctrine_cache.delete_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand
     */
    protected function getDoctrineCache_DeleteCommandService()
    {
        return $this->services['doctrine_cache.delete_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand();
    }

    /**
     * Gets the public 'doctrine_cache.flush_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand
     */
    protected function getDoctrineCache_FlushCommandService()
    {
        return $this->services['doctrine_cache.flush_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand();
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_4459a0cacfc703697d4929c17b11d65643b8008378f81071aac6eb87e8d60713');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_query_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_4459a0cacfc703697d4929c17b11d65643b8008378f81071aac6eb87e8d60713');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_result_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_4459a0cacfc703697d4929c17b11d65643b8008378f81071aac6eb87e8d60713');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.phpcr_meta' shared service.
     *
     * @return \Doctrine\Common\Cache\FilesystemCache
     */
    protected function getDoctrineCache_Providers_PhpcrMetaService()
    {
        return $this->services['doctrine_cache.providers.phpcr_meta'] = new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/doctrine/cache/file_system'), NULL, 2);
    }

    /**
     * Gets the public 'doctrine_cache.providers.phpcr_nodes' shared service.
     *
     * @return \Doctrine\Common\Cache\FilesystemCache
     */
    protected function getDoctrineCache_Providers_PhpcrNodesService()
    {
        return $this->services['doctrine_cache.providers.phpcr_nodes'] = new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/doctrine/cache/file_system'), NULL, 2);
    }

    /**
     * Gets the public 'doctrine_cache.providers.sulu_websocket' shared service.
     *
     * @return \Doctrine\Common\Cache\FilesystemCache
     */
    protected function getDoctrineCache_Providers_SuluWebsocketService()
    {
        return $this->services['doctrine_cache.providers.sulu_websocket'] = new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/sulu/websocket'), NULL, 2);
    }

    /**
     * Gets the public 'doctrine_cache.stats_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand
     */
    protected function getDoctrineCache_StatsCommandService()
    {
        return $this->services['doctrine_cache.stats_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand();
    }

    /**
     * Gets the public 'doctrine_phpcr' shared service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\ManagerRegistry
     */
    protected function getDoctrinePhpcrService()
    {
        $this->services['doctrine_phpcr'] = $instance = new \Doctrine\Bundle\PHPCRBundle\ManagerRegistry('PHPCR', array('default' => 'doctrine_phpcr.default_session', 'live' => 'doctrine_phpcr.live_session'), array(), 'live', '', 'Doctrine\\Common\\Proxy\\Proxy');

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'doctrine_phpcr.admin.default_session' shared service.
     *
     * @return \Jackalope\Session
     */
    protected function getDoctrinePhpcr_Admin_DefaultSessionService()
    {
        return $this->services['doctrine_phpcr.admin.default_session'] = ${($_ = isset($this->services['doctrine_phpcr.admin.jackalope.repository.default']) ? $this->services['doctrine_phpcr.admin.jackalope.repository.default'] : $this->get('doctrine_phpcr.admin.jackalope.repository.default')) && false ?: '_'}->login(new \PHPCR\SimpleCredentials('admin', 'admin'), NULL);
    }

    /**
     * Gets the public 'doctrine_phpcr.admin.jackalope.repository.default' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected function getDoctrinePhpcr_Admin_Jackalope_Repository_DefaultService()
    {
        return $this->services['doctrine_phpcr.admin.jackalope.repository.default'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal']) ? $this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] : $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')) && false ?: '_'}->getRepository(array('jackalope.doctrine_dbal_connection' => ${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}, 'jackalope.check_login_on_server' => false));
    }

    /**
     * Gets the public 'doctrine_phpcr.admin.jackalope.repository.live' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected function getDoctrinePhpcr_Admin_Jackalope_Repository_LiveService()
    {
        return $this->services['doctrine_phpcr.admin.jackalope.repository.live'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal']) ? $this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] : $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')) && false ?: '_'}->getRepository(array('jackalope.doctrine_dbal_connection' => ${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}, 'jackalope.check_login_on_server' => false));
    }

    /**
     * Gets the public 'doctrine_phpcr.admin.live_session' shared service.
     *
     * @return \Jackalope\Session
     */
    protected function getDoctrinePhpcr_Admin_LiveSessionService()
    {
        return $this->services['doctrine_phpcr.admin.live_session'] = ${($_ = isset($this->services['doctrine_phpcr.admin.jackalope.repository.live']) ? $this->services['doctrine_phpcr.admin.jackalope.repository.live'] : $this->get('doctrine_phpcr.admin.jackalope.repository.live')) && false ?: '_'}->login(new \PHPCR\SimpleCredentials('admin', 'admin'), NULL);
    }

    /**
     * Gets the public 'doctrine_phpcr.console_dumper' shared service.
     *
     * @return \PHPCR\Util\Console\Helper\PhpcrConsoleDumperHelper
     */
    protected function getDoctrinePhpcr_ConsoleDumperService()
    {
        return $this->services['doctrine_phpcr.console_dumper'] = new \PHPCR\Util\Console\Helper\PhpcrConsoleDumperHelper();
    }

    /**
     * Gets the public 'doctrine_phpcr.default_session' shared service.
     *
     * @return \Jackalope\Session
     */
    protected function getDoctrinePhpcr_DefaultSessionService()
    {
        return $this->services['doctrine_phpcr.default_session'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.default']) ? $this->services['doctrine_phpcr.jackalope.repository.default'] : $this->get('doctrine_phpcr.jackalope.repository.default')) && false ?: '_'}->login(new \PHPCR\SimpleCredentials('admin', 'admin'), 'default');
    }

    /**
     * Gets the public 'doctrine_phpcr.initializer_manager' shared service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Initializer\InitializerManager
     */
    protected function getDoctrinePhpcr_InitializerManagerService()
    {
        return $this->services['doctrine_phpcr.initializer_manager'] = new \Doctrine\Bundle\PHPCRBundle\Initializer\InitializerManager(${($_ = isset($this->services['doctrine_phpcr']) ? $this->services['doctrine_phpcr'] : $this->get('doctrine_phpcr')) && false ?: '_'});
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.default' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_DefaultService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.default'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal']) ? $this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] : $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')) && false ?: '_'}->getRepository(array('jackalope.doctrine_dbal_connection' => ${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}, 'jackalope.check_login_on_server' => false));
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.factory.doctrinedbal' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_DoctrinedbalService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.doctrinedbal'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal']) ? $this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] : $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')) && false ?: '_'}->getRepository(array());
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.factory.jackrabbit' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_JackrabbitService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.jackrabbit'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.factory.service.jackrabbit']) ? $this->services['doctrine_phpcr.jackalope.repository.factory.service.jackrabbit'] : $this->get('doctrine_phpcr.jackalope.repository.factory.service.jackrabbit')) && false ?: '_'}->getRepository(array());
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.factory.prismic' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_PrismicService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.prismic'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.factory.service.prismic']) ? $this->services['doctrine_phpcr.jackalope.repository.factory.service.prismic'] : $this->get('doctrine_phpcr.jackalope.repository.factory.service.prismic')) && false ?: '_'}->getRepository(array());
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal' shared service.
     *
     * @return \Jackalope\RepositoryFactoryDoctrineDBAL
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_Service_DoctrinedbalService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] = new \Jackalope\RepositoryFactoryDoctrineDBAL();
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.factory.service.jackrabbit' shared service.
     *
     * @return \Jackalope\RepositoryFactoryJackrabbit
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_Service_JackrabbitService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.service.jackrabbit'] = new \Jackalope\RepositoryFactoryJackrabbit();
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.factory.service.prismic' shared service.
     *
     * @return \Jackalope\RepositoryFactoryPrismic
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_Factory_Service_PrismicService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.factory.service.prismic'] = new \Jackalope\RepositoryFactoryPrismic();
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope.repository.live' shared service.
     *
     * @return \Jackalope\Repository
     */
    protected function getDoctrinePhpcr_Jackalope_Repository_LiveService()
    {
        return $this->services['doctrine_phpcr.jackalope.repository.live'] = ${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal']) ? $this->services['doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal'] : $this->get('doctrine_phpcr.jackalope.repository.factory.service.doctrinedbal')) && false ?: '_'}->getRepository(array('jackalope.doctrine_dbal_connection' => ${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}, 'jackalope.check_login_on_server' => false));
    }

    /**
     * Gets the public 'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener' shared service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\EventListener\JackalopeDoctrineDbalSchemaListener
     */
    protected function getDoctrinePhpcr_JackalopeDoctrineDbal_SchemaListenerService()
    {
        return $this->services['doctrine_phpcr.jackalope_doctrine_dbal.schema_listener'] = new \Doctrine\Bundle\PHPCRBundle\EventListener\JackalopeDoctrineDbalSchemaListener(new \Jackalope\Transport\DoctrineDBAL\RepositorySchema(array(), ${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}));
    }

    /**
     * Gets the public 'dtl_content.form.factory.document_type' shared service.
     *
     * @return \Sulu\Component\Content\Form\Type\DocumentObjectType
     */
    protected function getDtlContent_Form_Factory_DocumentTypeService()
    {
        return $this->services['dtl_content.form.factory.document_type'] = new \Sulu\Component\Content\Form\Type\DocumentObjectType(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'dtl_content.form.type.home' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Form\Type\HomeDocumentType
     */
    protected function getDtlContent_Form_Type_HomeService()
    {
        return $this->services['dtl_content.form.type.home'] = new \Sulu\Bundle\ContentBundle\Form\Type\HomeDocumentType();
    }

    /**
     * Gets the public 'dtl_content.form.type.page' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Form\Type\PageDocumentType
     */
    protected function getDtlContent_Form_Type_PageService()
    {
        return $this->services['dtl_content.form.type.page'] = new \Sulu\Bundle\ContentBundle\Form\Type\PageDocumentType(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'dubture_ffmpeg.ffmpeg' shared service.
     *
     * @return \FFMpeg\FFMpeg
     */
    public function getDubtureFfmpeg_FfmpegService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['dubture_ffmpeg.ffmpeg'] = FFMpegFFMpeg_00000000199dd5e6000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDubtureFfmpeg_FfmpegService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return \FFMpeg\FFMpeg::create(array('ffmpeg.binaries' => '/usr/local/bin/ffmpeg', 'ffprobe.binaries' => '/usr/local/bin/ffprobe', 'timeout' => 300, 'ffmpeg.threads' => 4), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'dubture_ffmpeg.ffprobe' shared service.
     *
     * @return \FFMpeg\FFProbe
     */
    public function getDubtureFfmpeg_FfprobeService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['dubture_ffmpeg.ffprobe'] = FFMpegFFProbe_00000000199dd619000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDubtureFfmpeg_FfprobeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return \FFMpeg\FFProbe::create(array('ffmpeg.binaries' => '/usr/local/bin/ffmpeg', 'ffprobe.binaries' => '/usr/local/bin/ffprobe'), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'file_locator' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'}, ($this->targetDirs[4].'/app/Resources'), array(0 => ($this->targetDirs[4].'/app')));
    }

    /**
     * Gets the public 'filesystem' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the public 'form.factory' shared service.
     *
     * @return \Symfony\Component\Form\FormFactory
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory(${($_ = isset($this->services['form.registry']) ? $this->services['form.registry'] : $this->get('form.registry')) && false ?: '_'}, ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->get('form.resolved_type_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\PHPCRReferenceType' => function () {
            return ${($_ = isset($this->services['form.type.phpcr.reference']) ? $this->services['form.type.phpcr.reference'] : $this->get('form.type.phpcr.reference')) && false ?: '_'};
        }, 'Sulu\\Bundle\\SnippetBundle\\Form\\SnippetType' => function () {
            return ${($_ = isset($this->services['sulu_snippet.form.snippet']) ? $this->services['sulu_snippet.form.snippet'] : $this->get('sulu_snippet.form.snippet')) && false ?: '_'};
        }, 'Sulu\\Bundle\\ContentBundle\\Form\\Type\\HomeDocumentType' => function () {
            return ${($_ = isset($this->services['dtl_content.form.type.home']) ? $this->services['dtl_content.form.type.home'] : $this->get('dtl_content.form.type.home')) && false ?: '_'};
        }, 'Sulu\\Bundle\\ContentBundle\\Form\\Type\\PageDocumentType' => function () {
            return ${($_ = isset($this->services['dtl_content.form.type.page']) ? $this->services['dtl_content.form.type.page'] : $this->get('dtl_content.form.type.page')) && false ?: '_'};
        }, 'Sulu\\Component\\Content\\Form\\Type\\DocumentObjectType' => function () {
            return ${($_ = isset($this->services['dtl_content.form.factory.document_type']) ? $this->services['dtl_content.form.factory.document_type'] : $this->get('dtl_content.form.factory.document_type')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
            return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->get('form.type.entity')) && false ?: '_'};
        }, 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Form\\Type\\RouteTypeType' => function () {
            return ${($_ = isset($this->services['cmf_routing.route_type_form_type']) ? $this->services['cmf_routing.route_type_form_type'] : $this->get('cmf_routing.route_type_form_type')) && false ?: '_'};
        }, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
            return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->getForm_Type_ChoiceService()) && false ?: '_'};
        }, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
            return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->getForm_Type_FormService()) && false ?: '_'};
        })), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->getForm_TypeExtension_Form_HttpFoundationService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->getForm_TypeExtension_Form_ValidatorService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->getForm_TypeExtension_Upload_ValidatorService()) && false ?: '_'};
            yield 3 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->getForm_TypeExtension_CsrfService()) && false ?: '_'};
            yield 4 => ${($_ = isset($this->services['form.type_extension.form.data_collector']) ? $this->services['form.type_extension.form.data_collector'] : $this->getForm_TypeExtension_Form_DataCollectorService()) && false ?: '_'};
        }, 5), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->getForm_TypeExtension_Repeated_ValidatorService()) && false ?: '_'};
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->getForm_TypeExtension_Submit_ValidatorService()) && false ?: '_'};
        }, 1)), new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->getForm_TypeGuesser_ValidatorService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->get('form.type_guesser.doctrine')) && false ?: '_'};
        }, 2), NULL)), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->get('form.resolved_type_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.resolved_type_factory' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.birthday' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType
     *
     * @deprecated The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_BirthdayService()
    {
        @trigger_error('The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the public 'form.type.button' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType
     *
     * @deprecated The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ButtonService()
    {
        @trigger_error('The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the public 'form.type.checkbox' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType
     *
     * @deprecated The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CheckboxService()
    {
        @trigger_error('The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the public 'form.type.collection' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType
     *
     * @deprecated The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CollectionService()
    {
        @trigger_error('The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the public 'form.type.country' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType
     *
     * @deprecated The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CountryService()
    {
        @trigger_error('The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the public 'form.type.currency' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType
     *
     * @deprecated The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CurrencyService()
    {
        @trigger_error('The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the public 'form.type.date' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType
     *
     * @deprecated The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DateService()
    {
        @trigger_error('The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the public 'form.type.datetime' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType
     *
     * @deprecated The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DatetimeService()
    {
        @trigger_error('The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the public 'form.type.email' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType
     *
     * @deprecated The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_EmailService()
    {
        @trigger_error('The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the public 'form.type.entity' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.file' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType
     *
     * @deprecated The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_FileService()
    {
        @trigger_error('The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the public 'form.type.hidden' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType
     *
     * @deprecated The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_HiddenService()
    {
        @trigger_error('The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the public 'form.type.integer' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType
     *
     * @deprecated The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_IntegerService()
    {
        @trigger_error('The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the public 'form.type.language' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType
     *
     * @deprecated The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LanguageService()
    {
        @trigger_error('The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the public 'form.type.locale' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType
     *
     * @deprecated The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LocaleService()
    {
        @trigger_error('The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the public 'form.type.money' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType
     *
     * @deprecated The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_MoneyService()
    {
        @trigger_error('The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the public 'form.type.number' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType
     *
     * @deprecated The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_NumberService()
    {
        @trigger_error('The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the public 'form.type.password' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType
     *
     * @deprecated The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PasswordService()
    {
        @trigger_error('The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the public 'form.type.percent' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType
     *
     * @deprecated The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PercentService()
    {
        @trigger_error('The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the public 'form.type.phpcr.reference' shared service.
     *
     * @return \Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRReferenceType
     */
    protected function getForm_Type_Phpcr_ReferenceService()
    {
        return $this->services['form.type.phpcr.reference'] = new \Doctrine\Bundle\PHPCRBundle\Form\Type\PHPCRReferenceType(${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.radio' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType
     *
     * @deprecated The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RadioService()
    {
        @trigger_error('The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the public 'form.type.range' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RangeType
     *
     * @deprecated The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RangeService()
    {
        @trigger_error('The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.range'] = new \Symfony\Component\Form\Extension\Core\Type\RangeType();
    }

    /**
     * Gets the public 'form.type.repeated' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType
     *
     * @deprecated The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RepeatedService()
    {
        @trigger_error('The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the public 'form.type.reset' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType
     *
     * @deprecated The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ResetService()
    {
        @trigger_error('The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the public 'form.type.search' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType
     *
     * @deprecated The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SearchService()
    {
        @trigger_error('The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the public 'form.type.submit' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType
     *
     * @deprecated The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SubmitService()
    {
        @trigger_error('The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the public 'form.type.text' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType
     *
     * @deprecated The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextService()
    {
        @trigger_error('The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the public 'form.type.textarea' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType
     *
     * @deprecated The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextareaService()
    {
        @trigger_error('The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the public 'form.type.time' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType
     *
     * @deprecated The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimeService()
    {
        @trigger_error('The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the public 'form.type.timezone' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType
     *
     * @deprecated The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimezoneService()
    {
        @trigger_error('The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the public 'form.type.url' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType
     *
     * @deprecated The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_UrlService()
    {
        @trigger_error('The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the public 'form.type_guesser.doctrine' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.body_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener
     */
    protected function getFosRest_BodyListenerService()
    {
        $this->services['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener(${($_ = isset($this->services['fos_rest.decoder_provider']) ? $this->services['fos_rest.decoder_provider'] : $this->get('fos_rest.decoder_provider')) && false ?: '_'}, false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /**
     * Gets the public 'fos_rest.decoder.json' shared service.
     *
     * @return \FOS\RestBundle\Decoder\JsonDecoder
     */
    protected function getFosRest_Decoder_JsonService()
    {
        return $this->services['fos_rest.decoder.json'] = new \FOS\RestBundle\Decoder\JsonDecoder();
    }

    /**
     * Gets the public 'fos_rest.decoder.jsontoform' shared service.
     *
     * @return \FOS\RestBundle\Decoder\JsonToFormDecoder
     */
    protected function getFosRest_Decoder_JsontoformService()
    {
        return $this->services['fos_rest.decoder.jsontoform'] = new \FOS\RestBundle\Decoder\JsonToFormDecoder();
    }

    /**
     * Gets the public 'fos_rest.decoder.xml' shared service.
     *
     * @return \FOS\RestBundle\Decoder\XmlDecoder
     */
    protected function getFosRest_Decoder_XmlService()
    {
        return $this->services['fos_rest.decoder.xml'] = new \FOS\RestBundle\Decoder\XmlDecoder();
    }

    /**
     * Gets the public 'fos_rest.decoder_provider' shared service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider
     */
    protected function getFosRest_DecoderProviderService()
    {
        $this->services['fos_rest.decoder_provider'] = $instance = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_rest.exception_format_negotiator' shared service.
     *
     * @return \FOS\RestBundle\Util\FormatNegotiator
     */
    protected function getFosRest_ExceptionFormatNegotiatorService()
    {
        return $this->services['fos_rest.exception_format_negotiator'] = new \FOS\RestBundle\Util\FormatNegotiator();
    }

    /**
     * Gets the public 'fos_rest.format_negotiator' shared service.
     *
     * @return \FOS\RestBundle\Util\FormatNegotiator
     */
    protected function getFosRest_FormatNegotiatorService()
    {
        return $this->services['fos_rest.format_negotiator'] = new \FOS\RestBundle\Util\FormatNegotiator();
    }

    /**
     * Gets the public 'fos_rest.inflector.doctrine' shared service.
     *
     * @return \FOS\RestBundle\Util\Inflector\DoctrineInflector
     */
    protected function getFosRest_Inflector_DoctrineService()
    {
        return $this->services['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Util\Inflector\DoctrineInflector();
    }

    /**
     * Gets the public 'fos_rest.normalizer.camel_keys' shared service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizer
     */
    protected function getFosRest_Normalizer_CamelKeysService()
    {
        return $this->services['fos_rest.normalizer.camel_keys'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizer();
    }

    /**
     * Gets the public 'fos_rest.normalizer.camel_keys_with_leading_underscore' shared service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore
     */
    protected function getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService()
    {
        return $this->services['fos_rest.normalizer.camel_keys_with_leading_underscore'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore();
    }

    /**
     * Gets the public 'fos_rest.request.param_fetcher' shared service.
     *
     * @return \FOS\RestBundle\Request\ParamFetcher
     */
    protected function getFosRest_Request_ParamFetcherService()
    {
        return $this->services['fos_rest.request.param_fetcher'] = new \FOS\RestBundle\Request\ParamFetcher(${($_ = isset($this->services['fos_rest.request.param_fetcher.reader']) ? $this->services['fos_rest.request.param_fetcher.reader'] : $this->get('fos_rest.request.param_fetcher.reader')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.violation_formatter']) ? $this->services['fos_rest.violation_formatter'] : $this->get('fos_rest.violation_formatter')) && false ?: '_'}, ${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.request.param_fetcher.reader' shared service.
     *
     * @return \FOS\RestBundle\Request\ParamReader
     */
    protected function getFosRest_Request_ParamFetcher_ReaderService()
    {
        return $this->services['fos_rest.request.param_fetcher.reader'] = new \FOS\RestBundle\Request\ParamReader(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.routing.loader.controller' shared service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteLoader
     */
    protected function getFosRest_Routing_Loader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.controller'] = new \FOS\RestBundle\Routing\Loader\RestRouteLoader($this, ${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, ${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.routing.loader.reader.controller']) ? $this->services['fos_rest.routing.loader.reader.controller'] : $this->get('fos_rest.routing.loader.reader.controller')) && false ?: '_'}, 'json');
    }

    /**
     * Gets the public 'fos_rest.routing.loader.processor' shared service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteProcessor
     */
    protected function getFosRest_Routing_Loader_ProcessorService()
    {
        return $this->services['fos_rest.routing.loader.processor'] = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor();
    }

    /**
     * Gets the public 'fos_rest.routing.loader.reader.action' shared service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestActionReader
     */
    protected function getFosRest_Routing_Loader_Reader_ActionService()
    {
        return $this->services['fos_rest.routing.loader.reader.action'] = new \FOS\RestBundle\Routing\Loader\Reader\RestActionReader(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.request.param_fetcher.reader']) ? $this->services['fos_rest.request.param_fetcher.reader'] : $this->get('fos_rest.request.param_fetcher.reader')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.inflector.doctrine']) ? $this->services['fos_rest.inflector.doctrine'] : $this->get('fos_rest.inflector.doctrine')) && false ?: '_'}, true, array('json' => false, 'csv' => false, 'html' => true));
    }

    /**
     * Gets the public 'fos_rest.routing.loader.reader.controller' shared service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader
     */
    protected function getFosRest_Routing_Loader_Reader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.reader.controller'] = new \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader(${($_ = isset($this->services['fos_rest.routing.loader.reader.action']) ? $this->services['fos_rest.routing.loader.reader.action'] : $this->get('fos_rest.routing.loader.reader.action')) && false ?: '_'}, ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.routing.loader.xml_collection' shared service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader
     */
    protected function getFosRest_Routing_Loader_XmlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.xml_collection'] = new \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.routing.loader.processor']) ? $this->services['fos_rest.routing.loader.processor'] : $this->get('fos_rest.routing.loader.processor')) && false ?: '_'}, true, array('json' => false, 'csv' => false, 'html' => true), 'json');
    }

    /**
     * Gets the public 'fos_rest.routing.loader.yaml_collection' shared service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader
     */
    protected function getFosRest_Routing_Loader_YamlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.yaml_collection'] = new \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.routing.loader.processor']) ? $this->services['fos_rest.routing.loader.processor'] : $this->get('fos_rest.routing.loader.processor')) && false ?: '_'}, true, array('json' => false, 'csv' => false, 'html' => true), 'json');
    }

    /**
     * Gets the public 'fos_rest.serializer.exception_wrapper_normalizer' shared service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer
     */
    protected function getFosRest_Serializer_ExceptionWrapperNormalizerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_normalizer'] = new \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer(${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.serializer.exception_wrapper_serialize_handler' shared service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler
     */
    protected function getFosRest_Serializer_ExceptionWrapperSerializeHandlerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_serialize_handler'] = new \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler();
    }

    /**
     * Gets the public 'fos_rest.view.exception_wrapper_handler' shared service.
     *
     * @return \FOS\RestBundle\View\ExceptionWrapperHandler
     */
    protected function getFosRest_View_ExceptionWrapperHandlerService()
    {
        return $this->services['fos_rest.view.exception_wrapper_handler'] = new \FOS\RestBundle\View\ExceptionWrapperHandler();
    }

    /**
     * Gets the public 'fos_rest.view_handler' shared service.
     *
     * @return \FOS\RestBundle\View\ViewHandler
     */
    protected function getFosRest_ViewHandlerService()
    {
        $this->services['fos_rest.view_handler'] = $instance = new \FOS\RestBundle\View\ViewHandler(array('json' => false, 'csv' => false, 'html' => true), 400, 204, false, array('html' => 302), 'twig');

        $instance->setExclusionStrategyGroups('');
        $instance->setExclusionStrategyVersion('');
        $instance->setSerializeNullStrategy(false);
        $instance->setContainer($this);
        $instance->registerHandler('csv', array(0 => ${($_ = isset($this->services['sulu_core.rest.view_handler.csv']) ? $this->services['sulu_core.rest.view_handler.csv'] : $this->get('sulu_core.rest.view_handler.csv')) && false ?: '_'}, 1 => 'createResponse'));

        return $instance;
    }

    /**
     * Gets the public 'fos_rest.violation_formatter' shared service.
     *
     * @return \FOS\RestBundle\Util\ViolationFormatter
     */
    protected function getFosRest_ViolationFormatterService()
    {
        return $this->services['fos_rest.violation_formatter'] = new \FOS\RestBundle\Util\ViolationFormatter();
    }

    /**
     * Gets the public 'fragment.handler' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler
     */
    protected function getFragment_HandlerService()
    {
        return $this->services['fragment.handler'] = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler(${($_ = isset($this->services['service_locator.e64d23c3bf770e2cf44b71643280668d']) ? $this->services['service_locator.e64d23c3bf770e2cf44b71643280668d'] : $this->getServiceLocator_E64d23c3bf770e2cf44b71643280668dService()) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'}, '/_fragment');
    }

    /**
     * Gets the public 'fragment.renderer.esi' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer
     */
    protected function getFragment_Renderer_EsiService()
    {
        $this->services['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(NULL, ${($_ = isset($this->services['fragment.renderer.inline']) ? $this->services['fragment.renderer.inline'] : $this->get('fragment.renderer.inline')) && false ?: '_'}, ${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'});

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'fragment.renderer.hinclude' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'}, NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'fragment.renderer.inline' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer(${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'fragment.renderer.ssi' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer
     */
    protected function getFragment_Renderer_SsiService()
    {
        $this->services['fragment.renderer.ssi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer(NULL, ${($_ = isset($this->services['fragment.renderer.inline']) ? $this->services['fragment.renderer.inline'] : $this->get('fragment.renderer.inline')) && false ?: '_'}, ${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'});

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'hateoas.configuration.provider.resolver' shared service.
     *
     * @return \Hateoas\Configuration\Provider\Resolver\ChainResolver
     */
    protected function getHateoas_Configuration_Provider_ResolverService()
    {
        return $this->services['hateoas.configuration.provider.resolver'] = new \Hateoas\Configuration\Provider\Resolver\ChainResolver(array(0 => new \Hateoas\Configuration\Provider\Resolver\MethodResolver(), 1 => new \Hateoas\Configuration\Provider\Resolver\StaticMethodResolver(), 2 => new \Hateoas\Configuration\Provider\Resolver\SymfonyContainerResolver($this)));
    }

    /**
     * Gets the public 'hateoas.event_subscriber.json' shared service.
     *
     * @return \Hateoas\Serializer\EventSubscriber\JsonEventSubscriber
     */
    protected function getHateoas_EventSubscriber_JsonService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'};

        return $this->services['hateoas.event_subscriber.json'] = new \Hateoas\Serializer\EventSubscriber\JsonEventSubscriber(new \Hateoas\Serializer\JsonHalSerializer(), ${($_ = isset($this->services['hateoas.links_factory']) ? $this->services['hateoas.links_factory'] : $this->getHateoas_LinksFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.embeds_factory']) ? $this->services['hateoas.embeds_factory'] : $this->getHateoas_EmbedsFactoryService()) && false ?: '_'}, new \Hateoas\Serializer\Metadata\InlineDeferrer($a), new \Hateoas\Serializer\Metadata\InlineDeferrer($a));
    }

    /**
     * Gets the public 'hateoas.event_subscriber.xml' shared service.
     *
     * @return \Hateoas\Serializer\EventSubscriber\XmlEventSubscriber
     */
    protected function getHateoas_EventSubscriber_XmlService()
    {
        $a = new \Hateoas\Serializer\XmlSerializer();
        $a->setMetadataFactory(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'});

        return $this->services['hateoas.event_subscriber.xml'] = new \Hateoas\Serializer\EventSubscriber\XmlEventSubscriber($a, ${($_ = isset($this->services['hateoas.links_factory']) ? $this->services['hateoas.links_factory'] : $this->getHateoas_LinksFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.embeds_factory']) ? $this->services['hateoas.embeds_factory'] : $this->getHateoas_EmbedsFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.expression.evaluator' shared service.
     *
     * @return \Bazinga\Bundle\HateoasBundle\Hateoas\Expression\LazyFunctionExpressionEvaluator
     */
    protected function getHateoas_Expression_EvaluatorService()
    {
        $this->services['hateoas.expression.evaluator'] = $instance = new \Bazinga\Bundle\HateoasBundle\Hateoas\Expression\LazyFunctionExpressionEvaluator(${($_ = isset($this->services['bazinga_hateoas.expression_language']) ? $this->services['bazinga_hateoas.expression_language'] : $this->get('bazinga_hateoas.expression_language')) && false ?: '_'}, array(), $this);

        $instance->setContextVariable('container', $this);
        $instance->registerFunctionId('hateoas.expression.link');

        return $instance;
    }

    /**
     * Gets the public 'hateoas.expression.link' shared service.
     *
     * @return \Hateoas\Expression\LinkExpressionFunction
     */
    protected function getHateoas_Expression_LinkService()
    {
        return $this->services['hateoas.expression.link'] = new \Hateoas\Expression\LinkExpressionFunction(${($_ = isset($this->services['hateoas.helper.link']) ? $this->services['hateoas.helper.link'] : $this->get('hateoas.helper.link')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.generator.registry' shared service.
     *
     * @return \Hateoas\UrlGenerator\UrlGeneratorRegistry
     */
    protected function getHateoas_Generator_RegistryService()
    {
        return $this->services['hateoas.generator.registry'] = new \Hateoas\UrlGenerator\UrlGeneratorRegistry(${($_ = isset($this->services['hateoas.generator.symfony']) ? $this->services['hateoas.generator.symfony'] : $this->get('hateoas.generator.symfony')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.generator.symfony' shared service.
     *
     * @return \Hateoas\UrlGenerator\SymfonyUrlGenerator
     */
    protected function getHateoas_Generator_SymfonyService()
    {
        return $this->services['hateoas.generator.symfony'] = new \Hateoas\UrlGenerator\SymfonyUrlGenerator(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.helper.link' shared service.
     *
     * @return \Hateoas\Helper\LinkHelper
     */
    protected function getHateoas_Helper_LinkService()
    {
        return $this->services['hateoas.helper.link'] = new \Hateoas\Helper\LinkHelper(${($_ = isset($this->services['hateoas.link_factory']) ? $this->services['hateoas.link_factory'] : $this->getHateoas_LinkFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.serializer.exclusion_manager' shared service.
     *
     * @return \Hateoas\Serializer\ExclusionManager
     */
    protected function getHateoas_Serializer_ExclusionManagerService()
    {
        return $this->services['hateoas.serializer.exclusion_manager'] = new \Hateoas\Serializer\ExclusionManager(${($_ = isset($this->services['hateoas.expression.evaluator']) ? $this->services['hateoas.expression.evaluator'] : $this->get('hateoas.expression.evaluator')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.twig.link' shared service.
     *
     * @return \Hateoas\Twig\Extension\LinkExtension
     */
    protected function getHateoas_Twig_LinkService()
    {
        return $this->services['hateoas.twig.link'] = new \Hateoas\Twig\Extension\LinkExtension(${($_ = isset($this->services['hateoas.helper.link']) ? $this->services['hateoas.helper.link'] : $this->get('hateoas.helper.link')) && false ?: '_'});
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['debug.controller_resolver']) ? $this->services['debug.controller_resolver'] : $this->get('debug.controller_resolver')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['debug.argument_resolver']) ? $this->services['debug.argument_resolver'] : $this->get('debug.argument_resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer' shared service.
     *
     * @return \JMS\Serializer\Serializer
     */
    protected function getJmsSerializerService()
    {
        $a = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher($this);
        $a->setListeners(array('serializer.post_serialize' => array(0 => array(0 => array(0 => 'sulu_core.list_builder.metadata.provider.general.event_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 1 => array(0 => array(0 => 'hateoas.event_subscriber.xml', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'xml'), 2 => array(0 => array(0 => 'hateoas.event_subscriber.json', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 3 => array(0 => array(0 => 'sulu_security.document.serializer.subscriber.security', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 4 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.structure_behavior', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 5 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.path_behavior', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 6 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.parent_behavior', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 7 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.locale', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 8 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.shadow_locale_behavior', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 9 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.redirect_type_behavior', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 10 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.workflow_stage_behavior', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 11 => array(0 => array(0 => 'sulu_document_manager.serializer.subscriber.children_behavior', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 12 => array(0 => array(0 => 'sulu_hash.event_subscriber.serializer', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL), 13 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL)), 'serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 1 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerializeTypedProxy'), 1 => NULL, 2 => NULL), 2 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 3 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.structure_behavior', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 4 => array(0 => array(0 => 'sulu_content.document.serializer.subscriber.extension_container', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 5 => array(0 => array(0 => 'sulu_document_manager.serializer.subscriber.proxy', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL)), 'serializer.post_deserialize' => array(0 => array(0 => array(0 => 'sulu_document_manager.serializer.subscriber.document', 1 => 'onPostDeserialize'), 1 => NULL, 2 => NULL))));

        $this->services['jms_serializer'] = $instance = new \JMS\Serializer\Serializer(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.handler_registry']) ? $this->services['jms_serializer.handler_registry'] : $this->get('jms_serializer.handler_registry')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}, new \PhpCollection\Map(array('array' => ${($_ = isset($this->services['sulu_core.array_serialization_visitor']) ? $this->services['sulu_core.array_serialization_visitor'] : $this->get('sulu_core.array_serialization_visitor')) && false ?: '_'}, 'json' => ${($_ = isset($this->services['jms_serializer.json_serialization_visitor']) ? $this->services['jms_serializer.json_serialization_visitor'] : $this->get('jms_serializer.json_serialization_visitor')) && false ?: '_'}, 'xml' => ${($_ = isset($this->services['jms_serializer.xml_serialization_visitor']) ? $this->services['jms_serializer.xml_serialization_visitor'] : $this->get('jms_serializer.xml_serialization_visitor')) && false ?: '_'}, 'yml' => ${($_ = isset($this->services['jms_serializer.yaml_serialization_visitor']) ? $this->services['jms_serializer.yaml_serialization_visitor'] : $this->get('jms_serializer.yaml_serialization_visitor')) && false ?: '_'})), new \PhpCollection\Map(array('json' => ${($_ = isset($this->services['jms_serializer.json_deserialization_visitor']) ? $this->services['jms_serializer.json_deserialization_visitor'] : $this->get('jms_serializer.json_deserialization_visitor')) && false ?: '_'}, 'xml' => ${($_ = isset($this->services['jms_serializer.xml_deserialization_visitor']) ? $this->services['jms_serializer.xml_deserialization_visitor'] : $this->get('jms_serializer.xml_deserialization_visitor')) && false ?: '_'})), $a, NULL, ${($_ = isset($this->services['jms_serializer.expression_evaluator']) ? $this->services['jms_serializer.expression_evaluator'] : $this->get('jms_serializer.expression_evaluator')) && false ?: '_'});

        $instance->setSerializationContextFactory(${($_ = isset($this->services['jms_serializer.serialization_context_factory']) ? $this->services['jms_serializer.serialization_context_factory'] : $this->get('jms_serializer.serialization_context_factory')) && false ?: '_'});
        $instance->setDeserializationContextFactory(${($_ = isset($this->services['jms_serializer.deserialization_context_factory']) ? $this->services['jms_serializer.deserialization_context_factory'] : $this->get('jms_serializer.deserialization_context_factory')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.accessor_strategy' shared service.
     *
     * @return \JMS\Serializer\Accessor\ExpressionAccessorStrategy
     */
    protected function getJmsSerializer_AccessorStrategyService()
    {
        return $this->services['jms_serializer.accessor_strategy'] = new \JMS\Serializer\Accessor\ExpressionAccessorStrategy(${($_ = isset($this->services['jms_serializer.expression_evaluator']) ? $this->services['jms_serializer.expression_evaluator'] : $this->get('jms_serializer.expression_evaluator')) && false ?: '_'}, new \JMS\Serializer\Accessor\DefaultAccessorStrategy());
    }

    /**
     * Gets the public 'jms_serializer.array_collection_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\ArrayCollectionHandler
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler(true);
    }

    /**
     * Gets the public 'jms_serializer.constraint_violation_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\ConstraintViolationHandler
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /**
     * Gets the public 'jms_serializer.datetime_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\DateHandler
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sO', 'UTC', true);
    }

    /**
     * Gets the public 'jms_serializer.deserialization_context_factory' shared service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory
     */
    protected function getJmsSerializer_DeserializationContextFactoryService()
    {
        return $this->services['jms_serializer.deserialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the public 'jms_serializer.doctrine_proxy_subscriber' shared service.
     *
     * @return \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber(false, true);
    }

    /**
     * Gets the public 'jms_serializer.expression_evaluator' shared service.
     *
     * @return \JMS\Serializer\Expression\ExpressionEvaluator
     */
    protected function getJmsSerializer_ExpressionEvaluatorService()
    {
        $a = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage();
        $a->registerProvider(new \JMS\SerializerBundle\ExpressionLanguage\BasicSerializerFunctionsProvider());

        return $this->services['jms_serializer.expression_evaluator'] = new \JMS\Serializer\Expression\ExpressionEvaluator($a, array('container' => $this));
    }

    /**
     * Gets the public 'jms_serializer.form_error_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\FormErrorHandler
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \JMS\Serializer\Handler\FormErrorHandler(${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.handler_registry' shared service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \JMS\Serializer\Handler\LazyHandlerRegistry($this, array(2 => array('DateTime' => array('array' => array(0 => 'sulu_core.rest.datetime_handler', 1 => 'deserialize'), 'json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromyml')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap')), 'Sulu\\Component\\Content\\Document\\Structure\\Structure' => array('json' => array(0 => 'sulu_content.document.serializer.handler.structure', 1 => 'doDeserialize')), 'Sulu\\Component\\Content\\Document\\Extension\\ExtensionContainer' => array('json' => array(0 => 'sulu_content.document.serializer.handler.extension_container', 1 => 'doDeserialize')), 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge' => array('json' => array(0 => 'sulu_content.compat.serializer.handler.page_bridge', 1 => 'doDeserialize'))), 1 => array('DateTime' => array('array' => array(0 => 'sulu_core.rest.datetime_handler', 1 => 'serialize'), 'json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'FOS\\RestBundle\\Util\\ExceptionWrapper' => array('json' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToJson'), 'xml' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToXml')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml')), 'Sulu\\Component\\Content\\Document\\Structure\\Structure' => array('json' => array(0 => 'sulu_content.document.serializer.handler.structure', 1 => 'doSerialize')), 'Sulu\\Component\\Content\\Document\\Extension\\ExtensionContainer' => array('json' => array(0 => 'sulu_content.document.serializer.handler.extension_container', 1 => 'doSerialize')), 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge' => array('json' => array(0 => 'sulu_content.compat.serializer.handler.page_bridge', 1 => 'doSerialize')), 'Sulu\\Component\\DocumentManager\\Collection\\ChildrenCollection' => array('json' => array(0 => 'sulu_document_manager.serializer.handler.children_collection', 1 => 'doSerialize')))));
    }

    /**
     * Gets the public 'jms_serializer.json_deserialization_visitor' shared service.
     *
     * @return \JMS\Serializer\JsonDeserializationVisitor
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.json_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\JsonSerializationVisitor
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});

        $instance->setOptions(0);

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.metadata_driver' shared service.
     *
     * @return \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata.file_locator']) ? $this->services['jms_serializer.metadata.file_locator'] : $this->getJmsSerializer_Metadata_FileLocatorService()) && false ?: '_'};

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}))), ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.naming_strategy' shared service.
     *
     * @return \JMS\Serializer\Naming\CacheNamingStrategy
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\IdenticalPropertyNamingStrategy()));
    }

    /**
     * Gets the public 'jms_serializer.object_constructor' shared service.
     *
     * @return \JMS\Serializer\Construction\DoctrineObjectConstructor
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}, 'null');
    }

    /**
     * Gets the public 'jms_serializer.php_collection_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\PhpCollectionHandler
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /**
     * Gets the public 'jms_serializer.serialization_context_factory' shared service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory
     */
    protected function getJmsSerializer_SerializationContextFactoryService()
    {
        return $this->services['jms_serializer.serialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the public 'jms_serializer.stopwatch_subscriber' shared service.
     *
     * @return \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber
     */
    protected function getJmsSerializer_StopwatchSubscriberService()
    {
        return $this->services['jms_serializer.stopwatch_subscriber'] = new \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.templating.helper.serializer' shared service.
     *
     * @return \JMS\SerializerBundle\Templating\SerializerHelper
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.twig_extension.serializer_runtime_helper' shared service.
     *
     * @return \JMS\Serializer\Twig\SerializerRuntimeHelper
     */
    protected function getJmsSerializer_TwigExtension_SerializerRuntimeHelperService()
    {
        return $this->services['jms_serializer.twig_extension.serializer_runtime_helper'] = new \JMS\Serializer\Twig\SerializerRuntimeHelper(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.xml_deserialization_visitor' shared service.
     *
     * @return \JMS\Serializer\XmlDeserializationVisitor
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'});

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.xml_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\XmlSerializationVisitor
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        $this->services['jms_serializer.xml_serialization_visitor'] = $instance = new \JMS\Serializer\XmlSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});

        $instance->setFormatOutput(true);

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.yaml_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\YamlSerializationVisitor
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'kernel.class_cache.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer
     *
     * @deprecated The "kernel.class_cache.cache_warmer" option is deprecated since version 3.3, to be removed in 4.0.
     */
    protected function getKernel_ClassCache_CacheWarmerService()
    {
        @trigger_error('The "kernel.class_cache.cache_warmer" option is deprecated since version 3.3, to be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['kernel.class_cache.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer(array(0 => 'Symfony\\Component\\HttpFoundation\\ParameterBag', 1 => 'Symfony\\Component\\HttpFoundation\\HeaderBag', 2 => 'Symfony\\Component\\HttpFoundation\\FileBag', 3 => 'Symfony\\Component\\HttpFoundation\\ServerBag', 4 => 'Symfony\\Component\\HttpFoundation\\Request', 5 => 'Symfony\\Component\\HttpKernel\\Kernel'));
    }

    /**
     * Gets the public 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected function getLocaleListenerService()
    {
        return $this->services['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'en', ${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'massive_build.build.registry' shared service.
     *
     * @return \Massive\Bundle\BuildBundle\Build\BuildRegistry
     */
    protected function getMassiveBuild_Build_RegistryService()
    {
        $this->services['massive_build.build.registry'] = $instance = new \Massive\Bundle\BuildBundle\Build\BuildRegistry();

        $instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.database']) ? $this->services['sulu_core.build.builder.database'] : $this->get('sulu_core.build.builder.database')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.phpcr']) ? $this->services['sulu_core.build.builder.phpcr'] : $this->get('sulu_core.build.builder.phpcr')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.fixtures']) ? $this->services['sulu_core.build.builder.fixtures'] : $this->get('sulu_core.build.builder.fixtures')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.cache']) ? $this->services['sulu_core.build.builder.cache'] : $this->get('sulu_core.build.builder.cache')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.phpcr_migrations']) ? $this->services['sulu_core.build.builder.phpcr_migrations'] : $this->get('sulu_core.build.builder.phpcr_migrations')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_search.build.index']) ? $this->services['sulu_search.build.index'] : $this->get('sulu_search.build.index')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_media.system_collections.builder']) ? $this->services['sulu_media.system_collections.builder'] : $this->get('sulu_media.system_collections.builder')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_security.build.user']) ? $this->services['sulu_security.build.user'] : $this->get('sulu_security.build.user')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.node_order']) ? $this->services['sulu_core.build.builder.node_order'] : $this->get('sulu_core.build.builder.node_order')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['massive_build.builder.virtual.prod']) ? $this->services['massive_build.builder.virtual.prod'] : $this->get('massive_build.builder.virtual.prod')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['massive_build.builder.virtual.dev']) ? $this->services['massive_build.builder.virtual.dev'] : $this->get('massive_build.builder.virtual.dev')) && false ?: '_'});
        $instance->addBuilder(${($_ = isset($this->services['massive_build.builder.virtual.maintain']) ? $this->services['massive_build.builder.virtual.maintain'] : $this->get('massive_build.builder.virtual.maintain')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'massive_build.builder.virtual.dev' shared service.
     *
     * @return \Massive\Bundle\BuildBundle\Builder\VirtualBuilder
     */
    protected function getMassiveBuild_Builder_Virtual_DevService()
    {
        return $this->services['massive_build.builder.virtual.dev'] = new \Massive\Bundle\BuildBundle\Builder\VirtualBuilder('dev', array(0 => 'database', 1 => 'fixtures', 2 => 'phpcr', 3 => 'user', 4 => 'phpcr_migrations', 5 => 'system_collections'));
    }

    /**
     * Gets the public 'massive_build.builder.virtual.maintain' shared service.
     *
     * @return \Massive\Bundle\BuildBundle\Builder\VirtualBuilder
     */
    protected function getMassiveBuild_Builder_Virtual_MaintainService()
    {
        return $this->services['massive_build.builder.virtual.maintain'] = new \Massive\Bundle\BuildBundle\Builder\VirtualBuilder('maintain', array(0 => 'node_order', 1 => 'search_index', 2 => 'phpcr_migrations'));
    }

    /**
     * Gets the public 'massive_build.builder.virtual.prod' shared service.
     *
     * @return \Massive\Bundle\BuildBundle\Builder\VirtualBuilder
     */
    protected function getMassiveBuild_Builder_Virtual_ProdService()
    {
        return $this->services['massive_build.builder.virtual.prod'] = new \Massive\Bundle\BuildBundle\Builder\VirtualBuilder('prod', array(0 => 'database', 1 => 'phpcr', 2 => 'fixtures', 3 => 'phpcr_migrations', 4 => 'system_collections'));
    }

    /**
     * Gets the public 'massive_build.command.build' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\CommandOptional\SuluBuildCommand
     */
    protected function getMassiveBuild_Command_BuildService()
    {
        return $this->services['massive_build.command.build'] = new \Sulu\Bundle\CoreBundle\CommandOptional\SuluBuildCommand(${($_ = isset($this->services['massive_build.build.registry']) ? $this->services['massive_build.build.registry'] : $this->get('massive_build.build.registry')) && false ?: '_'}, $this);
    }

    /**
     * Gets the public 'massive_search.adapter.test' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Adapter\TestAdapter
     */
    protected function getMassiveSearch_Adapter_TestService()
    {
        return $this->services['massive_search.adapter.test'] = new \Massive\Bundle\SearchBundle\Search\Adapter\TestAdapter(${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.adapter.zend_lucene' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Adapter\ZendLuceneAdapter
     */
    protected function getMassiveSearch_Adapter_ZendLuceneService()
    {
        return $this->services['massive_search.adapter.zend_lucene'] = new \Massive\Bundle\SearchBundle\Search\Adapter\ZendLuceneAdapter(${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'}, ($this->targetDirs[3].'/indexes'), ${($_ = isset($this->services['filesystem']) ? $this->services['filesystem'] : $this->get('filesystem')) && false ?: '_'}, false, 'UTF-8');
    }

    /**
     * Gets the public 'massive_search.command.index_rebuild_deprecated' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Command\IndexRebuildCommand
     */
    protected function getMassiveSearch_Command_IndexRebuildDeprecatedService()
    {
        return $this->services['massive_search.command.index_rebuild_deprecated'] = new \Massive\Bundle\SearchBundle\Command\IndexRebuildCommand(${($_ = isset($this->services['massive_search.reindex.resume_manager']) ? $this->services['massive_search.reindex.resume_manager'] : $this->get('massive_search.reindex.resume_manager')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.reindex.provider_registry']) ? $this->services['massive_search.reindex.provider_registry'] : $this->get('massive_search.reindex.provider_registry')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'massive_search.command.init' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Command\InitCommand
     */
    protected function getMassiveSearch_Command_InitService()
    {
        return $this->services['massive_search.command.init'] = new \Massive\Bundle\SearchBundle\Command\InitCommand(${($_ = isset($this->services['massive_search.adapter.zend_lucene']) ? $this->services['massive_search.adapter.zend_lucene'] : $this->get('massive_search.adapter.zend_lucene')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.command.purge' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Command\PurgeCommand
     */
    protected function getMassiveSearch_Command_PurgeService()
    {
        return $this->services['massive_search.command.purge'] = new \Massive\Bundle\SearchBundle\Command\PurgeCommand(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.command.query' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Command\QueryCommand
     */
    protected function getMassiveSearch_Command_QueryService()
    {
        return $this->services['massive_search.command.query'] = new \Massive\Bundle\SearchBundle\Command\QueryCommand(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.command.reindex' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Command\ReindexCommand
     */
    protected function getMassiveSearch_Command_ReindexService()
    {
        return $this->services['massive_search.command.reindex'] = new \Massive\Bundle\SearchBundle\Command\ReindexCommand(${($_ = isset($this->services['massive_search.reindex.resume_manager']) ? $this->services['massive_search.reindex.resume_manager'] : $this->get('massive_search.reindex.resume_manager')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.reindex.provider_registry']) ? $this->services['massive_search.reindex.provider_registry'] : $this->get('massive_search.reindex.provider_registry')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'massive_search.command.status' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Command\StatusCommand
     */
    protected function getMassiveSearch_Command_StatusService()
    {
        return $this->services['massive_search.command.status'] = new \Massive\Bundle\SearchBundle\Command\StatusCommand(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.converter' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Converter\ConverterManager
     */
    protected function getMassiveSearch_ConverterService()
    {
        $this->services['massive_search.converter'] = $instance = new \Massive\Bundle\SearchBundle\Search\Converter\ConverterManager();

        $instance->addConverter('date', ${($_ = isset($this->services['massive_search.converter.date_converter']) ? $this->services['massive_search.converter.date_converter'] : $this->get('massive_search.converter.date_converter')) && false ?: '_'});
        $instance->addConverter('json', ${($_ = isset($this->services['massive_search.converter.json_converter']) ? $this->services['massive_search.converter.json_converter'] : $this->get('massive_search.converter.json_converter')) && false ?: '_'});
        $instance->addConverter('tags', ${($_ = isset($this->services['sulu_tag.search.tags_converter']) ? $this->services['sulu_tag.search.tags_converter'] : $this->get('sulu_tag.search.tags_converter')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'massive_search.converter.date_converter' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Converter\Types\DateConverter
     */
    protected function getMassiveSearch_Converter_DateConverterService()
    {
        return $this->services['massive_search.converter.date_converter'] = new \Massive\Bundle\SearchBundle\Search\Converter\Types\DateConverter();
    }

    /**
     * Gets the public 'massive_search.converter.json_converter' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Converter\Types\JsonConverter
     */
    protected function getMassiveSearch_Converter_JsonConverterService()
    {
        return $this->services['massive_search.converter.json_converter'] = new \Massive\Bundle\SearchBundle\Search\Converter\Types\JsonConverter();
    }

    /**
     * Gets the public 'massive_search.events.deindex_listener' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\EventListener\DeindexListener
     */
    protected function getMassiveSearch_Events_DeindexListenerService()
    {
        return $this->services['massive_search.events.deindex_listener'] = new \Massive\Bundle\SearchBundle\Search\EventListener\DeindexListener(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.events.index_listener' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\EventListener\IndexListener
     */
    protected function getMassiveSearch_Events_IndexListenerService()
    {
        return $this->services['massive_search.events.index_listener'] = new \Massive\Bundle\SearchBundle\Search\EventListener\IndexListener(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.events.zend_rebuild' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\EventListener\ZendRebuildSubscriber
     */
    protected function getMassiveSearch_Events_ZendRebuildService()
    {
        return $this->services['massive_search.events.zend_rebuild'] = new \Massive\Bundle\SearchBundle\Search\EventListener\ZendRebuildSubscriber(${($_ = isset($this->services['massive_search.adapter.zend_lucene']) ? $this->services['massive_search.adapter.zend_lucene'] : $this->get('massive_search.adapter.zend_lucene')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.prefix_decorator']) ? $this->services['massive_search.prefix_decorator'] : $this->get('massive_search.prefix_decorator')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.expression_language' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\ExpressionLanguage\MassiveSearchExpressionLanguage
     */
    protected function getMassiveSearch_ExpressionLanguageService()
    {
        return $this->services['massive_search.expression_language'] = new \Massive\Bundle\SearchBundle\Search\ExpressionLanguage\MassiveSearchExpressionLanguage();
    }

    /**
     * Gets the public 'massive_search.factory_default' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Factory
     */
    protected function getMassiveSearch_FactoryDefaultService()
    {
        return $this->services['massive_search.factory_default'] = new \Massive\Bundle\SearchBundle\Search\Factory();
    }

    /**
     * Gets the public 'massive_search.index_name_decorator' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Decorator\IndexNameDecorator
     */
    protected function getMassiveSearch_IndexNameDecoratorService()
    {
        return $this->services['massive_search.index_name_decorator'] = new \Massive\Bundle\SearchBundle\Search\Decorator\IndexNameDecorator(${($_ = isset($this->services['massive_search.metadata.field_evaluator']) ? $this->services['massive_search.metadata.field_evaluator'] : $this->get('massive_search.metadata.field_evaluator')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.localization_decorator' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Decorator\LocalizationDecorator
     */
    protected function getMassiveSearch_LocalizationDecoratorService()
    {
        return $this->services['massive_search.localization_decorator'] = new \Massive\Bundle\SearchBundle\Search\Decorator\LocalizationDecorator(${($_ = isset($this->services['massive_search.index_name_decorator']) ? $this->services['massive_search.index_name_decorator'] : $this->get('massive_search.index_name_decorator')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.metadata.cache.file_cache' shared service.
     *
     * @return \Metadata\Cache\FileCache
     */
    protected function getMassiveSearch_Metadata_Cache_FileCacheService()
    {
        return $this->services['massive_search.metadata.cache.file_cache'] = new \Metadata\Cache\FileCache((__DIR__.'/massive-search'));
    }

    /**
     * Gets the public 'massive_search.metadata.driver.chain' shared service.
     *
     * @return \Metadata\Driver\DriverChain
     */
    protected function getMassiveSearch_Metadata_Driver_ChainService()
    {
        return $this->services['massive_search.metadata.driver.chain'] = new \Metadata\Driver\DriverChain(array(0 => ${($_ = isset($this->services['massive_search.metadata.driver.xml']) ? $this->services['massive_search.metadata.driver.xml'] : $this->get('massive_search.metadata.driver.xml')) && false ?: '_'}));
    }

    /**
     * Gets the public 'massive_search.metadata.driver.xml' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Metadata\Driver\XmlDriver
     */
    protected function getMassiveSearch_Metadata_Driver_XmlService()
    {
        return $this->services['massive_search.metadata.driver.xml'] = new \Massive\Bundle\SearchBundle\Search\Metadata\Driver\XmlDriver(${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.metadata.file_locator']) ? $this->services['massive_search.metadata.file_locator'] : $this->get('massive_search.metadata.file_locator')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.metadata.factory' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getMassiveSearch_Metadata_FactoryService()
    {
        $this->services['massive_search.metadata.factory'] = $instance = new \Metadata\MetadataFactory(${($_ = isset($this->services['massive_search.metadata.driver.chain']) ? $this->services['massive_search.metadata.driver.chain'] : $this->get('massive_search.metadata.driver.chain')) && false ?: '_'}, 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(${($_ = isset($this->services['massive_search.metadata.cache.file_cache']) ? $this->services['massive_search.metadata.cache.file_cache'] : $this->get('massive_search.metadata.cache.file_cache')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'massive_search.metadata.field_evaluator' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Metadata\FieldEvaluator
     */
    protected function getMassiveSearch_Metadata_FieldEvaluatorService()
    {
        return $this->services['massive_search.metadata.field_evaluator'] = new \Massive\Bundle\SearchBundle\Search\Metadata\FieldEvaluator(${($_ = isset($this->services['massive_search.expression_language']) ? $this->services['massive_search.expression_language'] : $this->get('massive_search.expression_language')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.metadata.file_locator' shared service.
     *
     * @return \Metadata\Driver\FileLocator
     */
    protected function getMassiveSearch_Metadata_FileLocatorService()
    {
        return $this->services['massive_search.metadata.file_locator'] = new \Metadata\Driver\FileLocator(array('Sulu\\Bundle\\ContactBundle\\Entity' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/config/massive-search'), 'Sulu\\Bundle\\MediaBundle\\Entity' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/config/massive-search'), 'Sulu\\Bundle\\CategoryBundle\\Entity' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/config/massive-search')));
    }

    /**
     * Gets the public 'massive_search.metadata.provider.chain' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Metadata\Provider\ChainProvider
     */
    protected function getMassiveSearch_Metadata_Provider_ChainService()
    {
        return $this->services['massive_search.metadata.provider.chain'] = new \Massive\Bundle\SearchBundle\Search\Metadata\Provider\ChainProvider(array(0 => ${($_ = isset($this->services['massive_search.metadata.provider.default']) ? $this->services['massive_search.metadata.provider.default'] : $this->get('massive_search.metadata.provider.default')) && false ?: '_'}, 1 => ${($_ = isset($this->services['sulu_content.search.metadata.provider.structure']) ? $this->services['sulu_content.search.metadata.provider.structure'] : $this->get('sulu_content.search.metadata.provider.structure')) && false ?: '_'}));
    }

    /**
     * Gets the public 'massive_search.metadata.provider.default' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Metadata\Provider\DefaultProvider
     */
    protected function getMassiveSearch_Metadata_Provider_DefaultService()
    {
        return $this->services['massive_search.metadata.provider.default'] = new \Massive\Bundle\SearchBundle\Search\Metadata\Provider\DefaultProvider(${($_ = isset($this->services['massive_search.metadata.factory']) ? $this->services['massive_search.metadata.factory'] : $this->get('massive_search.metadata.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.object_to_document_converter' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\ObjectToDocumentConverter
     */
    protected function getMassiveSearch_ObjectToDocumentConverterService()
    {
        return $this->services['massive_search.object_to_document_converter'] = new \Massive\Bundle\SearchBundle\Search\ObjectToDocumentConverter(${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.metadata.field_evaluator']) ? $this->services['massive_search.metadata.field_evaluator'] : $this->get('massive_search.metadata.field_evaluator')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.converter']) ? $this->services['massive_search.converter'] : $this->get('massive_search.converter')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.prefix_decorator' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Decorator\PrefixDecorator
     */
    protected function getMassiveSearch_PrefixDecoratorService()
    {
        return $this->services['massive_search.prefix_decorator'] = new \Massive\Bundle\SearchBundle\Search\Decorator\PrefixDecorator(${($_ = isset($this->services['massive_search.localization_decorator']) ? $this->services['massive_search.localization_decorator'] : $this->get('massive_search.localization_decorator')) && false ?: '_'}, 'massive');
    }

    /**
     * Gets the public 'massive_search.reindex.provider.doctrine_orm' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Reindex\Provider\DoctrineOrmProvider
     */
    protected function getMassiveSearch_Reindex_Provider_DoctrineOrmService()
    {
        return $this->services['massive_search.reindex.provider.doctrine_orm'] = new \Massive\Bundle\SearchBundle\Search\Reindex\Provider\DoctrineOrmProvider(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.metadata.factory']) ? $this->services['massive_search.metadata.factory'] : $this->get('massive_search.metadata.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.reindex.provider_registry' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Reindex\ReindexProviderRegistry
     */
    protected function getMassiveSearch_Reindex_ProviderRegistryService()
    {
        $this->services['massive_search.reindex.provider_registry'] = $instance = new \Massive\Bundle\SearchBundle\Search\Reindex\ReindexProviderRegistry();

        $instance->addProvider('doctrine_orm', ${($_ = isset($this->services['massive_search.reindex.provider.doctrine_orm']) ? $this->services['massive_search.reindex.provider.doctrine_orm'] : $this->get('massive_search.reindex.provider.doctrine_orm')) && false ?: '_'});
        $instance->addProvider('sulu_structure', ${($_ = isset($this->services['sulu_content.search.reindex.structure_provider']) ? $this->services['sulu_content.search.reindex.structure_provider'] : $this->get('sulu_content.search.reindex.structure_provider')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'massive_search.reindex.resume_manager' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\Reindex\ResumeManager
     */
    protected function getMassiveSearch_Reindex_ResumeManagerService()
    {
        return $this->services['massive_search.reindex.resume_manager'] = new \Massive\Bundle\SearchBundle\Search\Reindex\ResumeManager();
    }

    /**
     * Gets the public 'massive_search.search.event_subscriber.doctrine_orm' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\EventSubscriber\DoctrineOrmSubscriber
     */
    protected function getMassiveSearch_Search_EventSubscriber_DoctrineOrmService()
    {
        return $this->services['massive_search.search.event_subscriber.doctrine_orm'] = new \Massive\Bundle\SearchBundle\Search\EventSubscriber\DoctrineOrmSubscriber(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.search.event_subscriber.purge_subscriber' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\EventSubscriber\PurgeSubscriber
     */
    protected function getMassiveSearch_Search_EventSubscriber_PurgeSubscriberService()
    {
        return $this->services['massive_search.search.event_subscriber.purge_subscriber'] = new \Massive\Bundle\SearchBundle\Search\EventSubscriber\PurgeSubscriber(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'massive_search.search_manager' shared service.
     *
     * @return \Massive\Bundle\SearchBundle\Search\SearchManager
     */
    protected function getMassiveSearch_SearchManagerService()
    {
        return $this->services['massive_search.search_manager'] = new \Massive\Bundle\SearchBundle\Search\SearchManager(${($_ = isset($this->services['massive_search.adapter.zend_lucene']) ? $this->services['massive_search.adapter.zend_lucene'] : $this->get('massive_search.adapter.zend_lucene')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.metadata.provider.chain']) ? $this->services['massive_search.metadata.provider.chain'] : $this->get('massive_search.metadata.provider.chain')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.object_to_document_converter']) ? $this->services['massive_search.object_to_document_converter'] : $this->get('massive_search.object_to_document_converter')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.prefix_decorator']) ? $this->services['massive_search.prefix_decorator'] : $this->get('massive_search.prefix_decorator')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.metadata.field_evaluator']) ? $this->services['massive_search.metadata.field_evaluator'] : $this->get('massive_search.metadata.field_evaluator')) && false ?: '_'});
    }

    /**
     * Gets the public 'monolog.activation_strategy.not_found' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\FingersCrossed\NotFoundActivationStrategy
     */
    protected function getMonolog_ActivationStrategy_NotFoundService()
    {
        return $this->services['monolog.activation_strategy.not_found'] = new \Symfony\Bridge\Monolog\Handler\FingersCrossed\NotFoundActivationStrategy();
    }

    /**
     * Gets the public 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        $this->services['monolog.handler.console'] = $instance = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array(64 => 200, 128 => 100, 16 => 400, 32 => 300, 256 => 100));

        $instance->pushProcessor(${($_ = isset($this->services['monolog.processor.psr_log_message']) ? $this->services['monolog.processor.psr_log_message'] : $this->getMonolog_Processor_PsrLogMessageService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.handler.console_very_verbose' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected function getMonolog_Handler_ConsoleVeryVerboseService()
    {
        $this->services['monolog.handler.console_very_verbose'] = $instance = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array(64 => 250, 128 => 250, 256 => 100, 16 => 400, 32 => 300));

        $instance->pushProcessor(${($_ = isset($this->services['monolog.processor.psr_log_message']) ? $this->services['monolog.processor.psr_log_message'] : $this->getMonolog_Processor_PsrLogMessageService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.handler.fingers_crossed.error_level_activation_strategy' shared service.
     *
     * @return \Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy
     */
    protected function getMonolog_Handler_FingersCrossed_ErrorLevelActivationStrategyService()
    {
        return $this->services['monolog.handler.fingers_crossed.error_level_activation_strategy'] = new \Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy();
    }

    /**
     * Gets the public 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\StreamHandler
     */
    protected function getMonolog_Handler_MainService()
    {
        $this->services['monolog.handler.main'] = $instance = new \Monolog\Handler\StreamHandler(($this->targetDirs[3].'/logs/website/dev.log'), 100, true, NULL);

        $instance->pushProcessor(${($_ = isset($this->services['monolog.processor.psr_log_message']) ? $this->services['monolog.processor.psr_log_message'] : $this->getMonolog_Processor_PsrLogMessageService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.handler.null_internal' shared service.
     *
     * @return \Monolog\Handler\NullHandler
     */
    protected function getMonolog_Handler_NullInternalService()
    {
        return $this->services['monolog.handler.null_internal'] = new \Monolog\Handler\NullHandler();
    }

    /**
     * Gets the public 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->services['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_ConsoleService()
    {
        $this->services['monolog.logger.console'] = $instance = new \Symfony\Bridge\Monolog\Logger('console');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.doctrine' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console_very_verbose']) ? $this->services['monolog.handler.console_very_verbose'] : $this->get('monolog.handler.console_very_verbose')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.doctrine_phpcr' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_DoctrinePhpcrService()
    {
        $this->services['monolog.logger.doctrine_phpcr'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine_phpcr');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.event' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.php' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.profiler' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.sulu_document_manager' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_SuluDocumentManagerService()
    {
        $this->services['monolog.logger.sulu_document_manager'] = $instance = new \Symfony\Bridge\Monolog\Logger('sulu_document_manager');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.templating' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.translation' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this->services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'phpcr_migrations.command.initialize' shared service.
     *
     * @return \DTL\Bundle\PhpcrMigrations\Command\InitializeCommand
     */
    protected function getPhpcrMigrations_Command_InitializeService()
    {
        return $this->services['phpcr_migrations.command.initialize'] = new \DTL\Bundle\PhpcrMigrations\Command\InitializeCommand(${($_ = isset($this->services['phpcr_migrations.migrator_factory']) ? $this->services['phpcr_migrations.migrator_factory'] : $this->get('phpcr_migrations.migrator_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'phpcr_migrations.command.migrate' shared service.
     *
     * @return \DTL\Bundle\PhpcrMigrations\Command\MigrateCommand
     */
    protected function getPhpcrMigrations_Command_MigrateService()
    {
        return $this->services['phpcr_migrations.command.migrate'] = new \DTL\Bundle\PhpcrMigrations\Command\MigrateCommand(${($_ = isset($this->services['phpcr_migrations.migrator_factory']) ? $this->services['phpcr_migrations.migrator_factory'] : $this->get('phpcr_migrations.migrator_factory')) && false ?: '_'}, $this);
    }

    /**
     * Gets the public 'phpcr_migrations.command.status' shared service.
     *
     * @return \DTL\Bundle\PhpcrMigrations\Command\StatusCommand
     */
    protected function getPhpcrMigrations_Command_StatusService()
    {
        return $this->services['phpcr_migrations.command.status'] = new \DTL\Bundle\PhpcrMigrations\Command\StatusCommand(${($_ = isset($this->services['phpcr_migrations.version_storage']) ? $this->services['phpcr_migrations.version_storage'] : $this->getPhpcrMigrations_VersionStorageService()) && false ?: '_'}, ${($_ = isset($this->services['phpcr_migrations.version_finder']) ? $this->services['phpcr_migrations.version_finder'] : $this->getPhpcrMigrations_VersionFinderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'phpcr_migrations.migrator_factory' shared service.
     *
     * @return \PHPCR\Migrations\MigratorFactory
     */
    protected function getPhpcrMigrations_MigratorFactoryService()
    {
        return $this->services['phpcr_migrations.migrator_factory'] = new \PHPCR\Migrations\MigratorFactory(${($_ = isset($this->services['phpcr_migrations.version_storage']) ? $this->services['phpcr_migrations.version_storage'] : $this->getPhpcrMigrations_VersionStorageService()) && false ?: '_'}, ${($_ = isset($this->services['phpcr_migrations.version_finder']) ? $this->services['phpcr_migrations.version_finder'] : $this->getPhpcrMigrations_VersionFinderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'});
    }

    /**
     * Gets the public 'profiler' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler
     */
    protected function getProfilerService()
    {
        $a = ${($_ = isset($this->services['monolog.logger.profiler']) ? $this->services['monolog.logger.profiler'] : $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $b = ${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};

        $c = new \Symfony\Component\Cache\DataCollector\CacheDataCollector();
        $c->addInstance('cache.app', ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'});
        $c->addInstance('cache.system', ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'});
        $c->addInstance('cache.validator', ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'});
        $c->addInstance('cache.serializer', new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.serializer.recorder_inner']) ? $this->services['cache.serializer.recorder_inner'] : $this->getCache_Serializer_RecorderInnerService()) && false ?: '_'}));
        $c->addInstance('cache.annotations', ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'});

        $d = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
        $d->addLogger('default', ${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});

        $e = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $e->setKernel($b);
        }

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler')), $a);

        $instance->add(${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'});
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector());
        $instance->add(${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a, (__DIR__.'/websiteDevDebugProjectContainer')));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->add(${($_ = isset($this->services['data_collector.router']) ? $this->services['data_collector.router'] : $this->get('data_collector.router')) && false ?: '_'});
        $instance->add($c);
        $instance->add(${($_ = isset($this->services['data_collector.translation']) ? $this->services['data_collector.translation'] : $this->get('data_collector.translation')) && false ?: '_'});
        $instance->add(new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector(${($_ = isset($this->services['twig.profile']) ? $this->services['twig.profile'] : $this->get('twig.profile')) && false ?: '_'}));
        $instance->add($d);
        $instance->add(new \Doctrine\Bundle\PHPCRBundle\DataCollector\PHPCRDataCollector(${($_ = isset($this->services['doctrine_phpcr']) ? $this->services['doctrine_phpcr'] : $this->get('doctrine_phpcr')) && false ?: '_'}));
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add(${($_ = isset($this->services['data_collector.dump']) ? $this->services['data_collector.dump'] : $this->get('data_collector.dump')) && false ?: '_'});
        $instance->add(${($_ = isset($this->services['sulu_website.data_collector.sulu_collector']) ? $this->services['sulu_website.data_collector.sulu_collector'] : $this->get('sulu_website.data_collector.sulu_collector')) && false ?: '_'});
        $instance->add($e);

        return $instance;
    }

    /**
     * Gets the public 'profiler_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, NULL, false, false);
    }

    /**
     * Gets the public 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false, new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false));
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the public 'routing.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader
     */
    protected function getRouting_LoaderService()
    {
        $a = ${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'};
        $b = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Component\Config\Loader\GlobFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader($c);
        $d->addLoader(${($_ = isset($this->services['fos_rest.routing.loader.controller']) ? $this->services['fos_rest.routing.loader.controller'] : $this->get('fos_rest.routing.loader.controller')) && false ?: '_'});
        $d->addLoader(${($_ = isset($this->services['fos_rest.routing.loader.yaml_collection']) ? $this->services['fos_rest.routing.loader.yaml_collection'] : $this->get('fos_rest.routing.loader.yaml_collection')) && false ?: '_'});
        $d->addLoader(${($_ = isset($this->services['fos_rest.routing.loader.xml_collection']) ? $this->services['fos_rest.routing.loader.xml_collection'] : $this->get('fos_rest.routing.loader.xml_collection')) && false ?: '_'});
        $d->addLoader(${($_ = isset($this->services['sulu_website.routing.portal_loader']) ? $this->services['sulu_website.routing.portal_loader'] : $this->get('sulu_website.routing.portal_loader')) && false ?: '_'});
        $d->addLoader(${($_ = isset($this->services['sulu_document_manager.routing.version_loader']) ? $this->services['sulu_document_manager.routing.version_loader'] : $this->get('sulu_document_manager.routing.version_loader')) && false ?: '_'});

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader(${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, $d);
    }

    /**
     * Gets the public 'security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this->services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sensio_distribution.security_checker' shared service.
     *
     * @return \SensioLabs\Security\SecurityChecker
     */
    protected function getSensioDistribution_SecurityCheckerService()
    {
        return $this->services['sensio_distribution.security_checker'] = new \SensioLabs\Security\SecurityChecker();
    }

    /**
     * Gets the public 'sensio_distribution.security_checker.command' shared service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand
     */
    protected function getSensioDistribution_SecurityChecker_CommandService()
    {
        return $this->services['sensio_distribution.security_checker.command'] = new \SensioLabs\Security\Command\SecurityCheckerCommand(${($_ = isset($this->services['sensio_distribution.security_checker']) ? $this->services['sensio_distribution.security_checker'] : $this->get('sensio_distribution.security_checker')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.cache.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the public 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.datetime' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.doctrine.orm' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener(${($_ = isset($this->services['sensio_framework_extra.converter.manager']) ? $this->services['sensio_framework_extra.converter.manager'] : $this->get('sensio_framework_extra.converter.manager')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.manager' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add(${($_ = isset($this->services['sensio_framework_extra.converter.doctrine.orm']) ? $this->services['sensio_framework_extra.converter.doctrine.orm'] : $this->get('sensio_framework_extra.converter.doctrine.orm')) && false ?: '_'}, 0, 'doctrine.orm');
        $instance->add(${($_ = isset($this->services['sensio_framework_extra.converter.datetime']) ? $this->services['sensio_framework_extra.converter.datetime'] : $this->get('sensio_framework_extra.converter.datetime')) && false ?: '_'}, 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the public 'sensio_framework_extra.security.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), NULL, NULL, NULL, NULL);
    }

    /**
     * Gets the public 'sensio_framework_extra.view.guesser' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the public 'session' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session
     */
    protected function getSessionService()
    {
        return $this->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session(${($_ = isset($this->services['session.storage.native']) ? $this->services['session.storage.native'] : $this->get('session.storage.native')) && false ?: '_'}, new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /**
     * Gets the public 'session.handler' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler
     */
    protected function getSession_HandlerService()
    {
        return $this->services['session.handler'] = new \Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler(($this->targetDirs[3].'/sessions/website/dev'));
    }

    /**
     * Gets the public 'session.save_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the public 'session.storage.filesystem' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session.storage.native' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('cookie_httponly' => true, 'gc_probability' => 1), ${($_ = isset($this->services['session.handler']) ? $this->services['session.handler'] : $this->get('session.handler')) && false ?: '_'}, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session.storage.php_bridge' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(${($_ = isset($this->services['session.handler']) ? $this->services['session.handler'] : $this->get('session.handler')) && false ?: '_'}, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\ServiceLocator(array('session' => function () {
            return ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        })));
    }

    /**
     * Gets the public 'stof_doctrine_extensions.uploadable.manager' shared service.
     *
     * @return \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager
     */
    protected function getStofDoctrineExtensions_Uploadable_ManagerService()
    {
        $a = new \Gedmo\Uploadable\UploadableListener(new \Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter());
        $a->setAnnotationReader(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
        $a->setDefaultFileInfoClass('Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');

        return $this->services['stof_doctrine_extensions.uploadable.manager'] = new \Stof\DoctrineExtensionsBundle\Uploadable\UploadableManager($a, 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo');
    }

    /**
     * Gets the public 'streamed_response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the public 'sulu.cache.warmer.structure' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\Cache\StructureWarmer
     */
    protected function getSulu_Cache_Warmer_StructureService()
    {
        return $this->services['sulu.cache.warmer.structure'] = new \Sulu\Bundle\CoreBundle\Cache\StructureWarmer(${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.localization_finder' shared service.
     *
     * @return \Sulu\Component\Content\Compat\LocalizationFinder
     */
    protected function getSulu_Content_LocalizationFinderService()
    {
        return $this->services['sulu.content.localization_finder'] = new \Sulu\Component\Content\Compat\LocalizationFinder(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.mapper' shared service.
     *
     * @return \Sulu\Component\Content\Mapper\ContentMapper
     */
    protected function getSulu_Content_MapperService()
    {
        return $this->services['sulu.content.mapper'] = new \Sulu\Component\Content\Mapper\ContentMapper(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy_pool']) ? $this->services['sulu.content.resource_locator.strategy_pool'] : $this->get('sulu.content.resource_locator.strategy_pool')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.namespace_registry']) ? $this->services['sulu_document_manager.namespace_registry'] : $this->getSuluDocumentManager_NamespaceRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.path_cleaner' shared service.
     *
     * @return \Sulu\Component\PHPCR\PathCleanup
     */
    protected function getSulu_Content_PathCleanerService()
    {
        return $this->services['sulu.content.path_cleaner'] = new \Sulu\Component\PHPCR\PathCleanup(array('default' => array(' ' => '-', '+' => '-', '.' => '-', '^' => '-', '~' => '-', '[' => '-', ']' => '-', '(' => '-', ')' => '-', '{' => '-', '}' => '-', 'Á' => 'A', 'á' => 'a', 'Ć' => 'C', 'ć' => 'c', 'É' => 'E', 'é' => 'e', 'Í' => 'I', 'í' => 'i', 'Ĺ' => 'L', 'ĺ' => 'l', 'Ń' => 'N', 'ń' => 'n', 'Ó' => 'O', 'ó' => 'o', 'Ő' => 'O', 'ő' => 'o', 'Ŕ' => 'R', 'ŕ' => 'r', 'Ś' => 'S', 'ś' => 's', 'Ú' => 'U', 'ú' => 'u', 'Ű' => 'U', 'ű' => 'u', 'Ý' => 'Y', 'ý' => 'y', 'Ź' => 'Z', 'ź' => 'z', 'Ă' => 'A', 'ă' => 'a', 'Ĕ' => 'E', 'ĕ' => 'e', 'Ğ' => 'G', 'ğ' => 'g', 'Ĭ' => 'I', 'ĭ' => 'i', 'Ŏ' => 'o', 'ŏ' => 'o', 'Ŭ' => 'U', 'ŭ' => 'u', 'Č' => 'C', 'č' => 'c', 'Ď' => 'D', 'Ě' => 'E', 'ě' => 'e', 'Ň' => 'N', 'ň' => 'n', 'Ř' => 'R', 'ř' => 'r', 'Š' => 'S', 'š' => 's', 'Ť' => 'T', 'Ž' => 'Z', 'ž' => 'z', 'Ç' => 'C', 'ç' => 'c', 'Ģ' => 'G', 'ģ' => 'g', 'Ķ' => 'K', 'ķ' => 'k', 'Ļ' => 'L', 'ļ' => 'l', 'Ņ' => 'N', 'ņ' => 'n', 'Ŗ' => 'R', 'ŗ' => 'r', 'Ş' => 'S', 'ş' => 's', 'Ţ' => 'T', 'ţ' => 't', 'Ä' => 'Ae', 'ä' => 'ae', 'Ë' => 'E', 'ë' => 'e', 'Ï' => 'I', 'ï' => 'i', 'Ö' => 'Oe', 'ö' => 'oe', 'Ü' => 'Ue', 'ü' => 'ue', 'Ÿ' => 'Y', 'ÿ' => 'y', 'À' => 'A', 'à' => 'a', 'È' => 'E', 'è' => 'e', 'Ì' => 'I', 'ì' => 'i', 'Ò' => 'O', 'ò' => 'o', 'Ù' => 'U', 'ù' => 'u', 'Ā' => 'A', 'ā' => 'a', 'Ē' => 'E', 'ē' => 'e', 'Ī' => 'I', 'ī' => 'i', 'Ō' => 'O', 'ō' => 'o', 'Ū' => 'U', 'ū' => 'u', 'Ą' => 'A', 'ą' => 'a', 'Ę' => 'E', 'ę' => 'e', 'Į' => 'I', 'į' => 'i', 'Ų' => 'U', 'ų' => 'u', 'Ḃ' => 'B', 'ḃ' => 'b', 'Ċ' => 'C', 'ċ' => 'c', 'Ḋ' => 'D', 'ḋ' => 'd', 'Ė' => 'E', 'ė' => 'e', 'Ḟ' => 'F', 'Ġ' => 'G', 'ġ' => 'g', 'Ḣ' => 'H', 'ḣ' => 'h', 'İ' => 'I', 'Ṁ' => 'M', 'ṁ' => 'm', 'Ṅ' => 'N', 'ṅ' => 'n', 'Ṗ' => 'P', 'ṗ' => 'p', 'Ṙ' => 'R', 'ṙ' => 'r', 'Ṡ' => 'S', 'ṡ' => 's', 'Ṫ' => 'T', 'ṫ' => 't', 'Ż' => 'Z', 'ż' => 'z', 'Ḍ' => 'D', 'ḍ' => 'd', 'Ḥ' => 'H', 'ḥ' => 'h', 'Ḳ' => 'K', 'ḳ' => 'k', 'Ḷ' => 'L', 'ḷ' => 'l', 'Ṃ' => 'M', 'ṃ' => 'm', 'Ṛ' => 'R', 'ṛ' => 'r', 'Ṣ' => 'S', 'ṣ' => 's', 'Ṭ' => 'T', 'ṭ' => 't', 'Ṿ' => 'V', 'ṿ' => 'v', 'Đ' => 'D', 'đ' => 'd', 'Ħ' => 'H', 'ħ' => 'h', 'Ŧ' => 'T', 'ŧ' => 't', 'Å' => 'A', 'å' => 'a', 'Ů' => 'U', 'ů' => 'u', 'Ł' => 'L', 'ł' => 'l', 'Ø' => 'O', 'ø' => 'o', 'Ã' => 'A', 'ã' => 'a', 'Ĩ' => 'I', 'ĩ' => 'i', 'Ñ' => 'N', 'ñ' => 'n', 'Õ' => 'O', 'õ' => 'o', 'Ũ' => 'U', 'ũ' => 'u', 'Â' => 'A', 'â' => 'a', 'Ĉ' => 'C', 'ĉ' => 'c', 'Ê' => 'E', 'ê' => 'e', 'Ĝ' => 'G', 'ĝ' => 'g', 'Ĥ' => 'H', 'ĥ' => 'h', 'Î' => 'I', 'î' => 'i', 'Ĵ' => 'J', 'ĵ' => 'j', 'Ô' => 'O', 'ô' => 'o', 'Ŝ' => 'S', 'ŝ' => 's', 'Û' => 'U', 'û' => 'u', 'Ŵ' => 'W', 'ŵ' => 'w', 'Ŷ' => 'Y', 'ŷ' => 'y', 'Æ' => 'AE', 'æ' => 'ae', 'ß' => 'ss', 'Œ' => 'OE', 'œ' => 'oe', 'Ĳ' => 'IJ', 'ª' => 'a', 'º' => 'o'), 'de' => array('&' => 'und'), 'en' => array('&' => 'and'), 'fr' => array('&' => 'et'), 'it' => array('&' => 'e'), 'nl' => array('&' => 'en'), 'es' => array('&' => 'y')));
    }

    /**
     * Gets the public 'sulu.content.path_cleaner.replacer_loader' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\DataFixtures\ReplacerXmlLoader
     */
    protected function getSulu_Content_PathCleaner_ReplacerLoaderService()
    {
        return $this->services['sulu.content.path_cleaner.replacer_loader'] = new \Sulu\Bundle\CoreBundle\DataFixtures\ReplacerXmlLoader(${($_ = isset($this->services['sulu.content.path_cleaner.replacer_loader.file_locator']) ? $this->services['sulu.content.path_cleaner.replacer_loader.file_locator'] : $this->get('sulu.content.path_cleaner.replacer_loader.file_locator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.path_cleaner.replacer_loader.file_locator' shared service.
     *
     * @return \Symfony\Component\Config\FileLocator
     */
    protected function getSulu_Content_PathCleaner_ReplacerLoader_FileLocatorService()
    {
        return $this->services['sulu.content.path_cleaner.replacer_loader.file_locator'] = new \Symfony\Component\Config\FileLocator();
    }

    /**
     * Gets the public 'sulu.content.query_executor' shared service.
     *
     * @return \Sulu\Component\Content\Query\ContentQueryExecutor
     */
    protected function getSulu_Content_QueryExecutorService()
    {
        return $this->services['sulu.content.query_executor'] = new \Sulu\Component\Content\Query\ContentQueryExecutor(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.resource_locator.strategy.tree_full_edit' shared service.
     *
     * @return \Sulu\Component\Content\Types\ResourceLocator\Strategy\TreeFullEditStrategy
     */
    protected function getSulu_Content_ResourceLocator_Strategy_TreeFullEditService()
    {
        return $this->services['sulu.content.resource_locator.strategy.tree_full_edit'] = new \Sulu\Component\Content\Types\ResourceLocator\Strategy\TreeFullEditStrategy(${($_ = isset($this->services['sulu.content.rlp.mapper.phpcr']) ? $this->services['sulu.content.rlp.mapper.phpcr'] : $this->get('sulu.content.rlp.mapper.phpcr')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.path_cleaner']) ? $this->services['sulu.content.path_cleaner'] : $this->get('sulu.content.path_cleaner')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.util.node_helper']) ? $this->services['sulu.util.node_helper'] : $this->get('sulu.util.node_helper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy.tree_generator']) ? $this->services['sulu.content.resource_locator.strategy.tree_generator'] : $this->get('sulu.content.resource_locator.strategy.tree_generator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.resource_locator.strategy.tree_generator' shared service.
     *
     * @return \Sulu\Component\Content\Types\ResourceLocator\Strategy\TreeGenerator
     */
    protected function getSulu_Content_ResourceLocator_Strategy_TreeGeneratorService()
    {
        return $this->services['sulu.content.resource_locator.strategy.tree_generator'] = new \Sulu\Component\Content\Types\ResourceLocator\Strategy\TreeGenerator();
    }

    /**
     * Gets the public 'sulu.content.resource_locator.strategy.tree_leaf_edit' shared service.
     *
     * @return \Sulu\Component\Content\Types\ResourceLocator\Strategy\TreeLeafEditStrategy
     */
    protected function getSulu_Content_ResourceLocator_Strategy_TreeLeafEditService()
    {
        return $this->services['sulu.content.resource_locator.strategy.tree_leaf_edit'] = new \Sulu\Component\Content\Types\ResourceLocator\Strategy\TreeLeafEditStrategy(${($_ = isset($this->services['sulu.content.rlp.mapper.phpcr']) ? $this->services['sulu.content.rlp.mapper.phpcr'] : $this->get('sulu.content.rlp.mapper.phpcr')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.path_cleaner']) ? $this->services['sulu.content.path_cleaner'] : $this->get('sulu.content.path_cleaner')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.util.node_helper']) ? $this->services['sulu.util.node_helper'] : $this->get('sulu.util.node_helper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy.tree_generator']) ? $this->services['sulu.content.resource_locator.strategy.tree_generator'] : $this->get('sulu.content.resource_locator.strategy.tree_generator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.resource_locator.strategy_pool' shared service.
     *
     * @return \Sulu\Component\Content\Types\ResourceLocator\Strategy\ResourceLocatorStrategyPool
     */
    protected function getSulu_Content_ResourceLocator_StrategyPoolService()
    {
        return $this->services['sulu.content.resource_locator.strategy_pool'] = new \Sulu\Component\Content\Types\ResourceLocator\Strategy\ResourceLocatorStrategyPool(array('tree_leaf_edit' => ${($_ = isset($this->services['sulu.content.resource_locator.strategy.tree_leaf_edit']) ? $this->services['sulu.content.resource_locator.strategy.tree_leaf_edit'] : $this->get('sulu.content.resource_locator.strategy.tree_leaf_edit')) && false ?: '_'}, 'tree_full_edit' => ${($_ = isset($this->services['sulu.content.resource_locator.strategy.tree_full_edit']) ? $this->services['sulu.content.resource_locator.strategy.tree_full_edit'] : $this->get('sulu.content.resource_locator.strategy.tree_full_edit')) && false ?: '_'}), ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.rlp.mapper.phpcr' shared service.
     *
     * @return \Sulu\Component\Content\Types\ResourceLocator\Mapper\PhpcrMapper
     */
    protected function getSulu_Content_Rlp_Mapper_PhpcrService()
    {
        return $this->services['sulu.content.rlp.mapper.phpcr'] = new \Sulu\Component\Content\Types\ResourceLocator\Mapper\PhpcrMapper(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.structure_manager' shared service.
     *
     * @return \Sulu\Component\Content\Compat\StructureManager
     */
    protected function getSulu_Content_StructureManagerService()
    {
        return $this->services['sulu.content.structure_manager'] = new \Sulu\Component\Content\Compat\StructureManager(${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.compat.structure.legacy_property_factory']) ? $this->services['sulu_content.compat.structure.legacy_property_factory'] : $this->get('sulu_content.compat.structure.legacy_property_factory')) && false ?: '_'}, array('page' => 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge', 'home' => 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge', 'snippet' => 'Sulu\\Component\\Content\\Compat\\Structure\\SnippetBridge'));
    }

    /**
     * Gets the public 'sulu.content.type.block' shared service.
     *
     * @return \Sulu\Component\Content\Types\BlockContentType
     */
    protected function getSulu_Content_Type_BlockService()
    {
        return $this->services['sulu.content.type.block'] = new \Sulu\Component\Content\Types\BlockContentType(${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, 'SuluContentBundle:Template:content-types/block.html.twig', 'i18n');
    }

    /**
     * Gets the public 'sulu.content.type.checkbox' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Checkbox
     */
    protected function getSulu_Content_Type_CheckboxService()
    {
        return $this->services['sulu.content.type.checkbox'] = new \Sulu\Bundle\ContentBundle\Content\Types\Checkbox('SuluContentBundle:Template:content-types/checkbox.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.color' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Color
     */
    protected function getSulu_Content_Type_ColorService()
    {
        return $this->services['sulu.content.type.color'] = new \Sulu\Bundle\ContentBundle\Content\Types\Color('SuluContentBundle:Template:content-types/color.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.date' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Date
     */
    protected function getSulu_Content_Type_DateService()
    {
        return $this->services['sulu.content.type.date'] = new \Sulu\Bundle\ContentBundle\Content\Types\Date('SuluContentBundle:Template:content-types/date.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.email' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Email
     */
    protected function getSulu_Content_Type_EmailService()
    {
        return $this->services['sulu.content.type.email'] = new \Sulu\Bundle\ContentBundle\Content\Types\Email('SuluContentBundle:Template:content-types/email.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.internal_links' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\InternalLinks
     */
    protected function getSulu_Content_Type_InternalLinksService()
    {
        return $this->services['sulu.content.type.internal_links'] = new \Sulu\Bundle\ContentBundle\Content\Types\InternalLinks(${($_ = isset($this->services['sulu.content.query_executor']) ? $this->services['sulu.content.query_executor'] : $this->get('sulu.content.query_executor')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.smart_content.data_provider.content.query_builder']) ? $this->services['sulu_content.smart_content.data_provider.content.query_builder'] : $this->getSuluContent_SmartContent_DataProvider_Content_QueryBuilderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.reference_store.content']) ? $this->services['sulu_content.reference_store.content'] : $this->get('sulu_content.reference_store.content')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'}, 'SuluContentBundle:Template:content-types/internal_links.html.twig', false);
    }

    /**
     * Gets the public 'sulu.content.type.multiple_select' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\MultipleSelect
     */
    protected function getSulu_Content_Type_MultipleSelectService()
    {
        return $this->services['sulu.content.type.multiple_select'] = new \Sulu\Bundle\ContentBundle\Content\Types\MultipleSelect('SuluContentBundle:Template:content-types/multiple_select.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.password' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Password
     */
    protected function getSulu_Content_Type_PasswordService()
    {
        return $this->services['sulu.content.type.password'] = new \Sulu\Bundle\ContentBundle\Content\Types\Password('SuluContentBundle:Template:content-types/password.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.phone' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Phone
     */
    protected function getSulu_Content_Type_PhoneService()
    {
        return $this->services['sulu.content.type.phone'] = new \Sulu\Bundle\ContentBundle\Content\Types\Phone('SuluContentBundle:Template:content-types/phone.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.resource_locator' shared service.
     *
     * @return \Sulu\Component\Content\Types\ResourceLocator
     */
    protected function getSulu_Content_Type_ResourceLocatorService()
    {
        return $this->services['sulu.content.type.resource_locator'] = new \Sulu\Component\Content\Types\ResourceLocator('SuluContentBundle:Template:content-types/resource_locator.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.single_internal_link' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\SingleInternalLink
     */
    protected function getSulu_Content_Type_SingleInternalLinkService()
    {
        return $this->services['sulu.content.type.single_internal_link'] = new \Sulu\Bundle\ContentBundle\Content\Types\SingleInternalLink(${($_ = isset($this->services['sulu_content.reference_store.content']) ? $this->services['sulu_content.reference_store.content'] : $this->get('sulu_content.reference_store.content')) && false ?: '_'}, 'SuluContentBundle:Template:content-types/single_internal_link.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.single_select' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\SingleSelect
     */
    protected function getSulu_Content_Type_SingleSelectService()
    {
        return $this->services['sulu.content.type.single_select'] = new \Sulu\Bundle\ContentBundle\Content\Types\SingleSelect('SuluContentBundle:Template:content-types/single_select.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.text_area' shared service.
     *
     * @return \Sulu\Component\Content\Types\TextLine
     */
    protected function getSulu_Content_Type_TextAreaService()
    {
        return $this->services['sulu.content.type.text_area'] = new \Sulu\Component\Content\Types\TextLine('SuluContentBundle:Template:content-types/text_area.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.text_editor' shared service.
     *
     * @return \Sulu\Component\Content\Types\TextEditor
     */
    protected function getSulu_Content_Type_TextEditorService()
    {
        return $this->services['sulu.content.type.text_editor'] = new \Sulu\Component\Content\Types\TextEditor('SuluContentBundle:Template:content-types/text_editor.html.twig', ${($_ = isset($this->services['sulu_markup.parser']) ? $this->services['sulu_markup.parser'] : $this->get('sulu_markup.parser')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.type.text_line' shared service.
     *
     * @return \Sulu\Component\Content\Types\TextLine
     */
    protected function getSulu_Content_Type_TextLineService()
    {
        return $this->services['sulu.content.type.text_line'] = new \Sulu\Component\Content\Types\TextLine('SuluContentBundle:Template:content-types/text_line.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.time' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Time
     */
    protected function getSulu_Content_Type_TimeService()
    {
        return $this->services['sulu.content.type.time'] = new \Sulu\Bundle\ContentBundle\Content\Types\Time('SuluContentBundle:Template:content-types/time.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type.url' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Types\Url
     */
    protected function getSulu_Content_Type_UrlService()
    {
        return $this->services['sulu.content.type.url'] = new \Sulu\Bundle\ContentBundle\Content\Types\Url('SuluContentBundle:Template:content-types/url.html.twig');
    }

    /**
     * Gets the public 'sulu.content.type_manager' shared service.
     *
     * @return \Sulu\Component\Content\ContentTypeManager
     */
    protected function getSulu_Content_TypeManagerService()
    {
        $this->services['sulu.content.type_manager'] = $instance = new \Sulu\Component\Content\ContentTypeManager($this);

        $instance->mapAliasToServiceId('text_line', 'sulu.content.type.text_line');
        $instance->mapAliasToServiceId('text_area', 'sulu.content.type.text_area');
        $instance->mapAliasToServiceId('text_editor', 'sulu.content.type.text_editor');
        $instance->mapAliasToServiceId('resource_locator', 'sulu.content.type.resource_locator');
        $instance->mapAliasToServiceId('block', 'sulu.content.type.block');
        $instance->mapAliasToServiceId('contact', 'sulu_contact.content.contact');
        $instance->mapAliasToServiceId('media_selection', 'sulu_media.type.media_selection');
        $instance->mapAliasToServiceId('category_list', 'sulu_category.content.type.category_list');
        $instance->mapAliasToServiceId('snippet', 'sulu_snippet.content.snippet');
        $instance->mapAliasToServiceId('smart_content', 'sulu_content.smart_content.content_type');
        $instance->mapAliasToServiceId('teaser_selection', 'sulu_content.teaser.content_type');
        $instance->mapAliasToServiceId('internal_links', 'sulu.content.type.internal_links');
        $instance->mapAliasToServiceId('single_internal_link', 'sulu.content.type.single_internal_link');
        $instance->mapAliasToServiceId('phone', 'sulu.content.type.phone');
        $instance->mapAliasToServiceId('password', 'sulu.content.type.password');
        $instance->mapAliasToServiceId('url', 'sulu.content.type.url');
        $instance->mapAliasToServiceId('email', 'sulu.content.type.email');
        $instance->mapAliasToServiceId('date', 'sulu.content.type.date');
        $instance->mapAliasToServiceId('time', 'sulu.content.type.time');
        $instance->mapAliasToServiceId('color', 'sulu.content.type.color');
        $instance->mapAliasToServiceId('checkbox', 'sulu.content.type.checkbox');
        $instance->mapAliasToServiceId('multiple_select', 'sulu.content.type.multiple_select');
        $instance->mapAliasToServiceId('single_select', 'sulu.content.type.single_select');
        $instance->mapAliasToServiceId('tag_list', 'sulu_tag.content.type.tag_list');
        $instance->mapAliasToServiceId('location', 'sulu_location.content.type.location');
        $instance->mapAliasToServiceId('route', 'sulu_route.content_type');

        return $instance;
    }

    /**
     * Gets the public 'sulu.content.webspace_structure_provider' shared service.
     *
     * @return \Sulu\Component\Webspace\StructureProvider\WebspaceStructureProvider
     */
    protected function getSulu_Content_WebspaceStructureProviderService()
    {
        return $this->services['sulu.content.webspace_structure_provider'] = new \Sulu\Component\Webspace\StructureProvider\WebspaceStructureProvider(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.webspace_structure_provider.cache']) ? $this->services['sulu.content.webspace_structure_provider.cache'] : $this->get('sulu.content.webspace_structure_provider.cache')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu.content.webspace_structure_provider.cache' shared service.
     *
     * @return \Doctrine\Common\Cache\FilesystemCache
     */
    protected function getSulu_Content_WebspaceStructureProvider_CacheService()
    {
        return $this->services['sulu.content.webspace_structure_provider.cache'] = new \Doctrine\Common\Cache\FilesystemCache((__DIR__.'/sulu/webspace_structures'));
    }

    /**
     * Gets the public 'sulu.core.localization_manager' shared service.
     *
     * @return \Sulu\Component\Localization\Manager\LocalizationManager
     */
    protected function getSulu_Core_LocalizationManagerService()
    {
        $this->services['sulu.core.localization_manager'] = $instance = new \Sulu\Component\Localization\Manager\LocalizationManager();

        $instance->addLocalizationProvider(new \Sulu\Component\Webspace\Manager\WebspaceManager(${($_ = isset($this->services['sulu_core.webspace.loader.delegator']) ? $this->services['sulu_core.webspace.loader.delegator'] : $this->get('sulu_core.webspace.loader.delegator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager.url_replacer']) ? $this->services['sulu_core.webspace.webspace_manager.url_replacer'] : $this->get('sulu_core.webspace.webspace_manager.url_replacer')) && false ?: '_'}, array('config_dir' => ($this->targetDirs[4].'/app/Resources/webspaces'), 'cache_dir' => (__DIR__.'/sulu'), 'debug' => true, 'cache_class' => 'websiteWebspaceCollectionCache', 'base_class' => 'WebspaceCollection')));

        return $instance;
    }

    /**
     * Gets the public 'sulu.persistence.event_subscriber.orm.metadata' shared service.
     *
     * @return \Sulu\Component\Persistence\EventSubscriber\ORM\MetadataSubscriber
     */
    protected function getSulu_Persistence_EventSubscriber_Orm_MetadataService()
    {
        return $this->services['sulu.persistence.event_subscriber.orm.metadata'] = new \Sulu\Component\Persistence\EventSubscriber\ORM\MetadataSubscriber(array('sulu' => array('route' => array('model' => 'Sulu\\Bundle\\RouteBundle\\Entity\\Route', 'repository' => 'Sulu\\Bundle\\RouteBundle\\Entity\\RouteRepository'), 'tag' => array('model' => 'Sulu\\Bundle\\TagBundle\\Entity\\Tag', 'repository' => 'Sulu\\Bundle\\TagBundle\\Entity\\TagRepository'), 'category' => array('model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category', 'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryRepository'), 'category_meta' => array('model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMeta', 'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMetaRepository'), 'category_translation' => array('model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslation', 'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslationRepository'), 'keyword' => array('model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword', 'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\KeywordRepository'), 'user' => array('model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\User', 'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserRepository'), 'role' => array('model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\Role', 'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleRepository'), 'role_setting' => array('model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSetting', 'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSettingRepository'), 'access_control' => array('model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl', 'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControlRepository'), 'media' => array('model' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Media', 'repository' => 'Sulu\\Bundle\\MediaBundle\\Entity\\MediaRepository'), 'contact' => array('model' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Contact', 'repository' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactRepository'))));
    }

    /**
     * Gets the public 'sulu.persistence.event_subscriber.orm.timestampable' shared service.
     *
     * @return \Sulu\Component\Persistence\EventSubscriber\ORM\TimestampableSubscriber
     */
    protected function getSulu_Persistence_EventSubscriber_Orm_TimestampableService()
    {
        return $this->services['sulu.persistence.event_subscriber.orm.timestampable'] = new \Sulu\Component\Persistence\EventSubscriber\ORM\TimestampableSubscriber();
    }

    /**
     * Gets the public 'sulu.persistence.event_subscriber.orm.user_blame' shared service.
     *
     * @return \Sulu\Component\Persistence\EventSubscriber\ORM\UserBlameSubscriber
     */
    protected function getSulu_Persistence_EventSubscriber_Orm_UserBlameService()
    {
        return $this->services['sulu.persistence.event_subscriber.orm.user_blame'] = new \Sulu\Component\Persistence\EventSubscriber\ORM\UserBlameSubscriber(NULL, 'Sulu\\Bundle\\SecurityBundle\\Entity\\User');
    }

    /**
     * Gets the public 'sulu.phpcr.session' shared service.
     *
     * @return \Sulu\Component\PHPCR\SessionManager\SessionManager
     */
    protected function getSulu_Phpcr_SessionService()
    {
        return $this->services['sulu.phpcr.session'] = new \Sulu\Component\PHPCR\SessionManager\SessionManager(${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'}, array('base' => 'cmf', 'content' => 'contents', 'route' => 'routes', 'snippet' => 'snippets'));
    }

    /**
     * Gets the public 'sulu.repository.access_control' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\AccessControlRepository
     */
    protected function getSulu_Repository_AccessControlService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.access_control'] = new \Sulu\Bundle\SecurityBundle\Entity\AccessControlRepository($a, $a->getClassMetadata('Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl'));
    }

    /**
     * Gets the public 'sulu.repository.category' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Entity\CategoryRepository
     */
    protected function getSulu_Repository_CategoryService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.category'] = new \Sulu\Bundle\CategoryBundle\Entity\CategoryRepository($a, $a->getClassMetadata('Sulu\\Bundle\\CategoryBundle\\Entity\\Category'));
    }

    /**
     * Gets the public 'sulu.repository.category_meta' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Entity\CategoryMetaRepository
     */
    protected function getSulu_Repository_CategoryMetaService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.category_meta'] = new \Sulu\Bundle\CategoryBundle\Entity\CategoryMetaRepository($a, $a->getClassMetadata('Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMeta'));
    }

    /**
     * Gets the public 'sulu.repository.category_translation' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Entity\CategoryTranslationRepository
     */
    protected function getSulu_Repository_CategoryTranslationService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.category_translation'] = new \Sulu\Bundle\CategoryBundle\Entity\CategoryTranslationRepository($a, $a->getClassMetadata('Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslation'));
    }

    /**
     * Gets the public 'sulu.repository.contact' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Entity\ContactRepository
     */
    protected function getSulu_Repository_ContactService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.contact'] = new \Sulu\Bundle\ContactBundle\Entity\ContactRepository($a, $a->getClassMetadata('Sulu\\Bundle\\ContactBundle\\Entity\\Contact'));
    }

    /**
     * Gets the public 'sulu.repository.keyword' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Entity\KeywordRepository
     */
    protected function getSulu_Repository_KeywordService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.keyword'] = new \Sulu\Bundle\CategoryBundle\Entity\KeywordRepository($a, $a->getClassMetadata('Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword'));
    }

    /**
     * Gets the public 'sulu.repository.media' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Entity\MediaRepository
     */
    protected function getSulu_Repository_MediaService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.media'] = new \Sulu\Bundle\MediaBundle\Entity\MediaRepository($a, $a->getClassMetadata('Sulu\\Bundle\\MediaBundle\\Entity\\Media'));
    }

    /**
     * Gets the public 'sulu.repository.role' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\RoleRepository
     */
    protected function getSulu_Repository_RoleService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.role'] = new \Sulu\Bundle\SecurityBundle\Entity\RoleRepository($a, $a->getClassMetadata('Sulu\\Bundle\\SecurityBundle\\Entity\\Role'));
    }

    /**
     * Gets the public 'sulu.repository.role_setting' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\RoleSettingRepository
     */
    protected function getSulu_Repository_RoleSettingService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.role_setting'] = new \Sulu\Bundle\SecurityBundle\Entity\RoleSettingRepository($a, $a->getClassMetadata('Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSetting'));
    }

    /**
     * Gets the public 'sulu.repository.route' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Entity\RouteRepository
     */
    protected function getSulu_Repository_RouteService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.route'] = new \Sulu\Bundle\RouteBundle\Entity\RouteRepository($a, $a->getClassMetadata('Sulu\\Bundle\\RouteBundle\\Entity\\Route'));
    }

    /**
     * Gets the public 'sulu.repository.tag' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Entity\TagRepository
     */
    protected function getSulu_Repository_TagService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.tag'] = new \Sulu\Bundle\TagBundle\Entity\TagRepository($a, $a->getClassMetadata('Sulu\\Bundle\\TagBundle\\Entity\\Tag'));
    }

    /**
     * Gets the public 'sulu.repository.user' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\UserRepository
     */
    protected function getSulu_Repository_UserService()
    {
        $a = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'};

        return $this->services['sulu.repository.user'] = new \Sulu\Bundle\SecurityBundle\Entity\UserRepository($a, $a->getClassMetadata('Sulu\\Bundle\\SecurityBundle\\Entity\\User'));
    }

    /**
     * Gets the public 'sulu.util.node_helper' shared service.
     *
     * @return \Sulu\Component\Util\SuluNodeHelper
     */
    protected function getSulu_Util_NodeHelperService()
    {
        return $this->services['sulu.util.node_helper'] = new \Sulu\Component\Util\SuluNodeHelper(${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'}, 'i18n', array('base' => 'cmf', 'content' => 'contents', 'route' => 'routes', 'snippet' => 'snippets'), ${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_category.category_manager' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Category\CategoryManager
     */
    protected function getSuluCategory_CategoryManagerService()
    {
        return $this->services['sulu_category.category_manager'] = new \Sulu\Bundle\CategoryBundle\Category\CategoryManager(${($_ = isset($this->services['sulu.repository.category']) ? $this->services['sulu.repository.category'] : $this->get('sulu.repository.category')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.category_meta']) ? $this->services['sulu.repository.category_meta'] : $this->get('sulu.repository.category_meta')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.category_translation']) ? $this->services['sulu.repository.category_translation'] : $this->get('sulu.repository.category_translation')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.user']) ? $this->services['sulu.repository.user'] : $this->get('sulu.repository.user')) && false ?: '_'}, ${($_ = isset($this->services['sulu_category.keyword_manager']) ? $this->services['sulu_category.keyword_manager'] : $this->get('sulu_category.keyword_manager')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_category.category_request_handler' shared service.
     *
     * @return \Sulu\Component\Category\Request\CategoryRequestHandler
     */
    protected function getSuluCategory_CategoryRequestHandlerService()
    {
        return $this->services['sulu_category.category_request_handler'] = new \Sulu\Component\Category\Request\CategoryRequestHandler(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_category.content.type.category_list' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Content\Types\CategoryList
     */
    protected function getSuluCategory_Content_Type_CategoryListService()
    {
        return $this->services['sulu_category.content.type.category_list'] = new \Sulu\Bundle\CategoryBundle\Content\Types\CategoryList(${($_ = isset($this->services['sulu_category.category_manager']) ? $this->services['sulu_category.category_manager'] : $this->get('sulu_category.category_manager')) && false ?: '_'}, 'SuluCategoryBundle:Template:content-types/category_list.html.twig');
    }

    /**
     * Gets the public 'sulu_category.keyword_manager' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Category\KeywordManager
     */
    protected function getSuluCategory_KeywordManagerService()
    {
        return $this->services['sulu_category.keyword_manager'] = new \Sulu\Bundle\CategoryBundle\Category\KeywordManager(${($_ = isset($this->services['sulu.repository.keyword']) ? $this->services['sulu.repository.keyword'] : $this->get('sulu.repository.keyword')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.category_translation']) ? $this->services['sulu.repository.category_translation'] : $this->get('sulu.repository.category_translation')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_category.twig_extension' shared service.
     *
     * @return \Sulu\Bundle\CategoryBundle\Twig\CategoryTwigExtension
     */
    protected function getSuluCategory_TwigExtensionService()
    {
        return $this->services['sulu_category.twig_extension'] = new \Sulu\Bundle\CategoryBundle\Twig\CategoryTwigExtension(${($_ = isset($this->services['sulu_category.category_manager']) ? $this->services['sulu_category.category_manager'] : $this->get('sulu_category.category_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_category.category_request_handler']) ? $this->services['sulu_category.category_request_handler'] : $this->get('sulu_category.category_request_handler')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.cache.memoize']) ? $this->services['sulu_core.cache.memoize'] : $this->get('sulu_core.cache.memoize')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_contact.account_factory' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Contact\AccountFactory
     */
    protected function getSuluContact_AccountFactoryService()
    {
        return $this->services['sulu_contact.account_factory'] = new \Sulu\Bundle\ContactBundle\Contact\AccountFactory();
    }

    /**
     * Gets the public 'sulu_contact.account_listener' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\EventListener\AccountListener
     */
    protected function getSuluContact_AccountListenerService()
    {
        return $this->services['sulu_contact.account_listener'] = new \Sulu\Bundle\ContactBundle\EventListener\AccountListener();
    }

    /**
     * Gets the public 'sulu_contact.account_manager' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Contact\AccountManager
     */
    protected function getSuluContact_AccountManagerService()
    {
        return $this->services['sulu_contact.account_manager'] = new \Sulu\Bundle\ContactBundle\Contact\AccountManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_tag.tag_manager']) ? $this->services['sulu_tag.tag_manager'] : $this->get('sulu_tag.tag_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.account_factory']) ? $this->services['sulu_contact.account_factory'] : $this->get('sulu_contact.account_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.account_repository']) ? $this->services['sulu_contact.account_repository'] : $this->get('sulu_contact.account_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.contact']) ? $this->services['sulu.repository.contact'] : $this->get('sulu.repository.contact')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.media']) ? $this->services['sulu.repository.media'] : $this->get('sulu.repository.media')) && false ?: '_'}, 'SuluContactBundle:Account');
    }

    /**
     * Gets the public 'sulu_contact.account_repository' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Entity\AccountRepository
     */
    protected function getSuluContact_AccountRepositoryService()
    {
        return $this->services['sulu_contact.account_repository'] = ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}->getRepository('SuluContactBundle:Account');
    }

    /**
     * Gets the public 'sulu_contact.contact_manager' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Contact\ContactManager
     */
    protected function getSuluContact_ContactManagerService()
    {
        return $this->services['sulu_contact.contact_manager'] = new \Sulu\Bundle\ContactBundle\Contact\ContactManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_tag.tag_manager']) ? $this->services['sulu_tag.tag_manager'] : $this->get('sulu_tag.tag_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.account_repository']) ? $this->services['sulu_contact.account_repository'] : $this->get('sulu_contact.account_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.contact_title_repository']) ? $this->services['sulu_contact.contact_title_repository'] : $this->get('sulu_contact.contact_title_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.contact']) ? $this->services['sulu.repository.contact'] : $this->get('sulu.repository.contact')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.media']) ? $this->services['sulu.repository.media'] : $this->get('sulu.repository.media')) && false ?: '_'}, 'SuluContactBundle:Account');
    }

    /**
     * Gets the public 'sulu_contact.contact_repository' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Entity\ContactRepository
     */
    protected function getSuluContact_ContactRepositoryService()
    {
        return $this->services['sulu_contact.contact_repository'] = ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}->getRepository('SuluContactBundle:Contact');
    }

    /**
     * Gets the public 'sulu_contact.contact_title_repository' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Entity\ContactTitleRepository
     */
    protected function getSuluContact_ContactTitleRepositoryService()
    {
        return $this->services['sulu_contact.contact_title_repository'] = ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}->getRepository('SuluContactBundle:ContactTitle');
    }

    /**
     * Gets the public 'sulu_contact.content.contact' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Content\Types\ContactSelectionContentType
     */
    protected function getSuluContact_Content_ContactService()
    {
        return $this->services['sulu_contact.content.contact'] = new \Sulu\Bundle\ContactBundle\Content\Types\ContactSelectionContentType('SuluContactBundle:Template:content-types/contact-selection.html.twig', ${($_ = isset($this->services['sulu_contact.contact_manager']) ? $this->services['sulu_contact.contact_manager'] : $this->get('sulu_contact.contact_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.account_manager']) ? $this->services['sulu_contact.account_manager'] : $this->get('sulu_contact.account_manager')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.util.id_converter']) ? $this->services['sulu_contact.util.id_converter'] : $this->getSuluContact_Util_IdConverterService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.util.index_comparator']) ? $this->services['sulu_contact.util.index_comparator'] : $this->getSuluContact_Util_IndexComparatorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_contact.country_repository' shared service.
     *
     * @return \Sulu\Component\Persistence\Repository\ORM\EntityRepository
     */
    protected function getSuluContact_CountryRepositoryService()
    {
        return $this->services['sulu_contact.country_repository'] = ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}->getRepository('SuluContactBundle:Country');
    }

    /**
     * Gets the public 'sulu_contact.customer_manager' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Contact\CustomerManager
     */
    protected function getSuluContact_CustomerManagerService()
    {
        return $this->services['sulu_contact.customer_manager'] = new \Sulu\Bundle\ContactBundle\Contact\CustomerManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.util.id_converter']) ? $this->services['sulu_contact.util.id_converter'] : $this->getSuluContact_Util_IdConverterService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.util.index_comparator']) ? $this->services['sulu_contact.util.index_comparator'] : $this->getSuluContact_Util_IndexComparatorService()) && false ?: '_'}, 'SuluContactBundle:Contact', 'SuluContactBundle:Account');
    }

    /**
     * Gets the public 'sulu_contact.js_config' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Admin\JsConfigAvatarCollection
     */
    protected function getSuluContact_JsConfigService()
    {
        return $this->services['sulu_contact.js_config'] = new \Sulu\Bundle\ContactBundle\Admin\JsConfigAvatarCollection(${($_ = isset($this->services['sulu_media.system_collections.manager']) ? $this->services['sulu_media.system_collections.manager'] : $this->get('sulu_media.system_collections.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_contact.smart_content.data_provider.account' shared service.
     *
     * @return \Sulu\Component\Contact\SmartContent\AccountDataProvider
     */
    protected function getSuluContact_SmartContent_DataProvider_AccountService()
    {
        return $this->services['sulu_contact.smart_content.data_provider.account'] = new \Sulu\Component\Contact\SmartContent\AccountDataProvider(${($_ = isset($this->services['sulu_contact.account_manager']) ? $this->services['sulu_contact.account_manager'] : $this->get('sulu_contact.account_manager')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_contact.smart_content.data_provider.contact' shared service.
     *
     * @return \Sulu\Component\Contact\SmartContent\ContactDataProvider
     */
    protected function getSuluContact_SmartContent_DataProvider_ContactService()
    {
        return $this->services['sulu_contact.smart_content.data_provider.contact'] = new \Sulu\Component\Contact\SmartContent\ContactDataProvider(${($_ = isset($this->services['sulu_contact.contact_manager']) ? $this->services['sulu_contact.contact_manager'] : $this->get('sulu_contact.contact_manager')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_contact.twig' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Twig\ContactTwigExtension
     */
    protected function getSuluContact_TwigService()
    {
        return $this->services['sulu_contact.twig'] = new \Sulu\Bundle\ContactBundle\Twig\ContactTwigExtension(${($_ = isset($this->services['sulu_contact.twig.cache']) ? $this->services['sulu_contact.twig.cache'] : $this->get('sulu_contact.twig.cache')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.contact']) ? $this->services['sulu.repository.contact'] : $this->get('sulu.repository.contact')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_contact.twig.cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getSuluContact_Twig_CacheService()
    {
        return $this->services['sulu_contact.twig.cache'] = new \Doctrine\Common\Cache\ArrayCache();
    }

    /**
     * Gets the public 'sulu_content.command.cleanup_history' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Command\CleanupHistoryCommand
     */
    protected function getSuluContent_Command_CleanupHistoryService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_content.command.cleanup_history'] = new \Sulu\Bundle\ContentBundle\Command\CleanupHistoryCommand(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, $a, $a);
    }

    /**
     * Gets the public 'sulu_content.command.maintain_resource_locator' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Command\MaintainResourceLocatorCommand
     */
    protected function getSuluContent_Command_MaintainResourceLocatorService()
    {
        return $this->services['sulu_content.command.maintain_resource_locator'] = new \Sulu\Bundle\ContentBundle\Command\MaintainResourceLocatorCommand(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.compat.serializer.handler.page_bridge' shared service.
     *
     * @return \Sulu\Component\Content\Compat\Serializer\PageBridgeHandler
     */
    protected function getSuluContent_Compat_Serializer_Handler_PageBridgeService()
    {
        return $this->services['sulu_content.compat.serializer.handler.page_bridge'] = new \Sulu\Component\Content\Compat\Serializer\PageBridgeHandler(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.compat.structure.legacy_property_factory']) ? $this->services['sulu_content.compat.structure.legacy_property_factory'] : $this->get('sulu_content.compat.structure.legacy_property_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.compat.structure.legacy_property_factory' shared service.
     *
     * @return \Sulu\Component\Content\Compat\Structure\LegacyPropertyFactory
     */
    protected function getSuluContent_Compat_Structure_LegacyPropertyFactoryService()
    {
        return $this->services['sulu_content.compat.structure.legacy_property_factory'] = new \Sulu\Component\Content\Compat\Structure\LegacyPropertyFactory(${($_ = isset($this->services['sulu_document_manager.namespace_registry']) ? $this->services['sulu_document_manager.namespace_registry'] : $this->getSuluDocumentManager_NamespaceRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.content_repository' shared service.
     *
     * @return \Sulu\Component\Content\Repository\ContentRepository
     */
    protected function getSuluContent_ContentRepositoryService()
    {
        return $this->services['sulu_content.content_repository'] = new \Sulu\Component\Content\Repository\ContentRepository(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.localization_finder']) ? $this->services['sulu.content.localization_finder'] : $this->get('sulu.content.localization_finder')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.util.node_helper']) ? $this->services['sulu.util.node_helper'] : $this->get('sulu.util.node_helper')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.document.serializer.handler.extension_container' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Handler\ExtensionContainerHandler
     */
    protected function getSuluContent_Document_Serializer_Handler_ExtensionContainerService()
    {
        return $this->services['sulu_content.document.serializer.handler.extension_container'] = new \Sulu\Bundle\ContentBundle\Serializer\Handler\ExtensionContainerHandler();
    }

    /**
     * Gets the public 'sulu_content.document.serializer.handler.structure' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Handler\StructureHandler
     */
    protected function getSuluContent_Document_Serializer_Handler_StructureService()
    {
        return $this->services['sulu_content.document.serializer.handler.structure'] = new \Sulu\Bundle\ContentBundle\Serializer\Handler\StructureHandler();
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.extension_container' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\ExtensionContainerSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_ExtensionContainerService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.extension_container'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\ExtensionContainerSubscriber();
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.locale' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\LocaleSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_LocaleService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.locale'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\LocaleSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.parent_behavior' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\ParentSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_ParentBehaviorService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.parent_behavior'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\ParentSubscriber();
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.path_behavior' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\PathSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_PathBehaviorService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.path_behavior'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\PathSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.redirect_type_behavior' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\RedirectTypeSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_RedirectTypeBehaviorService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.redirect_type_behavior'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\RedirectTypeSubscriber();
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.shadow_locale_behavior' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\ShadowLocaleSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_ShadowLocaleBehaviorService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.shadow_locale_behavior'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\ShadowLocaleSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.structure_behavior' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\StructureSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_StructureBehaviorService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.structure_behavior'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\StructureSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.document.serializer.subscriber.workflow_stage_behavior' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Serializer\Subscriber\WorkflowStageSubscriber
     */
    protected function getSuluContent_Document_Serializer_Subscriber_WorkflowStageBehaviorService()
    {
        return $this->services['sulu_content.document.serializer.subscriber.workflow_stage_behavior'] = new \Sulu\Bundle\ContentBundle\Serializer\Subscriber\WorkflowStageSubscriber();
    }

    /**
     * Gets the public 'sulu_content.document.subscriber.content' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\StructureSubscriber
     */
    protected function getSuluContent_Document_Subscriber_ContentService()
    {
        return $this->services['sulu_content.document.subscriber.content'] = new \Sulu\Component\Content\Document\Subscriber\StructureSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.compat.structure.legacy_property_factory']) ? $this->services['sulu_content.compat.structure.legacy_property_factory'] : $this->get('sulu_content.compat.structure.legacy_property_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, array('snippet' => 'default'));
    }

    /**
     * Gets the public 'sulu_content.document_manager.content_initializer' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\DocumentManager\ContentInitializer
     */
    protected function getSuluContent_DocumentManager_ContentInitializerService()
    {
        return $this->services['sulu_content.document_manager.content_initializer'] = new \Sulu\Bundle\ContentBundle\DocumentManager\ContentInitializer(${($_ = isset($this->services['doctrine_phpcr']) ? $this->services['doctrine_phpcr'] : $this->get('doctrine_phpcr')) && false ?: '_'}, 'i18n');
    }

    /**
     * Gets the public 'sulu_content.export.manager' shared service.
     *
     * @return \Sulu\Component\Export\Manager\ExportManager
     */
    protected function getSuluContent_Export_ManagerService()
    {
        $this->services['sulu_content.export.manager'] = $instance = new \Sulu\Component\Export\Manager\ExportManager(${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'});

        $instance->add('text_line', '1.2.xliff', array('translate' => true));
        $instance->add('text_area', '1.2.xliff', array('translate' => true));
        $instance->add('text_editor', '1.2.xliff', array('translate' => true));
        $instance->add('resource_locator', '1.2.xliff', array('translate' => false));
        $instance->add('block', '1.2.xliff', array('translate' => false));
        $instance->add('contact', '1.2.xliff', array('translate' => false));
        $instance->add('media_selection', '1.2.xliff', array('translate' => false));
        $instance->add('category_list', '1.2.xliff', array('translate' => false));
        $instance->add('snippet', '1.2.xliff', array('translate' => false));
        $instance->add('smart_content', '1.2.xliff', array('translate' => false));
        $instance->add('teaser_selection', '1.2.xliff', array('translate' => false));
        $instance->add('internal_links', '1.2.xliff', array('translate' => false));
        $instance->add('single_internal_link', '1.2.xliff', array('translate' => false));
        $instance->add('phone', '1.2.xliff', array('translate' => false));
        $instance->add('password', '1.2.xliff', array('translate' => false));
        $instance->add('url', '1.2.xliff', array('translate' => false));
        $instance->add('email', '1.2.xliff', array('translate' => false));
        $instance->add('date', '1.2.xliff', array('translate' => false));
        $instance->add('time', '1.2.xliff', array('translate' => false));
        $instance->add('color', '1.2.xliff', array('translate' => false));
        $instance->add('checkbox', '1.2.xliff', array('translate' => false));
        $instance->add('multiple_select', '1.2.xliff', array('translate' => false));
        $instance->add('single_select', '1.2.xliff', array('translate' => false));
        $instance->add('tag_list', '1.2.xliff', array('translate' => false));
        $instance->add('location', '1.2.xliff', array('translate' => false));

        return $instance;
    }

    /**
     * Gets the public 'sulu_content.export.webspace' shared service.
     *
     * @return \Sulu\Component\Content\Export\WebspaceExport
     */
    protected function getSuluContent_Export_WebspaceService()
    {
        return $this->services['sulu_content.export.webspace'] = new \Sulu\Component\Content\Export\WebspaceExport(${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.export.manager']) ? $this->services['sulu_content.export.manager'] : $this->get('sulu_content.export.manager')) && false ?: '_'}, array('1.2.xliff' => 'SuluContentBundle:Export:Webspace/1.2.xliff.twig'));
    }

    /**
     * Gets the public 'sulu_content.export_twig_extension' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Twig\ExportTwigExtension
     */
    protected function getSuluContent_ExportTwigExtensionService()
    {
        return $this->services['sulu_content.export_twig_extension'] = new \Sulu\Bundle\ContentBundle\Twig\ExportTwigExtension(${($_ = isset($this->services['sulu_content.export.manager']) ? $this->services['sulu_content.export.manager'] : $this->get('sulu_content.export.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.extension.excerpt' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Structure\ExcerptStructureExtension
     */
    protected function getSuluContent_Extension_ExcerptService()
    {
        return $this->services['sulu_content.extension.excerpt'] = new \Sulu\Bundle\ContentBundle\Content\Structure\ExcerptStructureExtension(${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.export.manager']) ? $this->services['sulu_content.export.manager'] : $this->get('sulu_content.export.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.import.manager']) ? $this->services['sulu_content.import.manager'] : $this->get('sulu_content.import.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.extension.manager' shared service.
     *
     * @return \Sulu\Component\Content\Extension\ExtensionManager
     */
    protected function getSuluContent_Extension_ManagerService()
    {
        $this->services['sulu_content.extension.manager'] = $instance = new \Sulu\Component\Content\Extension\ExtensionManager();

        $instance->addExtension(${($_ = isset($this->services['sulu_content.extension.seo']) ? $this->services['sulu_content.extension.seo'] : $this->get('sulu_content.extension.seo')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_content.extension.excerpt']) ? $this->services['sulu_content.extension.excerpt'] : $this->get('sulu_content.extension.excerpt')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sulu_content.extension.seo' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Content\Structure\SeoStructureExtension
     */
    protected function getSuluContent_Extension_SeoService()
    {
        return $this->services['sulu_content.extension.seo'] = new \Sulu\Bundle\ContentBundle\Content\Structure\SeoStructureExtension();
    }

    /**
     * Gets the public 'sulu_content.import.manager' shared service.
     *
     * @return \Sulu\Component\Import\Manager\ImportManager
     */
    protected function getSuluContent_Import_ManagerService()
    {
        return $this->services['sulu_content.import.manager'] = new \Sulu\Component\Import\Manager\ImportManager(${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.import.webspace' shared service.
     *
     * @return \Sulu\Component\Content\Import\WebspaceImport
     */
    protected function getSuluContent_Import_WebspaceService()
    {
        return $this->services['sulu_content.import.webspace'] = new \Sulu\Component\Content\Import\WebspaceImport(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.compat.structure.legacy_property_factory']) ? $this->services['sulu_content.compat.structure.legacy_property_factory'] : $this->get('sulu_content.compat.structure.legacy_property_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy.tree_leaf_edit']) ? $this->services['sulu.content.resource_locator.strategy.tree_leaf_edit'] : $this->get('sulu.content.resource_locator.strategy.tree_leaf_edit')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.import.manager']) ? $this->services['sulu_content.import.manager'] : $this->get('sulu_content.import.manager')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.import.webspace.xliff12']) ? $this->services['sulu_content.import.webspace.xliff12'] : $this->get('sulu_content.import.webspace.xliff12')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.import.webspace.xliff12' shared service.
     *
     * @return \Sulu\Component\Import\Format\Xliff12
     */
    protected function getSuluContent_Import_Webspace_Xliff12Service()
    {
        return $this->services['sulu_content.import.webspace.xliff12'] = new \Sulu\Component\Import\Format\Xliff12();
    }

    /**
     * Gets the public 'sulu_content.js_config.server' shared service.
     *
     * @return \Sulu\Bundle\AdminBundle\Admin\JsConfig
     */
    protected function getSuluContent_JsConfig_ServerService()
    {
        return $this->services['sulu_content.js_config.server'] = new \Sulu\Bundle\AdminBundle\Admin\JsConfig('sulu.websocket.server', array('enabled' => false, 'port' => 9876, 'httpHost' => 'localhost'));
    }

    /**
     * Gets the public 'sulu_content.js_config.webspace_input_types' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Admin\WebspaceInputTypesJsConfig
     */
    protected function getSuluContent_JsConfig_WebspaceInputTypesService()
    {
        return $this->services['sulu_content.js_config.webspace_input_types'] = new \Sulu\Bundle\ContentBundle\Admin\WebspaceInputTypesJsConfig(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy_pool']) ? $this->services['sulu.content.resource_locator.strategy_pool'] : $this->get('sulu.content.resource_locator.strategy_pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.jsconfig' shared service.
     *
     * @return \Sulu\Bundle\AdminBundle\Admin\JsConfig
     */
    protected function getSuluContent_JsconfigService()
    {
        return $this->services['sulu_content.jsconfig'] = new \Sulu\Bundle\AdminBundle\Admin\JsConfig('sulu-content', array('locales' => ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}->getAllLocalesByWebspaces(), 'versioning' => array('enabled' => false), 'default_author' => true, 'seo' => array('max_title_length' => 55, 'max_description_length' => 155, 'max_keywords' => 5, 'keywords_separator' => ',', 'url_prefix' => 'www.yoursite.com/{locale}')));
    }

    /**
     * Gets the public 'sulu_content.jsconfig.apps' shared service.
     *
     * @return \Sulu\Bundle\WebsocketBundle\Admin\AppJsConfig
     */
    protected function getSuluContent_Jsconfig_AppsService()
    {
        return $this->services['sulu_content.jsconfig.apps'] = new \Sulu\Bundle\WebsocketBundle\Admin\AppJsConfig(${($_ = isset($this->services['sulu_websocket.manager']) ? $this->services['sulu_websocket.manager'] : $this->get('sulu_websocket.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.link_tag' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Markup\LinkTag
     */
    protected function getSuluContent_LinkTagService()
    {
        return $this->services['sulu_content.link_tag'] = new \Sulu\Bundle\ContentBundle\Markup\LinkTag(${($_ = isset($this->services['sulu_content.link_tag.provider_pool']) ? $this->services['sulu_content.link_tag.provider_pool'] : $this->get('sulu_content.link_tag.provider_pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.link_tag.page_provider' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Markup\Link\PageLinkProvider
     */
    protected function getSuluContent_LinkTag_PageProviderService()
    {
        return $this->services['sulu_content.link_tag.page_provider'] = new \Sulu\Bundle\ContentBundle\Markup\Link\PageLinkProvider(${($_ = isset($this->services['sulu_content.content_repository']) ? $this->services['sulu_content.content_repository'] : $this->get('sulu_content.content_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_content.link_tag.provider_pool' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Markup\Link\LinkProviderPool
     */
    protected function getSuluContent_LinkTag_ProviderPoolService()
    {
        return $this->services['sulu_content.link_tag.provider_pool'] = new \Sulu\Bundle\ContentBundle\Markup\Link\LinkProviderPool(array('page' => ${($_ = isset($this->services['sulu_content.link_tag.page_provider']) ? $this->services['sulu_content.link_tag.page_provider'] : $this->get('sulu_content.link_tag.page_provider')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_content.node_repository' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Repository\NodeRepository
     */
    protected function getSuluContent_NodeRepositoryService()
    {
        return $this->services['sulu_content.node_repository'] = new \Sulu\Bundle\ContentBundle\Repository\NodeRepository(${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_security.user_manager']) ? $this->services['sulu_security.user_manager'] : $this->get('sulu_security.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.smart_content.data_provider.content.query_builder']) ? $this->services['sulu_content.smart_content.data_provider.content.query_builder'] : $this->getSuluContent_SmartContent_DataProvider_Content_QueryBuilderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.query_executor']) ? $this->services['sulu.content.query_executor'] : $this->get('sulu.content.query_executor')) && false ?: '_'}, ${($_ = isset($this->services['sulu_security.access_control_manager']) ? $this->services['sulu_security.access_control_manager'] : $this->get('sulu_security.access_control_manager')) && false ?: '_'}, NULL, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.permission_listener' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Search\EventListener\PermissionListener
     */
    protected function getSuluContent_PermissionListenerService()
    {
        return $this->services['sulu_content.permission_listener'] = new \Sulu\Bundle\ContentBundle\Search\EventListener\PermissionListener(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.preview.defaults_provider' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Preview\PageRouteDefaultsProvider
     */
    protected function getSuluContent_Preview_DefaultsProviderService()
    {
        return $this->services['sulu_content.preview.defaults_provider'] = new \Sulu\Bundle\ContentBundle\Preview\PageRouteDefaultsProvider(${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.preview.object_provider' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Preview\PageObjectProvider
     */
    protected function getSuluContent_Preview_ObjectProviderService()
    {
        return $this->services['sulu_content.preview.object_provider'] = new \Sulu\Bundle\ContentBundle\Preview\PageObjectProvider(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.reference_store.content' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\ReferenceStore\ReferenceStore
     */
    protected function getSuluContent_ReferenceStore_ContentService()
    {
        return $this->services['sulu_content.reference_store.content'] = new \Sulu\Bundle\WebsiteBundle\ReferenceStore\ReferenceStore();
    }

    /**
     * Gets the public 'sulu_content.rl_repository' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Repository\ResourceLocatorRepository
     */
    protected function getSuluContent_RlRepositoryService()
    {
        return $this->services['sulu_content.rl_repository'] = new \Sulu\Bundle\ContentBundle\Repository\ResourceLocatorRepository(${($_ = isset($this->services['sulu.content.resource_locator.strategy_pool']) ? $this->services['sulu.content.resource_locator.strategy_pool'] : $this->get('sulu.content.resource_locator.strategy_pool')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.search.event_subscriber.blame_timestamp' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Search\EventSubscriber\BlameTimestampSubscriber
     */
    protected function getSuluContent_Search_EventSubscriber_BlameTimestampService()
    {
        return $this->services['sulu_content.search.event_subscriber.blame_timestamp'] = new \Sulu\Bundle\ContentBundle\Search\EventSubscriber\BlameTimestampSubscriber(${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.search.event_subscriber.structure' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Search\EventSubscriber\StructureSubscriber
     */
    protected function getSuluContent_Search_EventSubscriber_StructureService()
    {
        return $this->services['sulu_content.search.event_subscriber.structure'] = new \Sulu\Bundle\ContentBundle\Search\EventSubscriber\StructureSubscriber(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.search.metadata.provider.structure' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Search\Metadata\StructureProvider
     */
    protected function getSuluContent_Search_Metadata_Provider_StructureService()
    {
        return $this->services['sulu_content.search.metadata.provider.structure'] = new \Sulu\Bundle\ContentBundle\Search\Metadata\StructureProvider(${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, array('Sulu\\Bundle\\ContentBundle\\Document\\PageDocument' => array('index' => 'page', 'decorate_index' => true), 'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetDocument' => array('index' => 'snippet', 'decorate_index' => false)));
    }

    /**
     * Gets the public 'sulu_content.search.reindex.structure_provider' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Search\Reindex\StructureProvider
     */
    protected function getSuluContent_Search_Reindex_StructureProviderService()
    {
        return $this->services['sulu_content.search.reindex.structure_provider'] = new \Sulu\Bundle\ContentBundle\Search\Reindex\StructureProvider(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory.base']) ? $this->services['sulu_document_manager.metadata_factory.base'] : $this->getSuluDocumentManager_MetadataFactory_BaseService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, 'website');
    }

    /**
     * Gets the public 'sulu_content.smart_content.content_type' shared service.
     *
     * @return \Sulu\Component\SmartContent\ContentType
     */
    protected function getSuluContent_SmartContent_ContentTypeService()
    {
        return $this->services['sulu_content.smart_content.content_type'] = new \Sulu\Component\SmartContent\ContentType(${($_ = isset($this->services['sulu_content.smart_content.data_provider_pool']) ? $this->services['sulu_content.smart_content.data_provider_pool'] : $this->get('sulu_content.smart_content.data_provider_pool')) && false ?: '_'}, ${($_ = isset($this->services['sulu_tag.tag_manager']) ? $this->services['sulu_tag.tag_manager'] : $this->get('sulu_tag.tag_manager')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['sulu_tag.tag_request_handler']) ? $this->services['sulu_tag.tag_request_handler'] : $this->get('sulu_tag.tag_request_handler')) && false ?: '_'}, ${($_ = isset($this->services['sulu_category.category_request_handler']) ? $this->services['sulu_category.category_request_handler'] : $this->get('sulu_category.category_request_handler')) && false ?: '_'}, 'SuluContentBundle:Template:content-types/smart_content.html.twig', NULL);
    }

    /**
     * Gets the public 'sulu_content.smart_content.data_provider.content' shared service.
     *
     * @return \Sulu\Component\Content\SmartContent\ContentDataProvider
     */
    protected function getSuluContent_SmartContent_DataProvider_ContentService()
    {
        return $this->services['sulu_content.smart_content.data_provider.content'] = new \Sulu\Component\Content\SmartContent\ContentDataProvider(${($_ = isset($this->services['sulu_content.smart_content.data_provider.content.query_builder']) ? $this->services['sulu_content.smart_content.data_provider.content.query_builder'] : $this->getSuluContent_SmartContent_DataProvider_Content_QueryBuilderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.query_executor']) ? $this->services['sulu.content.query_executor'] : $this->get('sulu.content.query_executor')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.smart_content.data_provider.content.proxy_factory']) ? $this->services['sulu_content.smart_content.data_provider.content.proxy_factory'] : $this->get('sulu_content.smart_content.data_provider.content.proxy_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.reference_store.content']) ? $this->services['sulu_content.reference_store.content'] : $this->get('sulu_content.reference_store.content')) && false ?: '_'}, false);
    }

    /**
     * Gets the public 'sulu_content.smart_content.data_provider.content.proxy_factory' shared service.
     *
     * @return \ProxyManager\Factory\LazyLoadingValueHolderFactory
     */
    protected function getSuluContent_SmartContent_DataProvider_Content_ProxyFactoryService()
    {
        return $this->services['sulu_content.smart_content.data_provider.content.proxy_factory'] = new \ProxyManager\Factory\LazyLoadingValueHolderFactory(${($_ = isset($this->services['sulu_core.proxy_manager.configuration']) ? $this->services['sulu_core.proxy_manager.configuration'] : $this->getSuluCore_ProxyManager_ConfigurationService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.smart_content.data_provider_pool' shared service.
     *
     * @return \Sulu\Component\SmartContent\DataProviderPool
     */
    protected function getSuluContent_SmartContent_DataProviderPoolService()
    {
        $this->services['sulu_content.smart_content.data_provider_pool'] = $instance = new \Sulu\Component\SmartContent\DataProviderPool();

        $instance->add('contact', ${($_ = isset($this->services['sulu_contact.smart_content.data_provider.contact']) ? $this->services['sulu_contact.smart_content.data_provider.contact'] : $this->get('sulu_contact.smart_content.data_provider.contact')) && false ?: '_'});
        $instance->add('account', ${($_ = isset($this->services['sulu_contact.smart_content.data_provider.account']) ? $this->services['sulu_contact.smart_content.data_provider.account'] : $this->get('sulu_contact.smart_content.data_provider.account')) && false ?: '_'});
        $instance->add('media', ${($_ = isset($this->services['sulu_media.smart_content.data_provider.media']) ? $this->services['sulu_media.smart_content.data_provider.media'] : $this->get('sulu_media.smart_content.data_provider.media')) && false ?: '_'});
        $instance->add('snippet', ${($_ = isset($this->services['sulu_snippet.smart_content.snippet_data_provider']) ? $this->services['sulu_snippet.smart_content.snippet_data_provider'] : $this->get('sulu_snippet.smart_content.snippet_data_provider')) && false ?: '_'});
        $instance->add('content', ${($_ = isset($this->services['sulu_content.smart_content.data_provider.content']) ? $this->services['sulu_content.smart_content.data_provider.content'] : $this->get('sulu_content.smart_content.data_provider.content')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sulu_content.structure.factory' shared service.
     *
     * @return \Sulu\Component\Content\Metadata\Factory\StructureMetadataFactory
     */
    protected function getSuluContent_Structure_FactoryService()
    {
        return $this->services['sulu_content.structure.factory'] = new \Sulu\Component\Content\Metadata\Factory\StructureMetadataFactory(new \Sulu\Component\Content\Metadata\Loader\XmlLoader(${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_http_cache.cache_lifetime.resolver']) ? $this->services['sulu_http_cache.cache_lifetime.resolver'] : $this->get('sulu_http_cache.cache_lifetime.resolver')) && false ?: '_'}), array('page' => array(0 => array('path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/DependencyInjection/../Content/templates'), 'type' => 'page'), 1 => array('path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/DependencyInjection/../Content/templates'), 'type' => 'page'), 2 => array('path' => ($this->targetDirs[4].'/app/../vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/Content/templates'), 'type' => 'page'), 3 => array('path' => ($this->targetDirs[4].'/app/Resources/templates/pages'), 'type' => 'page')), 'home' => array(0 => array('path' => ($this->targetDirs[4].'/app/Resources/templates/pages'), 'type' => 'home')), 'snippet' => array(0 => array('path' => ($this->targetDirs[4].'/app/Resources/templates/snippets'), 'type' => 'snippet'))), array('snippet' => 'default'), (__DIR__.'/sulu/structures'), true);
    }

    /**
     * Gets the public 'sulu_content.teaser.content_type' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Teaser\TeaserContentType
     */
    protected function getSuluContent_Teaser_ContentTypeService()
    {
        return $this->services['sulu_content.teaser.content_type'] = new \Sulu\Bundle\ContentBundle\Teaser\TeaserContentType('SuluContentBundle:Template:content-types/teaser-selection.html.twig', ${($_ = isset($this->services['sulu_content.teaser.provider_pool']) ? $this->services['sulu_content.teaser.provider_pool'] : $this->get('sulu_content.teaser.provider_pool')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.teaser.manager']) ? $this->services['sulu_content.teaser.manager'] : $this->get('sulu_content.teaser.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.reference_store_pool']) ? $this->services['sulu_website.reference_store_pool'] : $this->get('sulu_website.reference_store_pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.teaser.manager' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Teaser\TeaserManager
     */
    protected function getSuluContent_Teaser_ManagerService()
    {
        return $this->services['sulu_content.teaser.manager'] = new \Sulu\Bundle\ContentBundle\Teaser\TeaserManager(${($_ = isset($this->services['sulu_content.teaser.provider_pool']) ? $this->services['sulu_content.teaser.provider_pool'] : $this->get('sulu_content.teaser.provider_pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.teaser.provider.content' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Teaser\ContentTeaserProvider
     */
    protected function getSuluContent_Teaser_Provider_ContentService()
    {
        return $this->services['sulu_content.teaser.provider.content'] = new \Sulu\Bundle\ContentBundle\Teaser\ContentTeaserProvider(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_content.teaser.provider_pool' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Teaser\Provider\TeaserProviderPool
     */
    protected function getSuluContent_Teaser_ProviderPoolService()
    {
        return $this->services['sulu_content.teaser.provider_pool'] = new \Sulu\Bundle\ContentBundle\Teaser\Provider\TeaserProviderPool(array('content' => ${($_ = isset($this->services['sulu_content.teaser.provider.content']) ? $this->services['sulu_content.teaser.provider.content'] : $this->get('sulu_content.teaser.provider.content')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_content.twig_extension' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Twig\ContentTwigExtension
     */
    protected function getSuluContent_TwigExtensionService()
    {
        return $this->services['sulu_content.twig_extension'] = new \Sulu\Bundle\ContentBundle\Twig\ContentTwigExtension(${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.array_serialization_visitor' shared service.
     *
     * @return \Sulu\Component\Serializer\ArraySerializationVisitor
     */
    protected function getSuluCore_ArraySerializationVisitorService()
    {
        return $this->services['sulu_core.array_serialization_visitor'] = new \Sulu\Component\Serializer\ArraySerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.build.builder.cache' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\Build\CacheBuilder
     */
    protected function getSuluCore_Build_Builder_CacheService()
    {
        return $this->services['sulu_core.build.builder.cache'] = new \Sulu\Bundle\CoreBundle\Build\CacheBuilder();
    }

    /**
     * Gets the public 'sulu_core.build.builder.database' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\Build\DatabaseBuilder
     */
    protected function getSuluCore_Build_Builder_DatabaseService()
    {
        return $this->services['sulu_core.build.builder.database'] = new \Sulu\Bundle\CoreBundle\Build\DatabaseBuilder();
    }

    /**
     * Gets the public 'sulu_core.build.builder.fixtures' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\Build\FixturesBuilder
     */
    protected function getSuluCore_Build_Builder_FixturesService()
    {
        return $this->services['sulu_core.build.builder.fixtures'] = new \Sulu\Bundle\CoreBundle\Build\FixturesBuilder();
    }

    /**
     * Gets the public 'sulu_core.build.builder.node_order' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Build\NodeOrderBuilder
     */
    protected function getSuluCore_Build_Builder_NodeOrderService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_core.build.builder.node_order'] = new \Sulu\Bundle\ContentBundle\Build\NodeOrderBuilder(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, $a, $a, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.build.builder.phpcr' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\Build\PhpcrBuilder
     */
    protected function getSuluCore_Build_Builder_PhpcrService()
    {
        return $this->services['sulu_core.build.builder.phpcr'] = new \Sulu\Bundle\CoreBundle\Build\PhpcrBuilder();
    }

    /**
     * Gets the public 'sulu_core.build.builder.phpcr_migrations' shared service.
     *
     * @return \Sulu\Bundle\CoreBundle\Build\PhpcrMigrationsBuilder
     */
    protected function getSuluCore_Build_Builder_PhpcrMigrationsService()
    {
        return $this->services['sulu_core.build.builder.phpcr_migrations'] = new \Sulu\Bundle\CoreBundle\Build\PhpcrMigrationsBuilder();
    }

    /**
     * Gets the public 'sulu_core.cache.memoize' shared service.
     *
     * @return \Sulu\Component\Cache\Memoize
     */
    protected function getSuluCore_Cache_MemoizeService()
    {
        return $this->services['sulu_core.cache.memoize'] = new \Sulu\Component\Cache\Memoize(${($_ = isset($this->services['sulu_core.cache.memoize.cache']) ? $this->services['sulu_core.cache.memoize.cache'] : $this->get('sulu_core.cache.memoize.cache')) && false ?: '_'}, 1);
    }

    /**
     * Gets the public 'sulu_core.cache.memoize.cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getSuluCore_Cache_Memoize_CacheService()
    {
        return $this->services['sulu_core.cache.memoize.cache'] = new \Doctrine\Common\Cache\ArrayCache();
    }

    /**
     * Gets the public 'sulu_core.doctrine.references' shared service.
     *
     * @return \Sulu\Component\Doctrine\ReferencesOption
     */
    protected function getSuluCore_Doctrine_ReferencesService()
    {
        return $this->services['sulu_core.doctrine.references'] = new \Sulu\Component\Doctrine\ReferencesOption(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.doctrine_list_builder_factory' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Doctrine\DoctrineListBuilderFactory
     */
    protected function getSuluCore_DoctrineListBuilderFactoryService()
    {
        return $this->services['sulu_core.doctrine_list_builder_factory'] = new \Sulu\Component\Rest\ListBuilder\Doctrine\DoctrineListBuilderFactory(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, array('view' => 64, 'add' => 32, 'edit' => 16, 'delete' => 8, 'archive' => 4, 'live' => 2, 'security' => 1));
    }

    /**
     * Gets the public 'sulu_core.doctrine_rest_helper' shared service.
     *
     * @return \Sulu\Component\Rest\DoctrineRestHelper
     */
    protected function getSuluCore_DoctrineRestHelperService()
    {
        return $this->services['sulu_core.doctrine_rest_helper'] = new \Sulu\Component\Rest\DoctrineRestHelper(${($_ = isset($this->services['sulu_core.list_rest_helper']) ? $this->services['sulu_core.list_rest_helper'] : $this->get('sulu_core.list_rest_helper')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.list_builder.field_descriptor_factory' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Metadata\FieldDescriptorFactory
     */
    protected function getSuluCore_ListBuilder_FieldDescriptorFactoryService()
    {
        return $this->services['sulu_core.list_builder.field_descriptor_factory'] = new \Sulu\Component\Rest\ListBuilder\Metadata\FieldDescriptorFactory(${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.chain']) ? $this->services['sulu_core.list_builder.metadata.provider.chain'] : $this->get('sulu_core.list_builder.metadata.provider.chain')) && false ?: '_'}, (__DIR__.'/sulu/field_descriptor'), true);
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.file_locator' shared service.
     *
     * @return \Metadata\Driver\FileLocator
     */
    protected function getSuluCore_ListBuilder_Metadata_FileLocatorService()
    {
        return $this->services['sulu_core.list_builder.metadata.file_locator'] = new \Metadata\Driver\FileLocator(array('Sulu\\Bundle\\ContactBundle\\Entity' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/config/list-builder'), 'Sulu\\Bundle\\MediaBundle\\Entity' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/config/list-builder'), 'Sulu\\Bundle\\CategoryBundle\\Entity' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/config/list-builder')));
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ParameterBag
     */
    protected function getSuluCore_ListBuilder_Metadata_ParameterBagService()
    {
        return $this->services['sulu_core.list_builder.metadata.parameter_bag'] = $this->getParameterBag();
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.chain' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Metadata\Provider\ChainProvider
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_ChainService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.chain'] = new \Sulu\Component\Rest\ListBuilder\Metadata\Provider\ChainProvider(array(0 => ${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.general']) ? $this->services['sulu_core.list_builder.metadata.provider.general'] : $this->get('sulu_core.list_builder.metadata.provider.general')) && false ?: '_'}, 1 => ${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.doctrine']) ? $this->services['sulu_core.list_builder.metadata.provider.doctrine'] : $this->get('sulu_core.list_builder.metadata.provider.doctrine')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.doctrine' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Metadata\Provider\MetadataProvider
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_DoctrineService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.doctrine'] = new \Sulu\Component\Rest\ListBuilder\Metadata\Provider\MetadataProvider(${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.doctrine.factory']) ? $this->services['sulu_core.list_builder.metadata.provider.doctrine.factory'] : $this->get('sulu_core.list_builder.metadata.provider.doctrine.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.doctrine.cache' shared service.
     *
     * @return \Metadata\Cache\FileCache
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_Doctrine_CacheService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.doctrine.cache'] = new \Metadata\Cache\FileCache((__DIR__.'/sulu/list-builder/doctrine'));
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.doctrine.driver.xml' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Metadata\Doctrine\Driver\XmlDriver
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_Doctrine_Driver_XmlService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.doctrine.driver.xml'] = new \Sulu\Component\Rest\ListBuilder\Metadata\Doctrine\Driver\XmlDriver(${($_ = isset($this->services['sulu_core.list_builder.metadata.file_locator']) ? $this->services['sulu_core.list_builder.metadata.file_locator'] : $this->get('sulu_core.list_builder.metadata.file_locator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.list_builder.metadata.parameter_bag']) ? $this->services['sulu_core.list_builder.metadata.parameter_bag'] : $this->get('sulu_core.list_builder.metadata.parameter_bag')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.doctrine.factory' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_Doctrine_FactoryService()
    {
        $this->services['sulu_core.list_builder.metadata.provider.doctrine.factory'] = $instance = new \Metadata\MetadataFactory(${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.doctrine.driver.xml']) ? $this->services['sulu_core.list_builder.metadata.provider.doctrine.driver.xml'] : $this->get('sulu_core.list_builder.metadata.provider.doctrine.driver.xml')) && false ?: '_'}, 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.doctrine.cache']) ? $this->services['sulu_core.list_builder.metadata.provider.doctrine.cache'] : $this->get('sulu_core.list_builder.metadata.provider.doctrine.cache')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.general' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Metadata\Provider\MetadataProvider
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_GeneralService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.general'] = new \Sulu\Component\Rest\ListBuilder\Metadata\Provider\MetadataProvider(${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.general.factory']) ? $this->services['sulu_core.list_builder.metadata.provider.general.factory'] : $this->get('sulu_core.list_builder.metadata.provider.general.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.general.cache' shared service.
     *
     * @return \Metadata\Cache\FileCache
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_General_CacheService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.general.cache'] = new \Metadata\Cache\FileCache((__DIR__.'/sulu/list-builder/general'));
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.general.driver.xml' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Metadata\General\Driver\XmlDriver
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_General_Driver_XmlService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.general.driver.xml'] = new \Sulu\Component\Rest\ListBuilder\Metadata\General\Driver\XmlDriver(${($_ = isset($this->services['sulu_core.list_builder.metadata.file_locator']) ? $this->services['sulu_core.list_builder.metadata.file_locator'] : $this->get('sulu_core.list_builder.metadata.file_locator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.list_builder.metadata.parameter_bag']) ? $this->services['sulu_core.list_builder.metadata.parameter_bag'] : $this->get('sulu_core.list_builder.metadata.parameter_bag')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.general.event_subscriber' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\Metadata\Listener\GeneralMetadataSerializeSubscriber
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_General_EventSubscriberService()
    {
        return $this->services['sulu_core.list_builder.metadata.provider.general.event_subscriber'] = new \Sulu\Component\Rest\ListBuilder\Metadata\Listener\GeneralMetadataSerializeSubscriber();
    }

    /**
     * Gets the public 'sulu_core.list_builder.metadata.provider.general.factory' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getSuluCore_ListBuilder_Metadata_Provider_General_FactoryService()
    {
        $this->services['sulu_core.list_builder.metadata.provider.general.factory'] = $instance = new \Metadata\MetadataFactory(${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.general.driver.xml']) ? $this->services['sulu_core.list_builder.metadata.provider.general.driver.xml'] : $this->get('sulu_core.list_builder.metadata.provider.general.driver.xml')) && false ?: '_'}, 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(${($_ = isset($this->services['sulu_core.list_builder.metadata.provider.general.cache']) ? $this->services['sulu_core.list_builder.metadata.provider.general.cache'] : $this->get('sulu_core.list_builder.metadata.provider.general.cache')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sulu_core.list_rest_helper' shared service.
     *
     * @return \Sulu\Component\Rest\ListBuilder\ListRestHelper
     */
    protected function getSuluCore_ListRestHelperService()
    {
        return $this->services['sulu_core.list_rest_helper'] = new \Sulu\Component\Rest\ListBuilder\ListRestHelper(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.request_processor.parameter' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\Attributes\ParameterRequestProcessor
     */
    protected function getSuluCore_RequestProcessor_ParameterService()
    {
        return $this->services['sulu_core.request_processor.parameter'] = new \Sulu\Component\Webspace\Analyzer\Attributes\ParameterRequestProcessor(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_core.request_processor.portal_information' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\Attributes\PortalInformationRequestProcessor
     */
    protected function getSuluCore_RequestProcessor_PortalInformationService()
    {
        return $this->services['sulu_core.request_processor.portal_information'] = new \Sulu\Component\Webspace\Analyzer\Attributes\PortalInformationRequestProcessor();
    }

    /**
     * Gets the public 'sulu_core.request_processor.url' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\Attributes\UrlRequestProcessor
     */
    protected function getSuluCore_RequestProcessor_UrlService()
    {
        return $this->services['sulu_core.request_processor.url'] = new \Sulu\Component\Webspace\Analyzer\Attributes\UrlRequestProcessor();
    }

    /**
     * Gets the public 'sulu_core.request_processor.website' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\Attributes\WebsiteRequestProcessor
     */
    protected function getSuluCore_RequestProcessor_WebsiteService()
    {
        return $this->services['sulu_core.request_processor.website'] = new \Sulu\Component\Webspace\Analyzer\Attributes\WebsiteRequestProcessor(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager.url_replacer']) ? $this->services['sulu_core.webspace.webspace_manager.url_replacer'] : $this->get('sulu_core.webspace.webspace_manager.url_replacer')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_core.rest.datetime_handler' shared service.
     *
     * @return \Sulu\Component\Rest\Handler\DateHandler
     */
    protected function getSuluCore_Rest_DatetimeHandlerService()
    {
        return $this->services['sulu_core.rest.datetime_handler'] = new \Sulu\Component\Rest\Handler\DateHandler();
    }

    /**
     * Gets the public 'sulu_core.rest.exception_wrapper_handler' shared service.
     *
     * @return \Sulu\Component\Rest\ExceptionWrapperHandler
     */
    protected function getSuluCore_Rest_ExceptionWrapperHandlerService()
    {
        return $this->services['sulu_core.rest.exception_wrapper_handler'] = new \Sulu\Component\Rest\ExceptionWrapperHandler('dev');
    }

    /**
     * Gets the public 'sulu_core.rest.view_handler.csv' shared service.
     *
     * @return \Sulu\Component\Rest\Csv\CsvHandler
     */
    protected function getSuluCore_Rest_ViewHandler_CsvService()
    {
        return $this->services['sulu_core.rest.view_handler.csv'] = new \Sulu\Component\Rest\Csv\CsvHandler(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.rest_helper' shared service.
     *
     * @return \Sulu\Component\Rest\RestHelper
     */
    protected function getSuluCore_RestHelperService()
    {
        return $this->services['sulu_core.rest_helper'] = new \Sulu\Component\Rest\RestHelper(${($_ = isset($this->services['sulu_core.list_rest_helper']) ? $this->services['sulu_core.list_rest_helper'] : $this->get('sulu_core.list_rest_helper')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.webspace.document_manager.webspace_initializer' shared service.
     *
     * @return \Sulu\Component\Webspace\Document\Initializer\WebspaceInitializer
     */
    protected function getSuluCore_Webspace_DocumentManager_WebspaceInitializerService()
    {
        return $this->services['sulu_core.webspace.document_manager.webspace_initializer'] = new \Sulu\Component\Webspace\Document\Initializer\WebspaceInitializer(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_builder']) ? $this->services['sulu_document_manager.path_builder'] : $this->getSuluDocumentManager_PathBuilderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.webspace.loader.delegator' shared service.
     *
     * @return \Symfony\Component\Config\Loader\DelegatingLoader
     */
    protected function getSuluCore_Webspace_Loader_DelegatorService()
    {
        return $this->services['sulu_core.webspace.loader.delegator'] = new \Symfony\Component\Config\Loader\DelegatingLoader(${($_ = isset($this->services['sulu_core.webspace.loader.resolver']) ? $this->services['sulu_core.webspace.loader.resolver'] : $this->get('sulu_core.webspace.loader.resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.webspace.loader.resolver' shared service.
     *
     * @return \Symfony\Component\Config\Loader\LoaderResolver
     */
    protected function getSuluCore_Webspace_Loader_ResolverService()
    {
        return $this->services['sulu_core.webspace.loader.resolver'] = new \Symfony\Component\Config\Loader\LoaderResolver(array(0 => ${($_ = isset($this->services['sulu_core.webspace.loader.xml.1.1']) ? $this->services['sulu_core.webspace.loader.xml.1.1'] : $this->get('sulu_core.webspace.loader.xml.1.1')) && false ?: '_'}, 1 => ${($_ = isset($this->services['sulu_core.webspace.loader.xml.1.0']) ? $this->services['sulu_core.webspace.loader.xml.1.0'] : $this->get('sulu_core.webspace.loader.xml.1.0')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_core.webspace.loader.xml.1.0' shared service.
     *
     * @return \Sulu\Component\Webspace\Loader\XmlFileLoader10
     */
    protected function getSuluCore_Webspace_Loader_Xml_1_0Service()
    {
        return $this->services['sulu_core.webspace.loader.xml.1.0'] = new \Sulu\Component\Webspace\Loader\XmlFileLoader10(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.webspace.loader.xml.1.1' shared service.
     *
     * @return \Sulu\Component\Webspace\Loader\XmlFileLoader11
     */
    protected function getSuluCore_Webspace_Loader_Xml_1_1Service()
    {
        return $this->services['sulu_core.webspace.loader.xml.1.1'] = new \Sulu\Component\Webspace\Loader\XmlFileLoader11(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.webspace.request_analyzer' shared service.
     *
     * @return \Sulu\Component\Webspace\Analyzer\RequestAnalyzer
     */
    protected function getSuluCore_Webspace_RequestAnalyzerService()
    {
        return $this->services['sulu_core.webspace.request_analyzer'] = new \Sulu\Component\Webspace\Analyzer\RequestAnalyzer(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, array(0 => ${($_ = isset($this->services['sulu_core.request_processor.parameter']) ? $this->services['sulu_core.request_processor.parameter'] : $this->get('sulu_core.request_processor.parameter')) && false ?: '_'}, 1 => ${($_ = isset($this->services['sulu_core.request_processor.url']) ? $this->services['sulu_core.request_processor.url'] : $this->get('sulu_core.request_processor.url')) && false ?: '_'}, 2 => ${($_ = isset($this->services['sulu_custom_urls.request_processor']) ? $this->services['sulu_custom_urls.request_processor'] : $this->get('sulu_custom_urls.request_processor')) && false ?: '_'}, 3 => ${($_ = isset($this->services['sulu_core.request_processor.website']) ? $this->services['sulu_core.request_processor.website'] : $this->get('sulu_core.request_processor.website')) && false ?: '_'}, 4 => ${($_ = isset($this->services['sulu_core.request_processor.portal_information']) ? $this->services['sulu_core.request_processor.portal_information'] : $this->get('sulu_core.request_processor.portal_information')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_core.webspace.settings_manager' shared service.
     *
     * @return \Sulu\Component\Webspace\Settings\SettingsManager
     */
    protected function getSuluCore_Webspace_SettingsManagerService()
    {
        return $this->services['sulu_core.webspace.settings_manager'] = new \Sulu\Component\Webspace\Settings\SettingsManager(${($_ = isset($this->services['sulu_document_manager.session_manager']) ? $this->services['sulu_document_manager.session_manager'] : $this->get('sulu_document_manager.session_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_core.webspace.url_provider' shared service.
     *
     * @return \Sulu\Component\Webspace\Url\WebspaceUrlChainProvider
     */
    protected function getSuluCore_Webspace_UrlProviderService()
    {
        return $this->services['sulu_core.webspace.url_provider'] = new \Sulu\Component\Webspace\Url\WebspaceUrlChainProvider(array(0 => ${($_ = isset($this->services['sulu_core.webspace.url_provider.default']) ? $this->services['sulu_core.webspace.url_provider.default'] : $this->get('sulu_core.webspace.url_provider.default')) && false ?: '_'}, 1 => ${($_ = isset($this->services['sulu_custom_urls.url_provider']) ? $this->services['sulu_custom_urls.url_provider'] : $this->get('sulu_custom_urls.url_provider')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_core.webspace.url_provider.default' shared service.
     *
     * @return \Sulu\Component\Webspace\Url\WebspaceUrlProvider
     */
    protected function getSuluCore_Webspace_UrlProvider_DefaultService()
    {
        return $this->services['sulu_core.webspace.url_provider.default'] = new \Sulu\Component\Webspace\Url\WebspaceUrlProvider();
    }

    /**
     * Gets the public 'sulu_core.webspace.webspace_manager' shared service.
     *
     * @return \Sulu\Component\Webspace\Manager\WebspaceManager
     */
    protected function getSuluCore_Webspace_WebspaceManagerService()
    {
        return $this->services['sulu_core.webspace.webspace_manager'] = new \Sulu\Component\Webspace\Manager\WebspaceManager(${($_ = isset($this->services['sulu_core.webspace.loader.delegator']) ? $this->services['sulu_core.webspace.loader.delegator'] : $this->get('sulu_core.webspace.loader.delegator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager.url_replacer']) ? $this->services['sulu_core.webspace.webspace_manager.url_replacer'] : $this->get('sulu_core.webspace.webspace_manager.url_replacer')) && false ?: '_'}, array('config_dir' => ($this->targetDirs[4].'/app/Resources/webspaces'), 'cache_dir' => (__DIR__.'/sulu'), 'debug' => true, 'cache_class' => 'websiteWebspaceCollectionCache', 'base_class' => 'WebspaceCollection'));
    }

    /**
     * Gets the public 'sulu_core.webspace.webspace_manager.url_replacer' shared service.
     *
     * @return \Sulu\Component\Webspace\Url\Replacer
     */
    protected function getSuluCore_Webspace_WebspaceManager_UrlReplacerService()
    {
        return $this->services['sulu_core.webspace.webspace_manager.url_replacer'] = new \Sulu\Component\Webspace\Url\Replacer();
    }

    /**
     * Gets the public 'sulu_custom_urls.domain_generator' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Generator\Generator
     */
    protected function getSuluCustomUrls_DomainGeneratorService()
    {
        return $this->services['sulu_custom_urls.domain_generator'] = new \Sulu\Component\CustomUrl\Generator\Generator(${($_ = isset($this->services['sulu_core.webspace.webspace_manager.url_replacer']) ? $this->services['sulu_core.webspace.webspace_manager.url_replacer'] : $this->get('sulu_core.webspace.webspace_manager.url_replacer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.initializer' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Document\Initializer\CustomUrlInitializer
     */
    protected function getSuluCustomUrls_InitializerService()
    {
        return $this->services['sulu_custom_urls.initializer'] = new \Sulu\Component\CustomUrl\Document\Initializer\CustomUrlInitializer(${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_builder']) ? $this->services['sulu_document_manager.path_builder'] : $this->getSuluDocumentManager_PathBuilderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.invalidate.subscriber' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Document\Subscriber\InvalidateSubscriber
     */
    protected function getSuluCustomUrls_Invalidate_SubscriberService()
    {
        return $this->services['sulu_custom_urls.invalidate.subscriber'] = new \Sulu\Component\CustomUrl\Document\Subscriber\InvalidateSubscriber(${($_ = isset($this->services['sulu_custom_urls.manager']) ? $this->services['sulu_custom_urls.manager'] : $this->get('sulu_custom_urls.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.manager' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Manager\CustomUrlManager
     */
    protected function getSuluCustomUrls_ManagerService()
    {
        return $this->services['sulu_custom_urls.manager'] = new \Sulu\Component\CustomUrl\Manager\CustomUrlManager(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_custom_urls.repository']) ? $this->services['sulu_custom_urls.repository'] : $this->get('sulu_custom_urls.repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_builder']) ? $this->services['sulu_document_manager.path_builder'] : $this->getSuluDocumentManager_PathBuilderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_http_cache.handler.aggregate']) ? $this->services['sulu_http_cache.handler.aggregate'] : $this->get('sulu_http_cache.handler.aggregate')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.repository' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Repository\CustomUrlRepository
     */
    protected function getSuluCustomUrls_RepositoryService()
    {
        return $this->services['sulu_custom_urls.repository'] = new \Sulu\Component\CustomUrl\Repository\CustomUrlRepository(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.content_repository']) ? $this->services['sulu_content.content_repository'] : $this->get('sulu_content.content_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_custom_urls.domain_generator']) ? $this->services['sulu_custom_urls.domain_generator'] : $this->get('sulu_custom_urls.domain_generator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_security.user_manager']) ? $this->services['sulu_security.user_manager'] : $this->get('sulu_security.user_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.request_processor' shared service.
     *
     * @return \Sulu\Bundle\CustomUrlBundle\Request\CustomUrlRequestProcessor
     */
    protected function getSuluCustomUrls_RequestProcessorService()
    {
        return $this->services['sulu_custom_urls.request_processor'] = new \Sulu\Bundle\CustomUrlBundle\Request\CustomUrlRequestProcessor(${($_ = isset($this->services['sulu_custom_urls.manager']) ? $this->services['sulu_custom_urls.manager'] : $this->get('sulu_custom_urls.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_custom_urls.domain_generator']) ? $this->services['sulu_custom_urls.domain_generator'] : $this->get('sulu_custom_urls.domain_generator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.generator' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\ProviderBasedGenerator
     */
    protected function getSuluCustomUrls_Routing_GeneratorService()
    {
        return $this->services['sulu_custom_urls.routing.generator'] = new \Symfony\Cmf\Component\Routing\ProviderBasedGenerator(${($_ = isset($this->services['sulu_custom_urls.routing.provider']) ? $this->services['sulu_custom_urls.routing.provider'] : $this->get('sulu_custom_urls.routing.provider')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.nested_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher
     */
    protected function getSuluCustomUrls_Routing_NestedMatcherService()
    {
        return $this->services['sulu_custom_urls.routing.nested_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher(${($_ = isset($this->services['sulu_custom_urls.routing.provider']) ? $this->services['sulu_custom_urls.routing.provider'] : $this->get('sulu_custom_urls.routing.provider')) && false ?: '_'}, ${($_ = isset($this->services['cmf_sulu_custom_urls.final_matcher']) ? $this->services['cmf_sulu_custom_urls.final_matcher'] : $this->get('cmf_sulu_custom_urls.final_matcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.provider' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\CustomUrlRouteProvider
     */
    protected function getSuluCustomUrls_Routing_ProviderService()
    {
        return $this->services['sulu_custom_urls.routing.provider'] = new \Sulu\Component\CustomUrl\Routing\CustomUrlRouteProvider(${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_builder']) ? $this->services['sulu_document_manager.path_builder'] : $this->getSuluDocumentManager_PathBuilderService()) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.content' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\ContentEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_ContentService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.content'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\ContentEnhancer(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.external_link' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\ExternalLinkEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_ExternalLinkService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.external_link'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\ExternalLinkEnhancer();
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.internal_link' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\InternalLinkEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_InternalLinkService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.internal_link'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\InternalLinkEnhancer();
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.redirect' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\RedirectEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_RedirectService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.redirect'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\RedirectEnhancer(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.seo' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\SeoEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_SeoService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.seo'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\SeoEnhancer(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.structure' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\StructureEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_StructureService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.structure'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\StructureEnhancer();
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.trailing_html' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\TrailingHTMLEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_TrailingHtmlService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.trailing_html'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\TrailingHTMLEnhancer();
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.route_enhancers.trailing_slash' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Routing\Enhancers\TrailingSlashEnhancer
     */
    protected function getSuluCustomUrls_Routing_RouteEnhancers_TrailingSlashService()
    {
        return $this->services['sulu_custom_urls.routing.route_enhancers.trailing_slash'] = new \Sulu\Component\CustomUrl\Routing\Enhancers\TrailingSlashEnhancer();
    }

    /**
     * Gets the public 'sulu_custom_urls.routing.router' shared service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter
     */
    protected function getSuluCustomUrls_Routing_RouterService()
    {
        $this->services['sulu_custom_urls.routing.router'] = $instance = new \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter(${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_custom_urls.routing.nested_matcher']) ? $this->services['sulu_custom_urls.routing.nested_matcher'] : $this->get('sulu_custom_urls.routing.nested_matcher')) && false ?: '_'}, ${($_ = isset($this->services['sulu_custom_urls.routing.generator']) ? $this->services['sulu_custom_urls.routing.generator'] : $this->get('sulu_custom_urls.routing.generator')) && false ?: '_'}, NULL, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['sulu_custom_urls.routing.provider']) ? $this->services['sulu_custom_urls.routing.provider'] : $this->get('sulu_custom_urls.routing.provider')) && false ?: '_'});

        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.trailing_slash']) ? $this->services['sulu_custom_urls.routing.route_enhancers.trailing_slash'] : $this->get('sulu_custom_urls.routing.route_enhancers.trailing_slash')) && false ?: '_'}, 100);
        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.trailing_html']) ? $this->services['sulu_custom_urls.routing.route_enhancers.trailing_html'] : $this->get('sulu_custom_urls.routing.route_enhancers.trailing_html')) && false ?: '_'}, 90);
        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.redirect']) ? $this->services['sulu_custom_urls.routing.route_enhancers.redirect'] : $this->get('sulu_custom_urls.routing.route_enhancers.redirect')) && false ?: '_'}, 80);
        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.seo']) ? $this->services['sulu_custom_urls.routing.route_enhancers.seo'] : $this->get('sulu_custom_urls.routing.route_enhancers.seo')) && false ?: '_'}, 70);
        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.content']) ? $this->services['sulu_custom_urls.routing.route_enhancers.content'] : $this->get('sulu_custom_urls.routing.route_enhancers.content')) && false ?: '_'}, 60);
        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.internal_link']) ? $this->services['sulu_custom_urls.routing.route_enhancers.internal_link'] : $this->get('sulu_custom_urls.routing.route_enhancers.internal_link')) && false ?: '_'}, 50);
        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.structure']) ? $this->services['sulu_custom_urls.routing.route_enhancers.structure'] : $this->get('sulu_custom_urls.routing.route_enhancers.structure')) && false ?: '_'}, 40);
        $instance->addRouteEnhancer(${($_ = isset($this->services['sulu_custom_urls.routing.route_enhancers.external_link']) ? $this->services['sulu_custom_urls.routing.route_enhancers.external_link'] : $this->get('sulu_custom_urls.routing.route_enhancers.external_link')) && false ?: '_'}, 30);

        return $instance;
    }

    /**
     * Gets the public 'sulu_custom_urls.subscriber' shared service.
     *
     * @return \Sulu\Component\CustomUrl\Document\Subscriber\CustomUrlSubscriber
     */
    protected function getSuluCustomUrls_SubscriberService()
    {
        return $this->services['sulu_custom_urls.subscriber'] = new \Sulu\Component\CustomUrl\Document\Subscriber\CustomUrlSubscriber(${($_ = isset($this->services['sulu_custom_urls.domain_generator']) ? $this->services['sulu_custom_urls.domain_generator'] : $this->get('sulu_custom_urls.domain_generator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_builder']) ? $this->services['sulu_document_manager.path_builder'] : $this->getSuluDocumentManager_PathBuilderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_custom_urls.url_provider' shared service.
     *
     * @return \Sulu\Component\CustomUrl\WebspaceCustomUrlProvider
     */
    protected function getSuluCustomUrls_UrlProviderService()
    {
        return $this->services['sulu_custom_urls.url_provider'] = new \Sulu\Component\CustomUrl\WebspaceCustomUrlProvider(${($_ = isset($this->services['sulu_custom_urls.manager']) ? $this->services['sulu_custom_urls.manager'] : $this->get('sulu_custom_urls.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.command.fixtures_load' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Command\FixturesLoadCommand
     */
    protected function getSuluDocumentManager_Command_FixturesLoadService()
    {
        return $this->services['sulu_document_manager.command.fixtures_load'] = new \Sulu\Bundle\DocumentManagerBundle\Command\FixturesLoadCommand(${($_ = isset($this->services['sulu_document_manager.data_fixtures.loader']) ? $this->services['sulu_document_manager.data_fixtures.loader'] : $this->get('sulu_document_manager.data_fixtures.loader')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.data_fixtures.executor']) ? $this->services['sulu_document_manager.data_fixtures.executor'] : $this->get('sulu_document_manager.data_fixtures.executor')) && false ?: '_'}, ${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.command.initialize' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Command\InitializeCommand
     */
    protected function getSuluDocumentManager_Command_InitializeService()
    {
        return $this->services['sulu_document_manager.command.initialize'] = new \Sulu\Bundle\DocumentManagerBundle\Command\InitializeCommand(${($_ = isset($this->services['sulu_document_manager.initializer']) ? $this->services['sulu_document_manager.initializer'] : $this->get('sulu_document_manager.initializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.data_fixtures.executor' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\DataFixtures\DocumentExecutor
     */
    protected function getSuluDocumentManager_DataFixtures_ExecutorService()
    {
        return $this->services['sulu_document_manager.data_fixtures.executor'] = new \Sulu\Bundle\DocumentManagerBundle\DataFixtures\DocumentExecutor(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.initializer']) ? $this->services['sulu_document_manager.initializer'] : $this->get('sulu_document_manager.initializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.data_fixtures.loader' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\DataFixtures\DocumentFixtureLoader
     */
    protected function getSuluDocumentManager_DataFixtures_LoaderService()
    {
        return $this->services['sulu_document_manager.data_fixtures.loader'] = new \Sulu\Bundle\DocumentManagerBundle\DataFixtures\DocumentFixtureLoader($this);
    }

    /**
     * Gets the public 'sulu_document_manager.decorated_default_session' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Session\Session
     */
    protected function getSuluDocumentManager_DecoratedDefaultSessionService()
    {
        return $this->services['sulu_document_manager.decorated_default_session'] = new \Sulu\Bundle\DocumentManagerBundle\Session\Session(${($_ = isset($this->services['doctrine_phpcr.jackalope.repository.live']) ? $this->services['doctrine_phpcr.jackalope.repository.live'] : $this->get('doctrine_phpcr.jackalope.repository.live')) && false ?: '_'}->login(new \PHPCR\SimpleCredentials('admin', 'admin'), 'default_live'));
    }

    /**
     * Gets the public 'sulu_document_manager.decorated_live_session' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Session\Session
     */
    protected function getSuluDocumentManager_DecoratedLiveSessionService()
    {
        return $this->services['sulu_document_manager.decorated_live_session'] = new \Sulu\Bundle\DocumentManagerBundle\Session\Session(${($_ = isset($this->services['sulu_document_manager.decorated_default_session']) ? $this->services['sulu_document_manager.decorated_default_session'] : $this->get('sulu_document_manager.decorated_default_session')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.compat.content_mapper' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\Compat\ContentMapperSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_Compat_ContentMapperService()
    {
        return $this->services['sulu_document_manager.document.subscriber.compat.content_mapper'] = new \Sulu\Component\Content\Document\Subscriber\Compat\ContentMapperSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu.util.node_helper']) ? $this->services['sulu.util.node_helper'] : $this->get('sulu.util.node_helper')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.extension' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\ExtensionSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_ExtensionService()
    {
        return $this->services['sulu_document_manager.document.subscriber.extension'] = new \Sulu\Component\Content\Document\Subscriber\ExtensionSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.namespace_registry']) ? $this->services['sulu_document_manager.namespace_registry'] : $this->getSuluDocumentManager_NamespaceRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.fallback_localization' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\FallbackLocalizationSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_FallbackLocalizationService()
    {
        return $this->services['sulu_document_manager.document.subscriber.fallback_localization'] = new \Sulu\Component\Content\Document\Subscriber\FallbackLocalizationSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.localization_finder']) ? $this->services['sulu.content.localization_finder'] : $this->get('sulu.content.localization_finder')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.order' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\OrderSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_OrderService()
    {
        return $this->services['sulu_document_manager.document.subscriber.order'] = new \Sulu\Component\Content\Document\Subscriber\OrderSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.publish' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Document\Subscriber\PublishSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_PublishService()
    {
        return $this->services['sulu_document_manager.document.subscriber.publish'] = new \Sulu\Bundle\ContentBundle\Document\Subscriber\PublishSubscriber(${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_helper']) ? $this->services['sulu_document_manager.node_helper'] : $this->get('sulu_document_manager.node_helper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.robot' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\RobotSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_RobotService()
    {
        return $this->services['sulu_document_manager.document.subscriber.robot'] = new \Sulu\Component\Content\Document\Subscriber\RobotSubscriber();
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.route' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\RouteSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_RouteService()
    {
        return $this->services['sulu_document_manager.document.subscriber.route'] = new \Sulu\Component\Content\Document\Subscriber\RouteSubscriber(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.security' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\SecuritySubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_SecurityService()
    {
        return $this->services['sulu_document_manager.document.subscriber.security'] = new \Sulu\Component\Content\Document\Subscriber\SecuritySubscriber(array('view' => 64, 'add' => 32, 'edit' => 16, 'delete' => 8, 'archive' => 4, 'live' => 2, 'security' => 1));
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.shadow_copy_properties' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\ShadowCopyPropertiesSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_ShadowCopyPropertiesService()
    {
        return $this->services['sulu_document_manager.document.subscriber.shadow_copy_properties'] = new \Sulu\Component\Content\Document\Subscriber\ShadowCopyPropertiesSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.shadow_locale' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\ShadowLocaleSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_ShadowLocaleService()
    {
        return $this->services['sulu_document_manager.document.subscriber.shadow_locale'] = new \Sulu\Component\Content\Document\Subscriber\ShadowLocaleSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.target' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\TargetSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_TargetService()
    {
        return $this->services['sulu_document_manager.document.subscriber.target'] = new \Sulu\Component\Content\Document\Subscriber\TargetSubscriber();
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.title' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\TitleSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_TitleService()
    {
        return $this->services['sulu_document_manager.document.subscriber.title'] = new \Sulu\Component\Content\Document\Subscriber\TitleSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.webspace' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\WebspaceSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_WebspaceService()
    {
        return $this->services['sulu_document_manager.document.subscriber.webspace'] = new \Sulu\Component\Content\Document\Subscriber\WebspaceSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document.subscriber.workflow_stage' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\WorkflowStageSubscriber
     */
    protected function getSuluDocumentManager_Document_Subscriber_WorkflowStageService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_document_manager.document.subscriber.workflow_stage'] = new \Sulu\Component\Content\Document\Subscriber\WorkflowStageSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, $a, $a);
    }

    /**
     * Gets the public 'sulu_document_manager.document_inspector' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\DocumentInspector
     */
    protected function getSuluDocumentManager_DocumentInspectorService()
    {
        return $this->services['sulu_document_manager.document_inspector'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\DocumentInspector(${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_segment_registry']) ? $this->services['sulu_document_manager.path_segment_registry'] : $this->get('sulu_document_manager.path_segment_registry')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.namespace_registry']) ? $this->services['sulu_document_manager.namespace_registry'] : $this->getSuluDocumentManager_NamespaceRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.proxy_factory']) ? $this->services['sulu_document_manager.proxy_factory'] : $this->get('sulu_document_manager.proxy_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.structure.factory']) ? $this->services['sulu_content.structure.factory'] : $this->get('sulu_content.structure.factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.document_manager' shared service.
     *
     * @return \Sulu\Component\DocumentManager\DocumentManager
     */
    protected function getSuluDocumentManager_DocumentManagerService()
    {
        return $this->services['sulu_document_manager.document_manager'] = new \Sulu\Component\DocumentManager\DocumentManager(${($_ = isset($this->services['sulu_document_manager.event_dispatcher']) ? $this->services['sulu_document_manager.event_dispatcher'] : $this->get('sulu_document_manager.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher
     */
    protected function getSuluDocumentManager_EventDispatcherService()
    {
        $this->services['sulu_document_manager.event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this);

        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.search.event_subscriber.structure']) ? $this->services['sulu_content.search.event_subscriber.structure'] : $this->get('sulu_content.search.event_subscriber.structure')) && false ?: '_'};
        }, 1 => 'indexPersistedDocument'), -10);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.search.event_subscriber.structure']) ? $this->services['sulu_content.search.event_subscriber.structure'] : $this->get('sulu_content.search.event_subscriber.structure')) && false ?: '_'};
        }, 1 => 'indexPublishedDocument'), -256);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.search.event_subscriber.structure']) ? $this->services['sulu_content.search.event_subscriber.structure'] : $this->get('sulu_content.search.event_subscriber.structure')) && false ?: '_'};
        }, 1 => 'deindexRemovedDocument'), 600);
        $instance->addListener('sulu_document_manager.unpublish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.search.event_subscriber.structure']) ? $this->services['sulu_content.search.event_subscriber.structure'] : $this->get('sulu_content.search.event_subscriber.structure')) && false ?: '_'};
        }, 1 => 'deindexUnpublishedDocument'), -1024);
        $instance->addListener('sulu_document_manager.remove_draft', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.search.event_subscriber.structure']) ? $this->services['sulu_content.search.event_subscriber.structure'] : $this->get('sulu_content.search.event_subscriber.structure')) && false ?: '_'};
        }, 1 => 'indexDocumentAfterRemoveDraft'), -1024);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.document.subscriber.content']) ? $this->services['sulu_content.document.subscriber.content'] : $this->get('sulu_content.document.subscriber.content')) && false ?: '_'};
        }, 1 => 'saveStructureData'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.document.subscriber.content']) ? $this->services['sulu_content.document.subscriber.content'] : $this->get('sulu_content.document.subscriber.content')) && false ?: '_'};
        }, 1 => 'handlePersistStagedProperties'), 50);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.document.subscriber.content']) ? $this->services['sulu_content.document.subscriber.content'] : $this->get('sulu_content.document.subscriber.content')) && false ?: '_'};
        }, 1 => 'handlePersistStructureType'), 100);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.document.subscriber.content']) ? $this->services['sulu_content.document.subscriber.content'] : $this->get('sulu_content.document.subscriber.content')) && false ?: '_'};
        }, 1 => 'saveStructureData'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.document.subscriber.content']) ? $this->services['sulu_content.document.subscriber.content'] : $this->get('sulu_content.document.subscriber.content')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 0);
        $instance->addListener('sulu_document_manager.configure_options', array(0 => function () {
            return ${($_ = isset($this->services['sulu_content.document.subscriber.content']) ? $this->services['sulu_content.document.subscriber.content'] : $this->get('sulu_content.document.subscriber.content')) && false ?: '_'};
        }, 1 => 'configureOptions'), 0);
        $instance->addListener('sulu_document_manager.metadata_load', array(0 => function () {
            return ${($_ = isset($this->services['sulu_navigationContext.document.subscriber.navigation_context']) ? $this->services['sulu_navigationContext.document.subscriber.navigation_context'] : $this->get('sulu_navigationContext.document.subscriber.navigation_context')) && false ?: '_'};
        }, 1 => 'handleMetadataLoad'), 0);
        $instance->addListener('sulu_document_manager.metadata_load', array(0 => function () {
            return ${($_ = isset($this->services['sulu_redirect_type.document.subscriber.redirect_type']) ? $this->services['sulu_redirect_type.document.subscriber.redirect_type'] : $this->get('sulu_redirect_type.document.subscriber.redirect_type')) && false ?: '_'};
        }, 1 => 'handleMetadataLoad'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_redirect_type.document.subscriber.redirect_type']) ? $this->services['sulu_redirect_type.document.subscriber.redirect_type'] : $this->get('sulu_redirect_type.document.subscriber.redirect_type')) && false ?: '_'};
        }, 1 => 'handlePersist'), 15);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_resource_segment.document.subscriber.resource_segment']) ? $this->services['sulu_resource_segment.document.subscriber.resource_segment'] : $this->get('sulu_resource_segment.document.subscriber.resource_segment')) && false ?: '_'};
        }, 1 => 'handlePersistDocument'), 10);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_resource_segment.document.subscriber.resource_segment']) ? $this->services['sulu_resource_segment.document.subscriber.resource_segment'] : $this->get('sulu_resource_segment.document.subscriber.resource_segment')) && false ?: '_'};
        }, 1 => 'handleHydrate'), -200);
        $instance->addListener('sulu_document_manager.move', array(0 => function () {
            return ${($_ = isset($this->services['sulu_resource_segment.document.subscriber.resource_segment']) ? $this->services['sulu_resource_segment.document.subscriber.resource_segment'] : $this->get('sulu_resource_segment.document.subscriber.resource_segment')) && false ?: '_'};
        }, 1 => 'updateMovedDocument'), -128);
        $instance->addListener('sulu_document_manager.copy', array(0 => function () {
            return ${($_ = isset($this->services['sulu_resource_segment.document.subscriber.resource_segment']) ? $this->services['sulu_resource_segment.document.subscriber.resource_segment'] : $this->get('sulu_resource_segment.document.subscriber.resource_segment')) && false ?: '_'};
        }, 1 => 'updateCopiedDocument'), -128);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_resource_segment.document.subscriber.resource_segment']) ? $this->services['sulu_resource_segment.document.subscriber.resource_segment'] : $this->get('sulu_resource_segment.document.subscriber.resource_segment')) && false ?: '_'};
        }, 1 => 'handlePersistRoute'), -128);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.workflow_stage']) ? $this->services['sulu_document_manager.document.subscriber.workflow_stage'] : $this->get('sulu_document_manager.document.subscriber.workflow_stage')) && false ?: '_'};
        }, 1 => 'setWorkflowStageOnDocument'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.workflow_stage']) ? $this->services['sulu_document_manager.document.subscriber.workflow_stage'] : $this->get('sulu_document_manager.document.subscriber.workflow_stage')) && false ?: '_'};
        }, 1 => 'setWorkflowStageToTest'), 0);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.workflow_stage']) ? $this->services['sulu_document_manager.document.subscriber.workflow_stage'] : $this->get('sulu_document_manager.document.subscriber.workflow_stage')) && false ?: '_'};
        }, 1 => 'setWorkflowStageToPublished'), 0);
        $instance->addListener('sulu_document_manager.unpublish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.workflow_stage']) ? $this->services['sulu_document_manager.document.subscriber.workflow_stage'] : $this->get('sulu_document_manager.document.subscriber.workflow_stage')) && false ?: '_'};
        }, 1 => 'setWorkflowStageToTestAndResetPublishedDate'), 0);
        $instance->addListener('sulu_document_manager.copy', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.workflow_stage']) ? $this->services['sulu_document_manager.document.subscriber.workflow_stage'] : $this->get('sulu_document_manager.document.subscriber.workflow_stage')) && false ?: '_'};
        }, 1 => 'setWorkflowStageToTestForCopy'), 0);
        $instance->addListener('sulu_document_manager.restore', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.workflow_stage']) ? $this->services['sulu_document_manager.document.subscriber.workflow_stage'] : $this->get('sulu_document_manager.document.subscriber.workflow_stage')) && false ?: '_'};
        }, 1 => 'setWorkflowStageToTestForRestore'), -32);
        $instance->addListener('sulu_document_manager.metadata_load', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_locale']) ? $this->services['sulu_document_manager.document.subscriber.shadow_locale'] : $this->get('sulu_document_manager.document.subscriber.shadow_locale')) && false ?: '_'};
        }, 1 => 'handleMetadataLoad'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_locale']) ? $this->services['sulu_document_manager.document.subscriber.shadow_locale'] : $this->get('sulu_document_manager.document.subscriber.shadow_locale')) && false ?: '_'};
        }, 1 => 'handlePersistUpdateUrl'), 20);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_locale']) ? $this->services['sulu_document_manager.document.subscriber.shadow_locale'] : $this->get('sulu_document_manager.document.subscriber.shadow_locale')) && false ?: '_'};
        }, 1 => 'saveShadowProperties'), 15);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_locale']) ? $this->services['sulu_document_manager.document.subscriber.shadow_locale'] : $this->get('sulu_document_manager.document.subscriber.shadow_locale')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 390);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_locale']) ? $this->services['sulu_document_manager.document.subscriber.shadow_locale'] : $this->get('sulu_document_manager.document.subscriber.shadow_locale')) && false ?: '_'};
        }, 1 => 'saveShadowProperties'), 15);
        $instance->addListener('sulu_document_manager.configure_options', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_locale']) ? $this->services['sulu_document_manager.document.subscriber.shadow_locale'] : $this->get('sulu_document_manager.document.subscriber.shadow_locale')) && false ?: '_'};
        }, 1 => 'handleConfigureOptions'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_copy_properties']) ? $this->services['sulu_document_manager.document.subscriber.shadow_copy_properties'] : $this->get('sulu_document_manager.document.subscriber.shadow_copy_properties')) && false ?: '_'};
        }, 1 => 'copyShadowProperties'), -256);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.shadow_copy_properties']) ? $this->services['sulu_document_manager.document.subscriber.shadow_copy_properties'] : $this->get('sulu_document_manager.document.subscriber.shadow_copy_properties')) && false ?: '_'};
        }, 1 => 'copyShadowProperties'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.title']) ? $this->services['sulu_document_manager.document.subscriber.title'] : $this->get('sulu_document_manager.document.subscriber.title')) && false ?: '_'};
        }, 1 => 'setTitleOnDocument'), -10);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.title']) ? $this->services['sulu_document_manager.document.subscriber.title'] : $this->get('sulu_document_manager.document.subscriber.title')) && false ?: '_'};
        }, 1 => 'setTitleOnNode'), 10);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.title']) ? $this->services['sulu_document_manager.document.subscriber.title'] : $this->get('sulu_document_manager.document.subscriber.title')) && false ?: '_'};
        }, 1 => 'setTitleOnNode'), 10);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.fallback_localization']) ? $this->services['sulu_document_manager.document.subscriber.fallback_localization'] : $this->get('sulu_document_manager.document.subscriber.fallback_localization')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 400);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.extension']) ? $this->services['sulu_document_manager.document.subscriber.extension'] : $this->get('sulu_document_manager.document.subscriber.extension')) && false ?: '_'};
        }, 1 => 'saveExtensionData'), 10);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.extension']) ? $this->services['sulu_document_manager.document.subscriber.extension'] : $this->get('sulu_document_manager.document.subscriber.extension')) && false ?: '_'};
        }, 1 => 'saveExtensionData'), 10);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.extension']) ? $this->services['sulu_document_manager.document.subscriber.extension'] : $this->get('sulu_document_manager.document.subscriber.extension')) && false ?: '_'};
        }, 1 => 'handleHydrate'), -10);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.order']) ? $this->services['sulu_document_manager.document.subscriber.order'] : $this->get('sulu_document_manager.document.subscriber.order')) && false ?: '_'};
        }, 1 => 'handlePersist'), 0);
        $instance->addListener('sulu_document_manager.metadata_load', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.order']) ? $this->services['sulu_document_manager.document.subscriber.order'] : $this->get('sulu_document_manager.document.subscriber.order')) && false ?: '_'};
        }, 1 => 'handleMetadataLoad'), 0);
        $instance->addListener('sulu_document_manager.reorder', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.order']) ? $this->services['sulu_document_manager.document.subscriber.order'] : $this->get('sulu_document_manager.document.subscriber.order')) && false ?: '_'};
        }, 1 => 'handleReorder'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.security']) ? $this->services['sulu_document_manager.document.subscriber.security'] : $this->get('sulu_document_manager.document.subscriber.security')) && false ?: '_'};
        }, 1 => 'handlePersist'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.security']) ? $this->services['sulu_document_manager.document.subscriber.security'] : $this->get('sulu_document_manager.document.subscriber.security')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.webspace']) ? $this->services['sulu_document_manager.document.subscriber.webspace'] : $this->get('sulu_document_manager.document.subscriber.webspace')) && false ?: '_'};
        }, 1 => 'handleWebspace'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.webspace']) ? $this->services['sulu_document_manager.document.subscriber.webspace'] : $this->get('sulu_document_manager.document.subscriber.webspace')) && false ?: '_'};
        }, 1 => 'handleWebspace'), -10);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.route']) ? $this->services['sulu_document_manager.document.subscriber.route'] : $this->get('sulu_document_manager.document.subscriber.route')) && false ?: '_'};
        }, 1 => 'handleSetNodeOnPersist'), 490);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.route']) ? $this->services['sulu_document_manager.document.subscriber.route'] : $this->get('sulu_document_manager.document.subscriber.route')) && false ?: '_'};
        }, 1 => 'handlePersist'), 5);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.route']) ? $this->services['sulu_document_manager.document.subscriber.route'] : $this->get('sulu_document_manager.document.subscriber.route')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 0);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.route']) ? $this->services['sulu_document_manager.document.subscriber.route'] : $this->get('sulu_document_manager.document.subscriber.route')) && false ?: '_'};
        }, 1 => 'handleRemove'), 550);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.route']) ? $this->services['sulu_document_manager.document.subscriber.route'] : $this->get('sulu_document_manager.document.subscriber.route')) && false ?: '_'};
        }, 1 => 'handlePublish'), 0);
        $instance->addListener('sulu_document_manager.metadata_load', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.target']) ? $this->services['sulu_document_manager.document.subscriber.target'] : $this->get('sulu_document_manager.document.subscriber.target')) && false ?: '_'};
        }, 1 => 'handleMetadataLoad'), 0);
        $instance->addListener('sulu_document_manager.metadata_load', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.robot']) ? $this->services['sulu_document_manager.document.subscriber.robot'] : $this->get('sulu_document_manager.document.subscriber.robot')) && false ?: '_'};
        }, 1 => 'handleMetadataLoad'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'createNodeInPublicWorkspace'), -490);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'removeNodeFromPublicWorkspace'), 0);
        $instance->addListener('sulu_document_manager.move', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'moveNodeInPublicWorkspace'), 0);
        $instance->addListener('sulu_document_manager.copy', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'copyNodeInPublicWorkspace'), 0);
        $instance->addListener('sulu_document_manager.reorder', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'reorderNodeInPublicWorkspace'), 0);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'setNodeFromPublicWorkspaceForPublishing'), 512);
        $instance->addListener('sulu_document_manager.unpublish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'setNodeFromPublicWorkspaceForUnpublishing'), 512);
        $instance->addListener('sulu_document_manager.unpublish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'removePropertiesFromPublicWorkspace'), 0);
        $instance->addListener('sulu_document_manager.remove_draft', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'copyPropertiesFromPublicWorkspace'), 0);
        $instance->addListener('sulu_document_manager.flush', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.publish']) ? $this->services['sulu_document_manager.document.subscriber.publish'] : $this->get('sulu_document_manager.document.subscriber.publish')) && false ?: '_'};
        }, 1 => 'flushPublicWorkspace'), 0);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.compat.content_mapper']) ? $this->services['sulu_document_manager.document.subscriber.compat.content_mapper'] : $this->get('sulu_document_manager.document.subscriber.compat.content_mapper')) && false ?: '_'};
        }, 1 => 'handlePreRemove'), 500);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.compat.content_mapper']) ? $this->services['sulu_document_manager.document.subscriber.compat.content_mapper'] : $this->get('sulu_document_manager.document.subscriber.compat.content_mapper')) && false ?: '_'};
        }, 1 => 'handlePostRemove'), -100);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.compat.content_mapper']) ? $this->services['sulu_document_manager.document.subscriber.compat.content_mapper'] : $this->get('sulu_document_manager.document.subscriber.compat.content_mapper')) && false ?: '_'};
        }, 1 => 'handlePersist'), 0);
        $instance->addListener('sulu_document_manager.flush', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.document.subscriber.compat.content_mapper']) ? $this->services['sulu_document_manager.document.subscriber.compat.content_mapper'] : $this->get('sulu_document_manager.document.subscriber.compat.content_mapper')) && false ?: '_'};
        }, 1 => 'handleFlush'), 0);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.remove_content']) ? $this->services['sulu_document_manager.subscriber.behavior.remove_content'] : $this->get('sulu_document_manager.subscriber.behavior.remove_content')) && false ?: '_'};
        }, 1 => 'handleRemove'), 550);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_http_cache.event_subscriber.invalidation']) ? $this->services['sulu_http_cache.event_subscriber.invalidation'] : $this->get('sulu_http_cache.event_subscriber.invalidation')) && false ?: '_'};
        }, 1 => 'invalidateDocumentBeforePublishing'), 1024);
        $instance->addListener('sulu_document_manager.unpublish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_http_cache.event_subscriber.invalidation']) ? $this->services['sulu_http_cache.event_subscriber.invalidation'] : $this->get('sulu_http_cache.event_subscriber.invalidation')) && false ?: '_'};
        }, 1 => 'invalidateDocumentBeforeUnpublishing'), 1024);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_http_cache.event_subscriber.invalidation']) ? $this->services['sulu_http_cache.event_subscriber.invalidation'] : $this->get('sulu_http_cache.event_subscriber.invalidation')) && false ?: '_'};
        }, 1 => 'invalidateDocumentBeforeRemoving'), 1024);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.instantiator']) ? $this->services['sulu_document_manager.subscriber.core.instantiator'] : $this->get('sulu_document_manager.subscriber.core.instantiator')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 500);
        $instance->addListener('sulu_document_manager.create', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.instantiator']) ? $this->services['sulu_document_manager.subscriber.core.instantiator'] : $this->get('sulu_document_manager.subscriber.core.instantiator')) && false ?: '_'};
        }, 1 => 'handleCreate'), 500);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleDefaultLocale'), 520);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleDocumentFromRegistry'), 510);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleStopPropagationAndResetLocale'), 509);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 490);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleEndHydrate'), -500);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handlePersist'), 450);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleNodeFromRegistry'), 510);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleEndPersist'), -500);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleRemove'), 490);
        $instance->addListener('sulu_document_manager.clear', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleClear'), 500);
        $instance->addListener('sulu_document_manager.reorder', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleNodeFromRegistry'), 510);
        $instance->addListener('sulu_document_manager.configure_options', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'configureOptions'), 0);
        $instance->addListener('sulu_document_manager.remove_draft', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleNodeFromRegistry'), 512);
        $instance->addListener('sulu_document_manager.restore', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.registrator']) ? $this->services['sulu_document_manager.subscriber.core.registrator'] : $this->get('sulu_document_manager.subscriber.core.registrator')) && false ?: '_'};
        }, 1 => 'handleNodeFromRegistry'), 512);
        $instance->addListener('sulu_document_manager.reorder', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.reorder']) ? $this->services['sulu_document_manager.subscriber.phpcr.reorder'] : $this->get('sulu_document_manager.subscriber.phpcr.reorder')) && false ?: '_'};
        }, 1 => 'handleReorder'), 500);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.mixin']) ? $this->services['sulu_document_manager.subscriber.phpcr.mixin'] : $this->get('sulu_document_manager.subscriber.phpcr.mixin')) && false ?: '_'};
        }, 1 => 'setDocumentMixinsOnNode'), 468);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.mixin']) ? $this->services['sulu_document_manager.subscriber.phpcr.mixin'] : $this->get('sulu_document_manager.subscriber.phpcr.mixin')) && false ?: '_'};
        }, 1 => 'setDocumentMixinsOnNode'), 468);
        $instance->addListener('sulu_document_manager.find', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.find']) ? $this->services['sulu_document_manager.subscriber.phpcr.find'] : $this->get('sulu_document_manager.subscriber.phpcr.find')) && false ?: '_'};
        }, 1 => 'handleFind'), 500);
        $instance->addListener('sulu_document_manager.configure_options', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.find']) ? $this->services['sulu_document_manager.subscriber.phpcr.find'] : $this->get('sulu_document_manager.subscriber.phpcr.find')) && false ?: '_'};
        }, 1 => 'configureOptions'), 0);
        $instance->addListener('sulu_document_manager.query.create', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.query']) ? $this->services['sulu_document_manager.subscriber.phpcr.query'] : $this->get('sulu_document_manager.subscriber.phpcr.query')) && false ?: '_'};
        }, 1 => 'handleCreate'), 500);
        $instance->addListener('sulu_document_manager.query.create_builder', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.query']) ? $this->services['sulu_document_manager.subscriber.phpcr.query'] : $this->get('sulu_document_manager.subscriber.phpcr.query')) && false ?: '_'};
        }, 1 => 'handleCreateBuilder'), 500);
        $instance->addListener('sulu_document_manager.query.execute', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.query']) ? $this->services['sulu_document_manager.subscriber.phpcr.query'] : $this->get('sulu_document_manager.subscriber.phpcr.query')) && false ?: '_'};
        }, 1 => 'handleQueryExecute'), 500);
        $instance->addListener('sulu_document_manager.move', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.general']) ? $this->services['sulu_document_manager.subscriber.phpcr.general'] : $this->get('sulu_document_manager.subscriber.phpcr.general')) && false ?: '_'};
        }, 1 => 'handleMove'), 400);
        $instance->addListener('sulu_document_manager.copy', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.general']) ? $this->services['sulu_document_manager.subscriber.phpcr.general'] : $this->get('sulu_document_manager.subscriber.phpcr.general')) && false ?: '_'};
        }, 1 => 'handleCopy'), 400);
        $instance->addListener('sulu_document_manager.clear', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.general']) ? $this->services['sulu_document_manager.subscriber.phpcr.general'] : $this->get('sulu_document_manager.subscriber.phpcr.general')) && false ?: '_'};
        }, 1 => 'handleClear'), 500);
        $instance->addListener('sulu_document_manager.flush', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.general']) ? $this->services['sulu_document_manager.subscriber.phpcr.general'] : $this->get('sulu_document_manager.subscriber.phpcr.general')) && false ?: '_'};
        }, 1 => 'handleFlush'), 500);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.remove']) ? $this->services['sulu_document_manager.subscriber.phpcr.remove'] : $this->get('sulu_document_manager.subscriber.phpcr.remove')) && false ?: '_'};
        }, 1 => 'handleRemove'), 500);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.mapping']) ? $this->services['sulu_document_manager.subscriber.core.mapping'] : $this->get('sulu_document_manager.subscriber.core.mapping')) && false ?: '_'};
        }, 1 => 'handleHydrate'), -100);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.mapping']) ? $this->services['sulu_document_manager.subscriber.core.mapping'] : $this->get('sulu_document_manager.subscriber.core.mapping')) && false ?: '_'};
        }, 1 => 'handleMapping'), -100);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.core.mapping']) ? $this->services['sulu_document_manager.subscriber.core.mapping'] : $this->get('sulu_document_manager.subscriber.core.mapping')) && false ?: '_'};
        }, 1 => 'handleMapping'), -128);
        $instance->addListener('sulu_document_manager.refresh', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.refresh']) ? $this->services['sulu_document_manager.subscriber.phpcr.refresh'] : $this->get('sulu_document_manager.subscriber.phpcr.refresh')) && false ?: '_'};
        }, 1 => 'refreshDocument'), 0);
        $instance->addListener('sulu_document_manager.remove_draft', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.phpcr.refresh']) ? $this->services['sulu_document_manager.subscriber.phpcr.refresh'] : $this->get('sulu_document_manager.subscriber.phpcr.refresh')) && false ?: '_'};
        }, 1 => 'refreshDocumentForDeleteDraft'), -512);
        $instance->addListener('sulu_document_manager.configure_options', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.security']) ? $this->services['sulu_document_manager.subscriber.security'] : $this->get('sulu_document_manager.subscriber.security')) && false ?: '_'};
        }, 1 => 'setDefaultUser'), 0);
        $instance->addListener('sulu_document_manager.configure_options', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.auto_name']) ? $this->services['sulu_document_manager.subscriber.behavior.auto_name'] : $this->get('sulu_document_manager.subscriber.behavior.auto_name')) && false ?: '_'};
        }, 1 => 'configureOptions'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.auto_name']) ? $this->services['sulu_document_manager.subscriber.behavior.auto_name'] : $this->get('sulu_document_manager.subscriber.behavior.auto_name')) && false ?: '_'};
        }, 1 => 'handlePersist'), 480);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.auto_name']) ? $this->services['sulu_document_manager.subscriber.behavior.auto_name'] : $this->get('sulu_document_manager.subscriber.behavior.auto_name')) && false ?: '_'};
        }, 1 => 'handleRename'), -480);
        $instance->addListener('sulu_document_manager.move', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.auto_name']) ? $this->services['sulu_document_manager.subscriber.behavior.auto_name'] : $this->get('sulu_document_manager.subscriber.behavior.auto_name')) && false ?: '_'};
        }, 1 => 'handleMove'), 480);
        $instance->addListener('sulu_document_manager.copy', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.auto_name']) ? $this->services['sulu_document_manager.subscriber.behavior.auto_name'] : $this->get('sulu_document_manager.subscriber.behavior.auto_name')) && false ?: '_'};
        }, 1 => 'handleCopy'), 480);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.path.explicit']) ? $this->services['sulu_document_manager.subscriber.behavior.path.explicit'] : $this->get('sulu_document_manager.subscriber.behavior.path.explicit')) && false ?: '_'};
        }, 1 => 'handlePersist'), 485);
        $instance->addListener('sulu_document_manager.configure_options', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.path.explicit']) ? $this->services['sulu_document_manager.subscriber.behavior.path.explicit'] : $this->get('sulu_document_manager.subscriber.behavior.path.explicit')) && false ?: '_'};
        }, 1 => 'configureOptions'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.blame']) ? $this->services['sulu_document_manager.suscriber.behavior.blame'] : $this->get('sulu_document_manager.suscriber.behavior.blame')) && false ?: '_'};
        }, 1 => 'setBlamesOnDocument'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.blame']) ? $this->services['sulu_document_manager.suscriber.behavior.blame'] : $this->get('sulu_document_manager.suscriber.behavior.blame')) && false ?: '_'};
        }, 1 => 'setBlamesOnNodeForPersist'), 0);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.blame']) ? $this->services['sulu_document_manager.suscriber.behavior.blame'] : $this->get('sulu_document_manager.suscriber.behavior.blame')) && false ?: '_'};
        }, 1 => 'setBlamesOnNodeForPublish'), 0);
        $instance->addListener('sulu_document_manager.restore', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.blame']) ? $this->services['sulu_document_manager.suscriber.behavior.blame'] : $this->get('sulu_document_manager.suscriber.behavior.blame')) && false ?: '_'};
        }, 1 => 'setChangerForRestore'), -32);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.author']) ? $this->services['sulu_document_manager.suscriber.behavior.author'] : $this->get('sulu_document_manager.suscriber.behavior.author')) && false ?: '_'};
        }, 1 => 'setAuthorOnDocument'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.author']) ? $this->services['sulu_document_manager.suscriber.behavior.author'] : $this->get('sulu_document_manager.suscriber.behavior.author')) && false ?: '_'};
        }, 1 => 'setAuthorOnNode'), 0);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.author']) ? $this->services['sulu_document_manager.suscriber.behavior.author'] : $this->get('sulu_document_manager.suscriber.behavior.author')) && false ?: '_'};
        }, 1 => 'setAuthorOnNode'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.timestamp']) ? $this->services['sulu_document_manager.suscriber.behavior.timestamp'] : $this->get('sulu_document_manager.suscriber.behavior.timestamp')) && false ?: '_'};
        }, 1 => 'setTimestampsOnNodeForPersist'), 0);
        $instance->addListener('sulu_document_manager.publish', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.timestamp']) ? $this->services['sulu_document_manager.suscriber.behavior.timestamp'] : $this->get('sulu_document_manager.suscriber.behavior.timestamp')) && false ?: '_'};
        }, 1 => 'setTimestampsOnNodeForPublish'), 0);
        $instance->addListener('sulu_document_manager.restore', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.timestamp']) ? $this->services['sulu_document_manager.suscriber.behavior.timestamp'] : $this->get('sulu_document_manager.suscriber.behavior.timestamp')) && false ?: '_'};
        }, 1 => 'setChangedForRestore'), -32);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.timestamp']) ? $this->services['sulu_document_manager.suscriber.behavior.timestamp'] : $this->get('sulu_document_manager.suscriber.behavior.timestamp')) && false ?: '_'};
        }, 1 => 'setTimestampsOnDocument'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.node_name']) ? $this->services['sulu_document_manager.suscriber.behavior.node_name'] : $this->get('sulu_document_manager.suscriber.behavior.node_name')) && false ?: '_'};
        }, 1 => 'setFinalNodeName'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.node_name']) ? $this->services['sulu_document_manager.suscriber.behavior.node_name'] : $this->get('sulu_document_manager.suscriber.behavior.node_name')) && false ?: '_'};
        }, 1 => 'setInitialNodeName'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.node_name']) ? $this->services['sulu_document_manager.suscriber.behavior.node_name'] : $this->get('sulu_document_manager.suscriber.behavior.node_name')) && false ?: '_'};
        }, 1 => 'setFinalNodeName'), -480);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.uuid']) ? $this->services['sulu_document_manager.suscriber.behavior.uuid'] : $this->get('sulu_document_manager.suscriber.behavior.uuid')) && false ?: '_'};
        }, 1 => 'handleUuid'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.uuid']) ? $this->services['sulu_document_manager.suscriber.behavior.uuid'] : $this->get('sulu_document_manager.suscriber.behavior.uuid')) && false ?: '_'};
        }, 1 => 'handleUuid'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.locale']) ? $this->services['sulu_document_manager.suscriber.behavior.locale'] : $this->get('sulu_document_manager.suscriber.behavior.locale')) && false ?: '_'};
        }, 1 => 'handleLocale'), 410);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.locale']) ? $this->services['sulu_document_manager.suscriber.behavior.locale'] : $this->get('sulu_document_manager.suscriber.behavior.locale')) && false ?: '_'};
        }, 1 => 'handleLocale'), 410);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.parent']) ? $this->services['sulu_document_manager.suscriber.behavior.parent'] : $this->get('sulu_document_manager.suscriber.behavior.parent')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.parent']) ? $this->services['sulu_document_manager.suscriber.behavior.parent'] : $this->get('sulu_document_manager.suscriber.behavior.parent')) && false ?: '_'};
        }, 1 => 'handleChangeParent'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.parent']) ? $this->services['sulu_document_manager.suscriber.behavior.parent'] : $this->get('sulu_document_manager.suscriber.behavior.parent')) && false ?: '_'};
        }, 1 => 'handleSetParentNodeFromDocument'), 490);
        $instance->addListener('sulu_document_manager.move', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.parent']) ? $this->services['sulu_document_manager.suscriber.behavior.parent'] : $this->get('sulu_document_manager.suscriber.behavior.parent')) && false ?: '_'};
        }, 1 => 'handleMove'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.suscriber.behavior.children']) ? $this->services['sulu_document_manager.suscriber.behavior.children'] : $this->get('sulu_document_manager.suscriber.behavior.children')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.path']) ? $this->services['sulu_document_manager.subscriber.behavior.path'] : $this->get('sulu_document_manager.subscriber.behavior.path')) && false ?: '_'};
        }, 1 => 'setInitialPath'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.path']) ? $this->services['sulu_document_manager.subscriber.behavior.path'] : $this->get('sulu_document_manager.subscriber.behavior.path')) && false ?: '_'};
        }, 1 => 'setFinalPath'), -495);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.path']) ? $this->services['sulu_document_manager.subscriber.behavior.path'] : $this->get('sulu_document_manager.subscriber.behavior.path')) && false ?: '_'};
        }, 1 => 'setFinalPath'), 0);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.filing']) ? $this->services['sulu_document_manager.subscriber.behavior.filing'] : $this->get('sulu_document_manager.subscriber.behavior.filing')) && false ?: '_'};
        }, 1 => 'handlePersist'), 485);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.alias']) ? $this->services['sulu_document_manager.subscriber.behavior.alias'] : $this->get('sulu_document_manager.subscriber.behavior.alias')) && false ?: '_'};
        }, 1 => 'handlePersist'), 490);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_document_manager.subscriber.behavior.base_path']) ? $this->services['sulu_document_manager.subscriber.behavior.base_path'] : $this->get('sulu_document_manager.subscriber.behavior.base_path')) && false ?: '_'};
        }, 1 => 'handlePersist'), 500);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_custom_urls.subscriber']) ? $this->services['sulu_custom_urls.subscriber'] : $this->get('sulu_custom_urls.subscriber')) && false ?: '_'};
        }, 1 => 'handlePersist'), 0);
        $instance->addListener('sulu_document_manager.hydrate', array(0 => function () {
            return ${($_ = isset($this->services['sulu_custom_urls.subscriber']) ? $this->services['sulu_custom_urls.subscriber'] : $this->get('sulu_custom_urls.subscriber')) && false ?: '_'};
        }, 1 => 'handleHydrate'), 0);
        $instance->addListener('sulu_document_manager.remove', array(0 => function () {
            return ${($_ = isset($this->services['sulu_custom_urls.subscriber']) ? $this->services['sulu_custom_urls.subscriber'] : $this->get('sulu_custom_urls.subscriber')) && false ?: '_'};
        }, 1 => 'handleRemove'), 550);
        $instance->addListener('sulu_document_manager.persist', array(0 => function () {
            return ${($_ = isset($this->services['sulu_custom_urls.invalidate.subscriber']) ? $this->services['sulu_custom_urls.invalidate.subscriber'] : $this->get('sulu_custom_urls.invalidate.subscriber')) && false ?: '_'};
        }, 1 => 'handlePersist'), 0);

        return $instance;
    }

    /**
     * Gets the public 'sulu_document_manager.initializer' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Initializer\Initializer
     */
    protected function getSuluDocumentManager_InitializerService()
    {
        return $this->services['sulu_document_manager.initializer'] = new \Sulu\Bundle\DocumentManagerBundle\Initializer\Initializer($this, array('sulu_core.webspace.document_manager.webspace_initializer' => 0, 'sulu_snippet.document.snippet_initializer' => 0, 'sulu_content.document_manager.content_initializer' => 127, 'sulu_document_manager.initializer.root_path_purge_initializer' => 250, 'sulu_document_manager.initializer.workspace' => 255, 'sulu_custom_urls.initializer' => -127));
    }

    /**
     * Gets the public 'sulu_document_manager.initializer.root_path_purge_initializer' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Initializer\RootPathPurgeInitializer
     */
    protected function getSuluDocumentManager_Initializer_RootPathPurgeInitializerService()
    {
        return $this->services['sulu_document_manager.initializer.root_path_purge_initializer'] = new \Sulu\Bundle\DocumentManagerBundle\Initializer\RootPathPurgeInitializer(${($_ = isset($this->services['doctrine_phpcr']) ? $this->services['doctrine_phpcr'] : $this->get('doctrine_phpcr')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_segment_registry']) ? $this->services['sulu_document_manager.path_segment_registry'] : $this->get('sulu_document_manager.path_segment_registry')) && false ?: '_'}, 'base');
    }

    /**
     * Gets the public 'sulu_document_manager.initializer.workspace' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Initializer\WorkspaceInitializer
     */
    protected function getSuluDocumentManager_Initializer_WorkspaceService()
    {
        return $this->services['sulu_document_manager.initializer.workspace'] = new \Sulu\Bundle\DocumentManagerBundle\Initializer\WorkspaceInitializer(${($_ = isset($this->services['doctrine_phpcr']) ? $this->services['doctrine_phpcr'] : $this->get('doctrine_phpcr')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.node_helper' shared service.
     *
     * @return \Sulu\Component\DocumentManager\NodeHelper
     */
    protected function getSuluDocumentManager_NodeHelperService()
    {
        return $this->services['sulu_document_manager.node_helper'] = new \Sulu\Component\DocumentManager\NodeHelper();
    }

    /**
     * Gets the public 'sulu_document_manager.path_segment_registry' shared service.
     *
     * @return \Sulu\Component\DocumentManager\PathSegmentRegistry
     */
    protected function getSuluDocumentManager_PathSegmentRegistryService()
    {
        return $this->services['sulu_document_manager.path_segment_registry'] = new \Sulu\Component\DocumentManager\PathSegmentRegistry(array('custom_urls' => 'custom-urls', 'custom_urls_items' => 'items', 'custom_urls_routes' => 'routes', 'base' => 'cmf', 'content' => 'contents', 'route' => 'routes', 'snippet' => 'snippets'));
    }

    /**
     * Gets the public 'sulu_document_manager.proxy_factory' shared service.
     *
     * @return \Sulu\Component\DocumentManager\ProxyFactory
     */
    protected function getSuluDocumentManager_ProxyFactoryService()
    {
        return $this->services['sulu_document_manager.proxy_factory'] = new \Sulu\Component\DocumentManager\ProxyFactory(${($_ = isset($this->services['sulu_document_manager.proxy_manager.factory.ghost']) ? $this->services['sulu_document_manager.proxy_manager.factory.ghost'] : $this->get('sulu_document_manager.proxy_manager.factory.ghost')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.event_dispatcher']) ? $this->services['sulu_document_manager.event_dispatcher'] : $this->get('sulu_document_manager.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.proxy_manager.factory.ghost' shared service.
     *
     * @return \ProxyManager\Factory\LazyLoadingGhostFactory
     */
    protected function getSuluDocumentManager_ProxyManager_Factory_GhostService()
    {
        return $this->services['sulu_document_manager.proxy_manager.factory.ghost'] = new \ProxyManager\Factory\LazyLoadingGhostFactory(${($_ = isset($this->services['sulu_core.proxy_manager.configuration']) ? $this->services['sulu_core.proxy_manager.configuration'] : $this->getSuluCore_ProxyManager_ConfigurationService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.routing.version_loader' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Routing\Loader\VersionRouteLoader
     */
    protected function getSuluDocumentManager_Routing_VersionLoaderService()
    {
        return $this->services['sulu_document_manager.routing.version_loader'] = new \Sulu\Bundle\DocumentManagerBundle\Routing\Loader\VersionRouteLoader(false);
    }

    /**
     * Gets the public 'sulu_document_manager.serializer.handler.children_collection' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Handler\ChildrenCollectionHandler
     */
    protected function getSuluDocumentManager_Serializer_Handler_ChildrenCollectionService()
    {
        return $this->services['sulu_document_manager.serializer.handler.children_collection'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Handler\ChildrenCollectionHandler();
    }

    /**
     * Gets the public 'sulu_document_manager.serializer.subscriber.children_behavior' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Subscriber\ChildrenSubscriber
     */
    protected function getSuluDocumentManager_Serializer_Subscriber_ChildrenBehaviorService()
    {
        return $this->services['sulu_document_manager.serializer.subscriber.children_behavior'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Subscriber\ChildrenSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.serializer.subscriber.document' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Subscriber\DocumentSubscriber
     */
    protected function getSuluDocumentManager_Serializer_Subscriber_DocumentService()
    {
        return $this->services['sulu_document_manager.serializer.subscriber.document'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Subscriber\DocumentSubscriber(${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.serializer.subscriber.proxy' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Subscriber\ProxySubscriber
     */
    protected function getSuluDocumentManager_Serializer_Subscriber_ProxyService()
    {
        return $this->services['sulu_document_manager.serializer.subscriber.proxy'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\Serializer\Subscriber\ProxySubscriber();
    }

    /**
     * Gets the public 'sulu_document_manager.session_manager' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Session\SessionManager
     */
    protected function getSuluDocumentManager_SessionManagerService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_document_manager.session_manager'] = new \Sulu\Bundle\DocumentManagerBundle\Session\SessionManager($a, $a);
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.behavior.alias' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\AliasFilingSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Behavior_AliasService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_document_manager.subscriber.behavior.alias'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\AliasFilingSubscriber($a, $a, ${($_ = isset($this->services['sulu_document_manager.metadata_factory.base']) ? $this->services['sulu_document_manager.metadata_factory.base'] : $this->getSuluDocumentManager_MetadataFactory_BaseService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.behavior.auto_name' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\AutoNameSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Behavior_AutoNameService()
    {
        return $this->services['sulu_document_manager.subscriber.behavior.auto_name'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\AutoNameSubscriber(${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, new \Sulu\Component\DocumentManager\Slugifier\NodeNameSlugifier(${($_ = isset($this->services['sulu_document_manager.slugifier']) ? $this->services['sulu_document_manager.slugifier'] : $this->getSuluDocumentManager_SlugifierService()) && false ?: '_'}), new \Sulu\Component\DocumentManager\NameResolver(), ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.behavior.base_path' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\BasePathSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Behavior_BasePathService()
    {
        return $this->services['sulu_document_manager.subscriber.behavior.base_path'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\BasePathSubscriber(${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'}, '/cmf');
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.behavior.filing' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\StructureTypeFilingSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Behavior_FilingService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_document_manager.subscriber.behavior.filing'] = new \Sulu\Component\Content\Document\Subscriber\StructureTypeFilingSubscriber($a, $a);
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.behavior.path' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\PathSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Behavior_PathService()
    {
        return $this->services['sulu_document_manager.subscriber.behavior.path'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\PathSubscriber(${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.behavior.path.explicit' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\ExplicitSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Behavior_Path_ExplicitService()
    {
        return $this->services['sulu_document_manager.subscriber.behavior.path.explicit'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Path\ExplicitSubscriber(${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.behavior.remove_content' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\StructureRemoveSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Behavior_RemoveContentService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_document_manager.subscriber.behavior.remove_content'] = new \Sulu\Component\Content\Document\Subscriber\StructureRemoveSubscriber(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, $a, $a, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.core.instantiator' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Core\InstantiatorSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Core_InstantiatorService()
    {
        return $this->services['sulu_document_manager.subscriber.core.instantiator'] = new \Sulu\Component\DocumentManager\Subscriber\Core\InstantiatorSubscriber(${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.core.mapping' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Core\MappingSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Core_MappingService()
    {
        return $this->services['sulu_document_manager.subscriber.core.mapping'] = new \Sulu\Component\DocumentManager\Subscriber\Core\MappingSubscriber(${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.proxy_factory']) ? $this->services['sulu_document_manager.proxy_factory'] : $this->get('sulu_document_manager.proxy_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.core.registrator' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Core\RegistratorSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Core_RegistratorService()
    {
        return $this->services['sulu_document_manager.subscriber.core.registrator'] = new \Sulu\Component\DocumentManager\Subscriber\Core\RegistratorSubscriber(${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.phpcr.find' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Phpcr\FindSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Phpcr_FindService()
    {
        return $this->services['sulu_document_manager.subscriber.phpcr.find'] = new \Sulu\Component\DocumentManager\Subscriber\Phpcr\FindSubscriber(${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.event_dispatcher']) ? $this->services['sulu_document_manager.event_dispatcher'] : $this->get('sulu_document_manager.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.phpcr.general' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Phpcr\GeneralSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Phpcr_GeneralService()
    {
        return $this->services['sulu_document_manager.subscriber.phpcr.general'] = new \Sulu\Component\DocumentManager\Subscriber\Phpcr\GeneralSubscriber(${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_helper']) ? $this->services['sulu_document_manager.node_helper'] : $this->get('sulu_document_manager.node_helper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.event_dispatcher']) ? $this->services['sulu_document_manager.event_dispatcher'] : $this->get('sulu_document_manager.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.phpcr.mixin' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\MixinSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Phpcr_MixinService()
    {
        return $this->services['sulu_document_manager.subscriber.phpcr.mixin'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\MixinSubscriber(${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.phpcr.query' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Phpcr\QuerySubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Phpcr_QueryService()
    {
        return $this->services['sulu_document_manager.subscriber.phpcr.query'] = new \Sulu\Component\DocumentManager\Subscriber\Phpcr\QuerySubscriber(${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.event_dispatcher']) ? $this->services['sulu_document_manager.event_dispatcher'] : $this->get('sulu_document_manager.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.phpcr.refresh' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Phpcr\RefreshSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Phpcr_RefreshService()
    {
        return $this->services['sulu_document_manager.subscriber.phpcr.refresh'] = new \Sulu\Component\DocumentManager\Subscriber\Phpcr\RefreshSubscriber(${($_ = isset($this->services['sulu_document_manager.event_dispatcher']) ? $this->services['sulu_document_manager.event_dispatcher'] : $this->get('sulu_document_manager.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.phpcr.remove' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Phpcr\RemoveSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Phpcr_RemoveService()
    {
        return $this->services['sulu_document_manager.subscriber.phpcr.remove'] = new \Sulu\Component\DocumentManager\Subscriber\Phpcr\RemoveSubscriber(${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.phpcr.reorder' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Phpcr\ReorderSubscriber
     */
    protected function getSuluDocumentManager_Subscriber_Phpcr_ReorderService()
    {
        return $this->services['sulu_document_manager.subscriber.phpcr.reorder'] = new \Sulu\Component\DocumentManager\Subscriber\Phpcr\ReorderSubscriber(${($_ = isset($this->services['sulu_document_manager.node_helper']) ? $this->services['sulu_document_manager.node_helper'] : $this->get('sulu_document_manager.node_helper')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.subscriber.security' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Document\Subscriber\SecuritySubscriber
     */
    protected function getSuluDocumentManager_Subscriber_SecurityService()
    {
        return $this->services['sulu_document_manager.subscriber.security'] = new \Sulu\Bundle\DocumentManagerBundle\Document\Subscriber\SecuritySubscriber(NULL);
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.author' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\AuthorSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_AuthorService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.author'] = new \Sulu\Component\Content\Document\Subscriber\AuthorSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.user']) ? $this->services['sulu.repository.user'] : $this->get('sulu.repository.user')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.metadata_factory']) ? $this->services['sulu_document_manager.metadata_factory'] : $this->getSuluDocumentManager_MetadataFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.blame' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\BlameSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_BlameService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.blame'] = new \Sulu\Component\Content\Document\Subscriber\BlameSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.children' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\ChildrenSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_ChildrenService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.children'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\ChildrenSubscriber(${($_ = isset($this->services['sulu_document_manager.proxy_factory']) ? $this->services['sulu_document_manager.proxy_factory'] : $this->get('sulu_document_manager.proxy_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.locale' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\LocaleSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_LocaleService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.locale'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\LocaleSubscriber(${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.node_name' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\NodeNameSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_NodeNameService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.node_name'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\NodeNameSubscriber();
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.parent' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\ParentSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_ParentService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.parent'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\ParentSubscriber(${($_ = isset($this->services['sulu_document_manager.proxy_factory']) ? $this->services['sulu_document_manager.proxy_factory'] : $this->get('sulu_document_manager.proxy_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.timestamp' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Audit\TimestampSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_TimestampService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.timestamp'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Audit\TimestampSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_document_manager.suscriber.behavior.uuid' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\UuidSubscriber
     */
    protected function getSuluDocumentManager_Suscriber_Behavior_UuidService()
    {
        return $this->services['sulu_document_manager.suscriber.behavior.uuid'] = new \Sulu\Component\DocumentManager\Subscriber\Behavior\Mapping\UuidSubscriber();
    }

    /**
     * Gets the public 'sulu_hash.auditable_hasher' shared service.
     *
     * @return \Sulu\Component\Hash\AuditableHasher
     */
    protected function getSuluHash_AuditableHasherService()
    {
        return $this->services['sulu_hash.auditable_hasher'] = new \Sulu\Component\Hash\AuditableHasher();
    }

    /**
     * Gets the public 'sulu_hash.event_subscriber.serializer' shared service.
     *
     * @return \Sulu\Component\Hash\Serializer\Subscriber\HashSerializeEventSubscriber
     */
    protected function getSuluHash_EventSubscriber_SerializerService()
    {
        return $this->services['sulu_hash.event_subscriber.serializer'] = new \Sulu\Component\Hash\Serializer\Subscriber\HashSerializeEventSubscriber(${($_ = isset($this->services['sulu_hash.auditable_hasher']) ? $this->services['sulu_hash.auditable_hasher'] : $this->get('sulu_hash.auditable_hasher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_hash.request_hash_checker' shared service.
     *
     * @return \Sulu\Component\Hash\RequestHashChecker
     */
    protected function getSuluHash_RequestHashCheckerService()
    {
        return $this->services['sulu_hash.request_hash_checker'] = new \Sulu\Component\Hash\RequestHashChecker(${($_ = isset($this->services['sulu_hash.auditable_hasher']) ? $this->services['sulu_hash.auditable_hasher'] : $this->get('sulu_hash.auditable_hasher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_http_cache.cache_lifetime.resolver' shared service.
     *
     * @return \Sulu\Component\HttpCache\CacheLifetimeResolver
     */
    protected function getSuluHttpCache_CacheLifetime_ResolverService()
    {
        return $this->services['sulu_http_cache.cache_lifetime.resolver'] = new \Sulu\Component\HttpCache\CacheLifetimeResolver();
    }

    /**
     * Gets the public 'sulu_http_cache.event_subscriber.flush' shared service.
     *
     * @return \Sulu\Component\HttpCache\EventSubscriber\FlushSubscriber
     */
    protected function getSuluHttpCache_EventSubscriber_FlushService()
    {
        return $this->services['sulu_http_cache.event_subscriber.flush'] = new \Sulu\Component\HttpCache\EventSubscriber\FlushSubscriber(${($_ = isset($this->services['sulu_http_cache.handler.aggregate']) ? $this->services['sulu_http_cache.handler.aggregate'] : $this->get('sulu_http_cache.handler.aggregate')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_http_cache.event_subscriber.invalidation' shared service.
     *
     * @return \Sulu\Component\HttpCache\EventSubscriber\InvalidationSubscriber
     */
    protected function getSuluHttpCache_EventSubscriber_InvalidationService()
    {
        $a = ${($_ = isset($this->services['sulu_http_cache.handler.aggregate']) ? $this->services['sulu_http_cache.handler.aggregate'] : $this->get('sulu_http_cache.handler.aggregate')) && false ?: '_'};

        return $this->services['sulu_http_cache.event_subscriber.invalidation'] = new \Sulu\Component\HttpCache\EventSubscriber\InvalidationSubscriber($a, $a, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy_pool']) ? $this->services['sulu.content.resource_locator.strategy_pool'] : $this->get('sulu.content.resource_locator.strategy_pool')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_http_cache.event_subscriber.update_response' shared service.
     *
     * @return \Sulu\Component\HttpCache\EventSubscriber\UpdateResponseSubscriber
     */
    protected function getSuluHttpCache_EventSubscriber_UpdateResponseService()
    {
        return $this->services['sulu_http_cache.event_subscriber.update_response'] = new \Sulu\Component\HttpCache\EventSubscriber\UpdateResponseSubscriber(${($_ = isset($this->services['sulu_http_cache.handler.aggregate']) ? $this->services['sulu_http_cache.handler.aggregate'] : $this->get('sulu_http_cache.handler.aggregate')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_http_cache.handler.aggregate' shared service.
     *
     * @return \Sulu\Component\HttpCache\Handler\AggregateHandler
     */
    protected function getSuluHttpCache_Handler_AggregateService()
    {
        return $this->services['sulu_http_cache.handler.aggregate'] = new \Sulu\Component\HttpCache\Handler\AggregateHandler(array(0 => ${($_ = isset($this->services['sulu_http_cache.handler.debug']) ? $this->services['sulu_http_cache.handler.debug'] : $this->get('sulu_http_cache.handler.debug')) && false ?: '_'}), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_http_cache.handler.debug' shared service.
     *
     * @return \Sulu\Component\HttpCache\Handler\DebugHandler
     */
    protected function getSuluHttpCache_Handler_DebugService()
    {
        return $this->services['sulu_http_cache.handler.debug'] = new \Sulu\Component\HttpCache\Handler\DebugHandler(${($_ = isset($this->services['sulu_http_cache.cache_lifetime.resolver']) ? $this->services['sulu_http_cache.cache_lifetime.resolver'] : $this->get('sulu_http_cache.cache_lifetime.resolver')) && false ?: '_'}, array(0 => 'debug'), 'symfony');
    }

    /**
     * Gets the public 'sulu_http_cache.proxy_client.symfony' shared service.
     *
     * @return \Sulu\Component\HttpCache\ProxyClient\Symfony
     */
    protected function getSuluHttpCache_ProxyClient_SymfonyService()
    {
        return $this->services['sulu_http_cache.proxy_client.symfony'] = new \Sulu\Component\HttpCache\ProxyClient\Symfony();
    }

    /**
     * Gets the public 'sulu_http_cache.proxy_client.varnish' shared service.
     *
     * @return \FOS\HttpCache\ProxyClient\Varnish
     */
    protected function getSuluHttpCache_ProxyClient_VarnishService()
    {
        return $this->services['sulu_http_cache.proxy_client.varnish'] = new \FOS\HttpCache\ProxyClient\Varnish(array(), NULL);
    }

    /**
     * Gets the public 'sulu_location.content.type.location' shared service.
     *
     * @return \Sulu\Bundle\LocationBundle\Content\Types\LocationContentType
     */
    protected function getSuluLocation_Content_Type_LocationService()
    {
        return $this->services['sulu_location.content.type.location'] = new \Sulu\Bundle\LocationBundle\Content\Types\LocationContentType(${($_ = isset($this->services['sulu_content.node_repository']) ? $this->services['sulu_content.node_repository'] : $this->get('sulu_content.node_repository')) && false ?: '_'}, 'SuluLocationBundle:Template:content-types/location.html.twig', ${($_ = isset($this->services['sulu_location.map_manager']) ? $this->services['sulu_location.map_manager'] : $this->get('sulu_location.map_manager')) && false ?: '_'}, 'nominatim');
    }

    /**
     * Gets the public 'sulu_location.controller.geoloactor' shared service.
     *
     * @return \Sulu\Bundle\LocationBundle\Controller\GeolocatorController
     */
    protected function getSuluLocation_Controller_GeoloactorService()
    {
        return $this->services['sulu_location.controller.geoloactor'] = new \Sulu\Bundle\LocationBundle\Controller\GeolocatorController(${($_ = isset($this->services['sulu_location.geolocator.manager']) ? $this->services['sulu_location.geolocator.manager'] : $this->get('sulu_location.geolocator.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_location.gelocator.service.nominatim' shared service.
     *
     * @return \Sulu\Bundle\LocationBundle\Geolocator\Service\NominatimGeolocator
     */
    protected function getSuluLocation_Gelocator_Service_NominatimService()
    {
        return $this->services['sulu_location.gelocator.service.nominatim'] = new \Sulu\Bundle\LocationBundle\Geolocator\Service\NominatimGeolocator(${($_ = isset($this->services['sulu_location.geolocator.guzzle.client']) ? $this->services['sulu_location.geolocator.guzzle.client'] : $this->get('sulu_location.geolocator.guzzle.client')) && false ?: '_'}, 'http://open.mapquestapi.com/nominatim/v1/search.php');
    }

    /**
     * Gets the public 'sulu_location.geolocator.guzzle.client' shared service.
     *
     * @return \GuzzleHttp\Client
     */
    protected function getSuluLocation_Geolocator_Guzzle_ClientService()
    {
        return $this->services['sulu_location.geolocator.guzzle.client'] = new \GuzzleHttp\Client();
    }

    /**
     * Gets the public 'sulu_location.geolocator.manager' shared service.
     *
     * @return \Sulu\Bundle\LocationBundle\Geolocator\GeolocatorManager
     */
    protected function getSuluLocation_Geolocator_ManagerService()
    {
        $this->services['sulu_location.geolocator.manager'] = $instance = new \Sulu\Bundle\LocationBundle\Geolocator\GeolocatorManager($this);

        $instance->register('nominatim', 'sulu_location.gelocator.service.nominatim');
        $instance->register('google', 'sulu_location.geolocator.service.google');

        return $instance;
    }

    /**
     * Gets the public 'sulu_location.geolocator.service.google' shared service.
     *
     * @return \Sulu\Bundle\LocationBundle\Geolocator\Service\GoogleGeolocator
     */
    protected function getSuluLocation_Geolocator_Service_GoogleService()
    {
        return $this->services['sulu_location.geolocator.service.google'] = new \Sulu\Bundle\LocationBundle\Geolocator\Service\GoogleGeolocator(${($_ = isset($this->services['sulu_location.geolocator.guzzle.client']) ? $this->services['sulu_location.geolocator.guzzle.client'] : $this->get('sulu_location.geolocator.guzzle.client')) && false ?: '_'}, '');
    }

    /**
     * Gets the public 'sulu_location.map_manager' shared service.
     *
     * @return \Sulu\Bundle\LocationBundle\Map\MapManager
     */
    protected function getSuluLocation_MapManagerService()
    {
        $this->services['sulu_location.map_manager'] = $instance = new \Sulu\Bundle\LocationBundle\Map\MapManager();

        $instance->registerProvider('leaflet', array('title' => 'Leaflet (OSM)'));
        $instance->registerProvider('google', array('title' => 'Google Maps', 'api_key' => NULL));
        $instance->registerGeolocator('nominatim', array('endpoint' => 'http://open.mapquestapi.com/nominatim/v1/search.php'));
        $instance->registerGeolocator('google', array('api_key' => ''));
        $instance->setDefaultProviderName('leaflet');

        return $instance;
    }

    /**
     * Gets the public 'sulu_markup.parser' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\HtmlMarkupParser
     */
    protected function getSuluMarkup_ParserService()
    {
        return $this->services['sulu_markup.parser'] = new \Sulu\Bundle\MarkupBundle\Markup\HtmlMarkupParser(${($_ = isset($this->services['sulu_markup.tag.registry']) ? $this->services['sulu_markup.tag.registry'] : $this->get('sulu_markup.tag.registry')) && false ?: '_'}, ${($_ = isset($this->services['sulu_markup.parser.delegating_html_extractor']) ? $this->services['sulu_markup.parser.delegating_html_extractor'] : $this->get('sulu_markup.parser.delegating_html_extractor')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_markup.parser.delegating_html_extractor' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\DelegatingTagExtractor
     */
    protected function getSuluMarkup_Parser_DelegatingHtmlExtractorService()
    {
        return $this->services['sulu_markup.parser.delegating_html_extractor'] = new \Sulu\Bundle\MarkupBundle\Markup\DelegatingTagExtractor(array(0 => ${($_ = isset($this->services['sulu_markup.parser.html_extractor']) ? $this->services['sulu_markup.parser.html_extractor'] : $this->get('sulu_markup.parser.html_extractor')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_markup.parser.html_extractor' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Markup\HtmlTagExtractor
     */
    protected function getSuluMarkup_Parser_HtmlExtractorService()
    {
        return $this->services['sulu_markup.parser.html_extractor'] = new \Sulu\Bundle\MarkupBundle\Markup\HtmlTagExtractor('sulu');
    }

    /**
     * Gets the public 'sulu_markup.response_listener' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Listener\MarkupListener
     */
    protected function getSuluMarkup_ResponseListenerService()
    {
        return $this->services['sulu_markup.response_listener'] = new \Sulu\Bundle\MarkupBundle\Listener\MarkupListener(array('html' => ${($_ = isset($this->services['sulu_markup.parser']) ? $this->services['sulu_markup.parser'] : $this->get('sulu_markup.parser')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_markup.tag.registry' shared service.
     *
     * @return \Sulu\Bundle\MarkupBundle\Tag\TagRegistry
     */
    protected function getSuluMarkup_Tag_RegistryService()
    {
        return $this->services['sulu_markup.tag.registry'] = new \Sulu\Bundle\MarkupBundle\Tag\TagRegistry(array('html' => array('sulu' => array('media' => ${($_ = isset($this->services['sulu_media.markup']) ? $this->services['sulu_media.markup'] : $this->get('sulu_media.markup')) && false ?: '_'}, 'link' => ${($_ = isset($this->services['sulu_content.link_tag']) ? $this->services['sulu_content.link_tag'] : $this->get('sulu_content.link_tag')) && false ?: '_'}))));
    }

    /**
     * Gets the public 'sulu_media.adapter' shared service.
     *
     * @return \Imagine\Gd\Imagine
     */
    protected function getSuluMedia_AdapterService()
    {
        return $this->services['sulu_media.adapter'] = new \Imagine\Gd\Imagine();
    }

    /**
     * Gets the public 'sulu_media.collection_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Collection\Manager\CollectionManager
     */
    protected function getSuluMedia_CollectionManagerService()
    {
        return $this->services['sulu_media.collection_manager'] = new \Sulu\Bundle\MediaBundle\Collection\Manager\CollectionManager(${($_ = isset($this->services['sulu_media.collection_repository']) ? $this->services['sulu_media.collection_repository'] : $this->get('sulu_media.collection_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.media']) ? $this->services['sulu.repository.media'] : $this->get('sulu.repository.media')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.format_manager']) ? $this->services['sulu_media.format_manager'] : $this->get('sulu_media.format_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.user']) ? $this->services['sulu.repository.user'] : $this->get('sulu.repository.user')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, NULL, 'sulu-50x50', array('view' => 64, 'add' => 32, 'edit' => 16, 'delete' => 8, 'archive' => 4, 'live' => 2, 'security' => 1));
    }

    /**
     * Gets the public 'sulu_media.collection_repository' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Entity\CollectionRepository
     */
    protected function getSuluMedia_CollectionRepositoryService()
    {
        return $this->services['sulu_media.collection_repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluMediaBundle:Collection');
    }

    /**
     * Gets the public 'sulu_media.disposition_type.resolver' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\DispositionType\DispositionTypeResolver
     */
    protected function getSuluMedia_DispositionType_ResolverService()
    {
        return $this->services['sulu_media.disposition_type.resolver'] = new \Sulu\Bundle\MediaBundle\Media\DispositionType\DispositionTypeResolver('attachment', array(), array());
    }

    /**
     * Gets the public 'sulu_media.file_validator' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FileValidator\FileValidator
     */
    protected function getSuluMedia_FileValidatorService()
    {
        return $this->services['sulu_media.file_validator'] = new \Sulu\Bundle\MediaBundle\Media\FileValidator\FileValidator();
    }

    /**
     * Gets the public 'sulu_media.file_version_meta_repository' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Entity\FileVersionMetaRepository
     */
    protected function getSuluMedia_FileVersionMetaRepositoryService()
    {
        return $this->services['sulu_media.file_version_meta_repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluMediaBundle:FileVersionMeta');
    }

    /**
     * Gets the public 'sulu_media.format_cache' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FormatCache\LocalFormatCache
     */
    protected function getSuluMedia_FormatCacheService()
    {
        return $this->services['sulu_media.format_cache'] = new \Sulu\Bundle\MediaBundle\Media\FormatCache\LocalFormatCache(${($_ = isset($this->services['filesystem']) ? $this->services['filesystem'] : $this->get('filesystem')) && false ?: '_'}, ($this->targetDirs[4].'/app/../web/uploads/media'), '/uploads/media/{slug}', 10, array('sulu-400x400' => array('key' => 'sulu-400x400', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact avatar (Sulu)', 'de' => 'Kontaktavatar (Sulu)', 'fr' => 'Avatar du contact (Sulu)', 'nl' => 'Contact avatar (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-400x400-inset' => array('key' => 'sulu-400x400-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization logo (Sulu)', 'de' => 'Organisationslogo (Sulu)', 'fr' => 'Logo d\'organisation (Sulu)', 'nl' => 'Organisatie logo (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-260x' => array('key' => 'sulu-260x', 'internal' => true, 'meta' => array('title' => array('en' => 'Masonry preview (Sulu)', 'de' => 'Masonry Vorschau (Sulu)', 'fr' => 'Prévisualisation maçonnerie (Sulu)', 'nl' => 'Masonry voorbeeld (Sulu)')), 'scale' => array('x' => 260, 'y' => NULL, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-170x170' => array('key' => 'sulu-170x170', 'internal' => true, 'meta' => array('title' => array('en' => 'Search (Sulu)', 'de' => 'Suche (Sulu)', 'fr' => 'Recherche (Sulu)', 'nl' => 'Zoeken (Sulu)')), 'scale' => array('x' => 170, 'y' => 170, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100' => array('key' => 'sulu-100x100', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact card (Sulu)', 'de' => 'Personenkarte (Sulu)', 'fr' => 'Carte personnelle (Sulu)', 'nl' => 'Contact kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100-inset' => array('key' => 'sulu-100x100-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization card (Sulu)', 'de' => 'Organisationskarte (Sulu)', 'fr' => 'Carte d\'organisation (Sulu)', 'nl' => 'Organisatie kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-50x50' => array('key' => 'sulu-50x50', 'internal' => true, 'meta' => array('title' => array('en' => 'Small thumbnail (Sulu)', 'de' => 'Kleines Thumbnail (Sulu)', 'fr' => 'Image miniature (Sulu)', 'nl' => 'Kleine thumbnail (Sulu)')), 'scale' => array('x' => 50, 'y' => 50, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array())));
    }

    /**
     * Gets the public 'sulu_media.format_cache_clearer' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FormatCache\FormatCacheClearer
     */
    protected function getSuluMedia_FormatCacheClearerService()
    {
        $this->services['sulu_media.format_cache_clearer'] = $instance = new \Sulu\Bundle\MediaBundle\Media\FormatCache\FormatCacheClearer();

        $instance->add(${($_ = isset($this->services['sulu_media.format_cache']) ? $this->services['sulu_media.format_cache'] : $this->get('sulu_media.format_cache')) && false ?: '_'}, 'local');

        return $instance;
    }

    /**
     * Gets the public 'sulu_media.format_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FormatManager\FormatManager
     */
    protected function getSuluMedia_FormatManagerService()
    {
        return $this->services['sulu_media.format_manager'] = new \Sulu\Bundle\MediaBundle\Media\FormatManager\FormatManager(${($_ = isset($this->services['sulu.repository.media']) ? $this->services['sulu.repository.media'] : $this->get('sulu.repository.media')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.format_cache']) ? $this->services['sulu_media.format_cache'] : $this->get('sulu_media.format_cache')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.image.converter']) ? $this->services['sulu_media.image.converter'] : $this->get('sulu_media.image.converter')) && false ?: '_'}, true, array('Expires' => '+1 month', 'Pragma' => 'public', 'Cache-Control' => 'public'), array('sulu-400x400' => array('key' => 'sulu-400x400', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact avatar (Sulu)', 'de' => 'Kontaktavatar (Sulu)', 'fr' => 'Avatar du contact (Sulu)', 'nl' => 'Contact avatar (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-400x400-inset' => array('key' => 'sulu-400x400-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization logo (Sulu)', 'de' => 'Organisationslogo (Sulu)', 'fr' => 'Logo d\'organisation (Sulu)', 'nl' => 'Organisatie logo (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-260x' => array('key' => 'sulu-260x', 'internal' => true, 'meta' => array('title' => array('en' => 'Masonry preview (Sulu)', 'de' => 'Masonry Vorschau (Sulu)', 'fr' => 'Prévisualisation maçonnerie (Sulu)', 'nl' => 'Masonry voorbeeld (Sulu)')), 'scale' => array('x' => 260, 'y' => NULL, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-170x170' => array('key' => 'sulu-170x170', 'internal' => true, 'meta' => array('title' => array('en' => 'Search (Sulu)', 'de' => 'Suche (Sulu)', 'fr' => 'Recherche (Sulu)', 'nl' => 'Zoeken (Sulu)')), 'scale' => array('x' => 170, 'y' => 170, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100' => array('key' => 'sulu-100x100', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact card (Sulu)', 'de' => 'Personenkarte (Sulu)', 'fr' => 'Carte personnelle (Sulu)', 'nl' => 'Contact kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100-inset' => array('key' => 'sulu-100x100-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization card (Sulu)', 'de' => 'Organisationskarte (Sulu)', 'fr' => 'Carte d\'organisation (Sulu)', 'nl' => 'Organisatie kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-50x50' => array('key' => 'sulu-50x50', 'internal' => true, 'meta' => array('title' => array('en' => 'Small thumbnail (Sulu)', 'de' => 'Kleines Thumbnail (Sulu)', 'fr' => 'Image miniature (Sulu)', 'nl' => 'Kleine thumbnail (Sulu)')), 'scale' => array('x' => 50, 'y' => 50, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array())), array(0 => 'image/*', 1 => 'video/*', 2 => 'application/pdf'));
    }

    /**
     * Gets the public 'sulu_media.format_options_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\FormatOptions\FormatOptionsManager
     */
    protected function getSuluMedia_FormatOptionsManagerService()
    {
        return $this->services['sulu_media.format_options_manager'] = new \Sulu\Bundle\MediaBundle\Media\FormatOptions\FormatOptionsManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.format_options_repository']) ? $this->services['sulu_media.format_options_repository'] : $this->get('sulu_media.format_options_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.format_manager']) ? $this->services['sulu_media.format_manager'] : $this->get('sulu_media.format_manager')) && false ?: '_'}, array('sulu-400x400' => array('key' => 'sulu-400x400', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact avatar (Sulu)', 'de' => 'Kontaktavatar (Sulu)', 'fr' => 'Avatar du contact (Sulu)', 'nl' => 'Contact avatar (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-400x400-inset' => array('key' => 'sulu-400x400-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization logo (Sulu)', 'de' => 'Organisationslogo (Sulu)', 'fr' => 'Logo d\'organisation (Sulu)', 'nl' => 'Organisatie logo (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-260x' => array('key' => 'sulu-260x', 'internal' => true, 'meta' => array('title' => array('en' => 'Masonry preview (Sulu)', 'de' => 'Masonry Vorschau (Sulu)', 'fr' => 'Prévisualisation maçonnerie (Sulu)', 'nl' => 'Masonry voorbeeld (Sulu)')), 'scale' => array('x' => 260, 'y' => NULL, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-170x170' => array('key' => 'sulu-170x170', 'internal' => true, 'meta' => array('title' => array('en' => 'Search (Sulu)', 'de' => 'Suche (Sulu)', 'fr' => 'Recherche (Sulu)', 'nl' => 'Zoeken (Sulu)')), 'scale' => array('x' => 170, 'y' => 170, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100' => array('key' => 'sulu-100x100', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact card (Sulu)', 'de' => 'Personenkarte (Sulu)', 'fr' => 'Carte personnelle (Sulu)', 'nl' => 'Contact kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100-inset' => array('key' => 'sulu-100x100-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization card (Sulu)', 'de' => 'Organisationskarte (Sulu)', 'fr' => 'Carte d\'organisation (Sulu)', 'nl' => 'Organisatie kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-50x50' => array('key' => 'sulu-50x50', 'internal' => true, 'meta' => array('title' => array('en' => 'Small thumbnail (Sulu)', 'de' => 'Kleines Thumbnail (Sulu)', 'fr' => 'Image miniature (Sulu)', 'nl' => 'Kleine thumbnail (Sulu)')), 'scale' => array('x' => 50, 'y' => 50, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array())));
    }

    /**
     * Gets the public 'sulu_media.format_options_repository' shared service.
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    protected function getSuluMedia_FormatOptionsRepositoryService()
    {
        return $this->services['sulu_media.format_options_repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluMediaBundle:FormatOptions');
    }

    /**
     * Gets the public 'sulu_media.image.converter' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\ImagineImageConverter
     */
    protected function getSuluMedia_Image_ConverterService()
    {
        return $this->services['sulu_media.image.converter'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\ImagineImageConverter(${($_ = isset($this->services['sulu_media.adapter']) ? $this->services['sulu_media.adapter'] : $this->get('sulu_media.adapter')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.storage']) ? $this->services['sulu_media.storage'] : $this->get('sulu_media.storage')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.image.media_extractor']) ? $this->services['sulu_media.image.media_extractor'] : $this->get('sulu_media.image.media_extractor')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.image.transformation_pool']) ? $this->services['sulu_media.image.transformation_pool'] : $this->get('sulu_media.image.transformation_pool')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.image.focus']) ? $this->services['sulu_media.image.focus'] : $this->get('sulu_media.image.focus')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.image.scaler']) ? $this->services['sulu_media.image.scaler'] : $this->get('sulu_media.image.scaler')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.image.cropper']) ? $this->services['sulu_media.image.cropper'] : $this->get('sulu_media.image.cropper')) && false ?: '_'}, array('sulu-400x400' => array('key' => 'sulu-400x400', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact avatar (Sulu)', 'de' => 'Kontaktavatar (Sulu)', 'fr' => 'Avatar du contact (Sulu)', 'nl' => 'Contact avatar (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-400x400-inset' => array('key' => 'sulu-400x400-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization logo (Sulu)', 'de' => 'Organisationslogo (Sulu)', 'fr' => 'Logo d\'organisation (Sulu)', 'nl' => 'Organisatie logo (Sulu)')), 'scale' => array('x' => 400, 'y' => 400, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-260x' => array('key' => 'sulu-260x', 'internal' => true, 'meta' => array('title' => array('en' => 'Masonry preview (Sulu)', 'de' => 'Masonry Vorschau (Sulu)', 'fr' => 'Prévisualisation maçonnerie (Sulu)', 'nl' => 'Masonry voorbeeld (Sulu)')), 'scale' => array('x' => 260, 'y' => NULL, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-170x170' => array('key' => 'sulu-170x170', 'internal' => true, 'meta' => array('title' => array('en' => 'Search (Sulu)', 'de' => 'Suche (Sulu)', 'fr' => 'Recherche (Sulu)', 'nl' => 'Zoeken (Sulu)')), 'scale' => array('x' => 170, 'y' => 170, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100' => array('key' => 'sulu-100x100', 'internal' => true, 'meta' => array('title' => array('en' => 'Contact card (Sulu)', 'de' => 'Personenkarte (Sulu)', 'fr' => 'Carte personnelle (Sulu)', 'nl' => 'Contact kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-100x100-inset' => array('key' => 'sulu-100x100-inset', 'internal' => true, 'meta' => array('title' => array('en' => 'Organization card (Sulu)', 'de' => 'Organisationskarte (Sulu)', 'fr' => 'Carte d\'organisation (Sulu)', 'nl' => 'Organisatie kaart (Sulu)')), 'scale' => array('x' => 100, 'y' => 100, 'mode' => 'inset', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array()), 'sulu-50x50' => array('key' => 'sulu-50x50', 'internal' => true, 'meta' => array('title' => array('en' => 'Small thumbnail (Sulu)', 'de' => 'Kleines Thumbnail (Sulu)', 'fr' => 'Image miniature (Sulu)', 'nl' => 'Kleine thumbnail (Sulu)')), 'scale' => array('x' => 50, 'y' => 50, 'mode' => 'outbound', 'retina' => false, 'forceRatio' => true), 'transformations' => array(), 'options' => array())));
    }

    /**
     * Gets the public 'sulu_media.image.cropper' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Cropper\Cropper
     */
    protected function getSuluMedia_Image_CropperService()
    {
        return $this->services['sulu_media.image.cropper'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Cropper\Cropper();
    }

    /**
     * Gets the public 'sulu_media.image.focus' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Focus\Focus
     */
    protected function getSuluMedia_Image_FocusService()
    {
        return $this->services['sulu_media.image.focus'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Focus\Focus();
    }

    /**
     * Gets the public 'sulu_media.image.media_extractor' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\MediaImageExtractor
     */
    protected function getSuluMedia_Image_MediaExtractorService()
    {
        return $this->services['sulu_media.image.media_extractor'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\MediaImageExtractor(${($_ = isset($this->services['sulu_media.adapter']) ? $this->services['sulu_media.adapter'] : $this->get('sulu_media.adapter')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.video_thumbnail_generator']) ? $this->services['sulu_media.video_thumbnail_generator'] : $this->get('sulu_media.video_thumbnail_generator')) && false ?: '_'}, 'gs');
    }

    /**
     * Gets the public 'sulu_media.image.scaler' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Scaler\Scaler
     */
    protected function getSuluMedia_Image_ScalerService()
    {
        return $this->services['sulu_media.image.scaler'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Scaler\Scaler();
    }

    /**
     * Gets the public 'sulu_media.image.transformation.crop' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\CropTransformation
     */
    protected function getSuluMedia_Image_Transformation_CropService()
    {
        return $this->services['sulu_media.image.transformation.crop'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\CropTransformation();
    }

    /**
     * Gets the public 'sulu_media.image.transformation.paste' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\PasteTransformation
     */
    protected function getSuluMedia_Image_Transformation_PasteService()
    {
        return $this->services['sulu_media.image.transformation.paste'] = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\Transformation\PasteTransformation(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_media.image.transformation_pool' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\ImageConverter\TransformationPool
     */
    protected function getSuluMedia_Image_TransformationPoolService()
    {
        $this->services['sulu_media.image.transformation_pool'] = $instance = new \Sulu\Bundle\MediaBundle\Media\ImageConverter\TransformationPool();

        $instance->add(${($_ = isset($this->services['sulu_media.image.transformation.crop']) ? $this->services['sulu_media.image.transformation.crop'] : $this->get('sulu_media.image.transformation.crop')) && false ?: '_'}, 'crop');
        $instance->add(${($_ = isset($this->services['sulu_media.image.transformation.paste']) ? $this->services['sulu_media.image.transformation.paste'] : $this->get('sulu_media.image.transformation.paste')) && false ?: '_'}, 'paste');

        return $instance;
    }

    /**
     * Gets the public 'sulu_media.markup' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Markup\MediaTag
     */
    protected function getSuluMedia_MarkupService()
    {
        return $this->services['sulu_media.markup'] = new \Sulu\Bundle\MediaBundle\Markup\MediaTag(${($_ = isset($this->services['sulu.repository.media']) ? $this->services['sulu.repository.media'] : $this->get('sulu.repository.media')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_media.media_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\Manager\MediaManager
     */
    protected function getSuluMedia_MediaManagerService()
    {
        return $this->services['sulu_media.media_manager'] = new \Sulu\Bundle\MediaBundle\Media\Manager\MediaManager(${($_ = isset($this->services['sulu.repository.media']) ? $this->services['sulu.repository.media'] : $this->get('sulu.repository.media')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.collection_repository']) ? $this->services['sulu_media.collection_repository'] : $this->get('sulu_media.collection_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.user']) ? $this->services['sulu.repository.user'] : $this->get('sulu.repository.user')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.category']) ? $this->services['sulu.repository.category'] : $this->get('sulu.repository.category')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.storage']) ? $this->services['sulu_media.storage'] : $this->get('sulu_media.storage')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.file_validator']) ? $this->services['sulu_media.file_validator'] : $this->get('sulu_media.file_validator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.format_manager']) ? $this->services['sulu_media.format_manager'] : $this->get('sulu_media.format_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_tag.tag_manager']) ? $this->services['sulu_tag.tag_manager'] : $this->get('sulu_tag.tag_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.type_manager']) ? $this->services['sulu_media.type_manager'] : $this->get('sulu_media.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.path_cleaner']) ? $this->services['sulu.content.path_cleaner'] : $this->get('sulu.content.path_cleaner')) && false ?: '_'}, NULL, NULL, ${($_ = isset($this->services['dubture_ffmpeg.ffprobe']) ? $this->services['dubture_ffmpeg.ffprobe'] : $this->get('dubture_ffmpeg.ffprobe')) && false ?: '_'}, array('view' => 64, 'add' => 32, 'edit' => 16, 'delete' => 8, 'archive' => 4, 'live' => 2, 'security' => 1), '/media/{id}/download/{slug}', '16MB', NULL);
    }

    /**
     * Gets the public 'sulu_media.permission_listener' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Search\EventListener\PermissionListener
     */
    protected function getSuluMedia_PermissionListenerService()
    {
        return $this->services['sulu_media.permission_listener'] = new \Sulu\Bundle\MediaBundle\Search\EventListener\PermissionListener(${($_ = isset($this->services['sulu_media.file_version_meta_repository']) ? $this->services['sulu_media.file_version_meta_repository'] : $this->get('sulu_media.file_version_meta_repository')) && false ?: '_'}, ${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_media.search.subscriber.media' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Search\Subscriber\MediaSearchSubscriber
     */
    protected function getSuluMedia_Search_Subscriber_MediaService()
    {
        return $this->services['sulu_media.search.subscriber.media'] = new \Sulu\Bundle\MediaBundle\Search\Subscriber\MediaSearchSubscriber(${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_search.search.factory']) ? $this->services['sulu_search.search.factory'] : $this->get('sulu_search.search.factory')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'}, array(0 => 'image/*', 1 => 'video/*', 2 => 'application/pdf'), 'sulu-170x170');
    }

    /**
     * Gets the public 'sulu_media.search.subscriber.structure_media' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Search\Subscriber\StructureMediaSearchSubscriber
     */
    protected function getSuluMedia_Search_Subscriber_StructureMediaService()
    {
        return $this->services['sulu_media.search.subscriber.structure_media'] = new \Sulu\Bundle\MediaBundle\Search\Subscriber\StructureMediaSearchSubscriber(${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, 'sulu-170x170');
    }

    /**
     * Gets the public 'sulu_media.security_context' shared service.
     *
     * @return \Sulu\Component\Security\Authorization\SecurityCondition
     */
    protected function getSuluMedia_SecurityContextService()
    {
        return $this->services['sulu_media.security_context'] = new \Sulu\Component\Security\Authorization\SecurityCondition('sulu.media.collections');
    }

    /**
     * Gets the public 'sulu_media.smart_content.data_provider.media' shared service.
     *
     * @return \Sulu\Component\Media\SmartContent\MediaDataProvider
     */
    protected function getSuluMedia_SmartContent_DataProvider_MediaService()
    {
        return $this->services['sulu_media.smart_content.data_provider.media'] = new \Sulu\Component\Media\SmartContent\MediaDataProvider(${($_ = isset($this->services['sulu_media.smart_content.data_provider.media.repository']) ? $this->services['sulu_media.smart_content.data_provider.media.repository'] : $this->get('sulu_media.smart_content.data_provider.media.repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.collection_manager']) ? $this->services['sulu_media.collection_manager'] : $this->get('sulu_media.collection_manager')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_media.smart_content.data_provider.media.repository' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Entity\MediaDataProviderRepository
     */
    protected function getSuluMedia_SmartContent_DataProvider_Media_RepositoryService()
    {
        return $this->services['sulu_media.smart_content.data_provider.media.repository'] = new \Sulu\Bundle\MediaBundle\Entity\MediaDataProviderRepository(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'}, 'Sulu\\Bundle\\MediaBundle\\Entity\\Media', 'SuluMediaBundle:Collection');
    }

    /**
     * Gets the public 'sulu_media.storage' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\Storage\LocalStorage
     */
    protected function getSuluMedia_StorageService()
    {
        return $this->services['sulu_media.storage'] = new \Sulu\Bundle\MediaBundle\Media\Storage\LocalStorage(($this->targetDirs[3].'/uploads/media'), 10, ${($_ = isset($this->services['sulu_media.storage.file_system']) ? $this->services['sulu_media.storage.file_system'] : $this->get('sulu_media.storage.file_system')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_media.storage.file_system' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected function getSuluMedia_Storage_FileSystemService()
    {
        return $this->services['sulu_media.storage.file_system'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the public 'sulu_media.system_collections.builder' shared service.
     *
     * @return \Sulu\Component\Media\SystemCollections\SystemCollectionBuilder
     */
    protected function getSuluMedia_SystemCollections_BuilderService()
    {
        return $this->services['sulu_media.system_collections.builder'] = new \Sulu\Component\Media\SystemCollections\SystemCollectionBuilder();
    }

    /**
     * Gets the public 'sulu_media.system_collections.cache' shared service.
     *
     * @return \Sulu\Component\Cache\DataCache
     */
    protected function getSuluMedia_SystemCollections_CacheService()
    {
        return $this->services['sulu_media.system_collections.cache'] = new \Sulu\Component\Cache\DataCache((__DIR__.'/sulu/system_collection.cache'));
    }

    /**
     * Gets the public 'sulu_media.system_collections.manager' shared service.
     *
     * @return \Sulu\Component\Media\SystemCollections\SystemCollectionManager
     */
    protected function getSuluMedia_SystemCollections_ManagerService()
    {
        return $this->services['sulu_media.system_collections.manager'] = new \Sulu\Component\Media\SystemCollections\SystemCollectionManager(array('sulu_media' => array('meta_title' => array('en' => 'Sulu media', 'de' => 'Sulu Medien'), 'collections' => array('preview_image' => array('meta_title' => array('en' => 'Preview images', 'de' => 'Vorschaubilder')))), 'sulu_contact' => array('meta_title' => array('en' => 'Sulu contacts', 'de' => 'Sulu Kontakte'), 'collections' => array('contact' => array('meta_title' => array('en' => 'People', 'de' => 'Personen')), 'account' => array('meta_title' => array('en' => 'Organizations', 'de' => 'Organisationen'))))), ${($_ = isset($this->services['sulu_media.collection_manager']) ? $this->services['sulu_media.collection_manager'] : $this->get('sulu_media.collection_manager')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, NULL, ${($_ = isset($this->services['sulu_media.system_collections.cache']) ? $this->services['sulu_media.system_collections.cache'] : $this->get('sulu_media.system_collections.cache')) && false ?: '_'}, 'en');
    }

    /**
     * Gets the public 'sulu_media.twig_extension.disposition_type' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Twig\DispositionTypeTwigExtension
     */
    protected function getSuluMedia_TwigExtension_DispositionTypeService()
    {
        return $this->services['sulu_media.twig_extension.disposition_type'] = new \Sulu\Bundle\MediaBundle\Twig\DispositionTypeTwigExtension();
    }

    /**
     * Gets the public 'sulu_media.twig_extension.media' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Twig\MediaTwigExtension
     */
    protected function getSuluMedia_TwigExtension_MediaService()
    {
        return $this->services['sulu_media.twig_extension.media'] = new \Sulu\Bundle\MediaBundle\Twig\MediaTwigExtension(${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_media.type.media_selection' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Content\Types\MediaSelectionContentType
     */
    protected function getSuluMedia_Type_MediaSelectionService()
    {
        return $this->services['sulu_media.type.media_selection'] = new \Sulu\Bundle\MediaBundle\Content\Types\MediaSelectionContentType(${($_ = isset($this->services['sulu_media.media_manager']) ? $this->services['sulu_media.media_manager'] : $this->get('sulu_media.media_manager')) && false ?: '_'}, 'SuluMediaBundle:Template:content-types/media-selection.html.twig');
    }

    /**
     * Gets the public 'sulu_media.type_manager' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\TypeManager\TypeManager
     */
    protected function getSuluMedia_TypeManagerService()
    {
        return $this->services['sulu_media.type_manager'] = new \Sulu\Bundle\MediaBundle\Media\TypeManager\TypeManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, array(0 => array('type' => 'document', 'mimeTypes' => array(0 => '*')), 1 => array('type' => 'image', 'mimeTypes' => array(0 => 'image/*')), 2 => array('type' => 'video', 'mimeTypes' => array(0 => 'video/*')), 3 => array('type' => 'audio', 'mimeTypes' => array(0 => 'audio/*'))), array(0 => 'file/exe'));
    }

    /**
     * Gets the public 'sulu_media.video_thumbnail_generator' shared service.
     *
     * @return \Sulu\Bundle\MediaBundle\Media\Video\VideoThumbnailService
     */
    protected function getSuluMedia_VideoThumbnailGeneratorService()
    {
        return $this->services['sulu_media.video_thumbnail_generator'] = new \Sulu\Bundle\MediaBundle\Media\Video\VideoThumbnailService(${($_ = isset($this->services['dubture_ffmpeg.ffmpeg']) ? $this->services['dubture_ffmpeg.ffmpeg'] : $this->get('dubture_ffmpeg.ffmpeg')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_navigationContext.document.subscriber.navigation_context' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\NavigationContextSubscriber
     */
    protected function getSuluNavigationContext_Document_Subscriber_NavigationContextService()
    {
        return $this->services['sulu_navigationContext.document.subscriber.navigation_context'] = new \Sulu\Component\Content\Document\Subscriber\NavigationContextSubscriber();
    }

    /**
     * Gets the public 'sulu_redirect_type.document.subscriber.redirect_type' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\RedirectTypeSubscriber
     */
    protected function getSuluRedirectType_Document_Subscriber_RedirectTypeService()
    {
        return $this->services['sulu_redirect_type.document.subscriber.redirect_type'] = new \Sulu\Component\Content\Document\Subscriber\RedirectTypeSubscriber();
    }

    /**
     * Gets the public 'sulu_resource_segment.document.subscriber.resource_segment' shared service.
     *
     * @return \Sulu\Component\Content\Document\Subscriber\ResourceSegmentSubscriber
     */
    protected function getSuluResourceSegment_Document_Subscriber_ResourceSegmentService()
    {
        $a = ${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'};

        return $this->services['sulu_resource_segment.document.subscriber.resource_segment'] = new \Sulu\Component\Content\Document\Subscriber\ResourceSegmentSubscriber(${($_ = isset($this->services['sulu_document_manager.property_encoder']) ? $this->services['sulu_document_manager.property_encoder'] : $this->getSuluDocumentManager_PropertyEncoderService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy_pool']) ? $this->services['sulu.content.resource_locator.strategy_pool'] : $this->get('sulu.content.resource_locator.strategy_pool')) && false ?: '_'}, $a, $a);
    }

    /**
     * Gets the public 'sulu_route.chain_generator' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Generator\ChainRouteGenerator
     */
    protected function getSuluRoute_ChainGeneratorService()
    {
        return $this->services['sulu_route.chain_generator'] = new \Sulu\Bundle\RouteBundle\Generator\ChainRouteGenerator(array(), array(), ${($_ = isset($this->services['sulu.repository.route']) ? $this->services['sulu.repository.route'] : $this->get('sulu.repository.route')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.content_type' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Content\Type\RouteContentType
     */
    protected function getSuluRoute_ContentTypeService()
    {
        return $this->services['sulu_route.content_type'] = new \Sulu\Bundle\RouteBundle\Content\Type\RouteContentType('SuluRouteBundle:Template:content-types/route.html.twig');
    }

    /**
     * Gets the public 'sulu_route.generator.expression_token_provider' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Generator\SymfonyExpressionTokenProvider
     */
    protected function getSuluRoute_Generator_ExpressionTokenProviderService()
    {
        return $this->services['sulu_route.generator.expression_token_provider'] = new \Sulu\Bundle\RouteBundle\Generator\SymfonyExpressionTokenProvider(${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.generator.route_generator' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Generator\RouteGenerator
     */
    protected function getSuluRoute_Generator_RouteGeneratorService()
    {
        return $this->services['sulu_route.generator.route_generator'] = new \Sulu\Bundle\RouteBundle\Generator\RouteGenerator(${($_ = isset($this->services['sulu_route.generator.expression_token_provider']) ? $this->services['sulu_route.generator.expression_token_provider'] : $this->get('sulu_route.generator.expression_token_provider')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.slugifier']) ? $this->services['sulu_document_manager.slugifier'] : $this->getSuluDocumentManager_SlugifierService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.manager.conflict_resolver.auto_increment' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Manager\AutoIncrementConflictResolver
     */
    protected function getSuluRoute_Manager_ConflictResolver_AutoIncrementService()
    {
        return $this->services['sulu_route.manager.conflict_resolver.auto_increment'] = new \Sulu\Bundle\RouteBundle\Manager\AutoIncrementConflictResolver(${($_ = isset($this->services['sulu.repository.route']) ? $this->services['sulu.repository.route'] : $this->get('sulu.repository.route')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.manager.route_manager' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Manager\RouteManager
     */
    protected function getSuluRoute_Manager_RouteManagerService()
    {
        return $this->services['sulu_route.manager.route_manager'] = new \Sulu\Bundle\RouteBundle\Manager\RouteManager(${($_ = isset($this->services['sulu_route.chain_generator']) ? $this->services['sulu_route.chain_generator'] : $this->get('sulu_route.chain_generator')) && false ?: '_'}, ${($_ = isset($this->services['sulu_route.manager.conflict_resolver.auto_increment']) ? $this->services['sulu_route.manager.conflict_resolver.auto_increment'] : $this->get('sulu_route.manager.conflict_resolver.auto_increment')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.route']) ? $this->services['sulu.repository.route'] : $this->get('sulu.repository.route')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.routing.defaults_provider' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Routing\Defaults\RouteDefaultsProvider
     */
    protected function getSuluRoute_Routing_DefaultsProviderService()
    {
        return $this->services['sulu_route.routing.defaults_provider'] = new \Sulu\Bundle\RouteBundle\Routing\Defaults\RouteDefaultsProvider(array(0 => ${($_ = isset($this->services['sulu_content.preview.defaults_provider']) ? $this->services['sulu_content.preview.defaults_provider'] : $this->get('sulu_content.preview.defaults_provider')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_route.routing.final_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher
     */
    protected function getSuluRoute_Routing_FinalMatcherService()
    {
        return $this->services['sulu_route.routing.final_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\UrlMatcher(${($_ = isset($this->services['cmf_routing.matcher.dummy_collection']) ? $this->services['cmf_routing.matcher.dummy_collection'] : $this->getCmfRouting_Matcher_DummyCollectionService()) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.matcher.dummy_context']) ? $this->services['cmf_routing.matcher.dummy_context'] : $this->getCmfRouting_Matcher_DummyContextService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.routing.generator' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\ProviderBasedGenerator
     */
    protected function getSuluRoute_Routing_GeneratorService()
    {
        return $this->services['sulu_route.routing.generator'] = new \Symfony\Cmf\Component\Routing\ProviderBasedGenerator(${($_ = isset($this->services['sulu_route.routing.provider']) ? $this->services['sulu_route.routing.provider'] : $this->get('sulu_route.routing.provider')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.routing.nested_matcher' shared service.
     *
     * @return \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher
     */
    protected function getSuluRoute_Routing_NestedMatcherService()
    {
        return $this->services['sulu_route.routing.nested_matcher'] = new \Symfony\Cmf\Component\Routing\NestedMatcher\NestedMatcher(${($_ = isset($this->services['sulu_route.routing.provider']) ? $this->services['sulu_route.routing.provider'] : $this->get('sulu_route.routing.provider')) && false ?: '_'}, ${($_ = isset($this->services['sulu_route.routing.final_matcher']) ? $this->services['sulu_route.routing.final_matcher'] : $this->get('sulu_route.routing.final_matcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.routing.provider' shared service.
     *
     * @return \Sulu\Bundle\RouteBundle\Routing\RouteProvider
     */
    protected function getSuluRoute_Routing_ProviderService()
    {
        return $this->services['sulu_route.routing.provider'] = new \Sulu\Bundle\RouteBundle\Routing\RouteProvider(${($_ = isset($this->services['sulu.repository.route']) ? $this->services['sulu.repository.route'] : $this->get('sulu.repository.route')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_route.routing.defaults_provider']) ? $this->services['sulu_route.routing.defaults_provider'] : $this->get('sulu_route.routing.defaults_provider')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['sulu_route.routing.proxy_factory']) ? $this->services['sulu_route.routing.proxy_factory'] : $this->get('sulu_route.routing.proxy_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.routing.proxy_factory' shared service.
     *
     * @return \ProxyManager\Factory\LazyLoadingValueHolderFactory
     */
    protected function getSuluRoute_Routing_ProxyFactoryService()
    {
        return $this->services['sulu_route.routing.proxy_factory'] = new \ProxyManager\Factory\LazyLoadingValueHolderFactory(${($_ = isset($this->services['sulu_core.proxy_manager.configuration']) ? $this->services['sulu_core.proxy_manager.configuration'] : $this->getSuluCore_ProxyManager_ConfigurationService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_route.routing.router' shared service.
     *
     * @return \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter
     */
    protected function getSuluRoute_Routing_RouterService()
    {
        return $this->services['sulu_route.routing.router'] = new \Symfony\Cmf\Bundle\RoutingBundle\Routing\DynamicRouter(${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_route.routing.nested_matcher']) ? $this->services['sulu_route.routing.nested_matcher'] : $this->get('sulu_route.routing.nested_matcher')) && false ?: '_'}, ${($_ = isset($this->services['sulu_route.routing.generator']) ? $this->services['sulu_route.routing.generator'] : $this->get('sulu_route.routing.generator')) && false ?: '_'}, NULL, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['sulu_route.routing.provider']) ? $this->services['sulu_route.routing.provider'] : $this->get('sulu_route.routing.provider')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_search.build.index' shared service.
     *
     * @return \Sulu\Bundle\SearchBundle\Build\IndexBuilder
     */
    protected function getSuluSearch_Build_IndexService()
    {
        return $this->services['sulu_search.build.index'] = new \Sulu\Bundle\SearchBundle\Build\IndexBuilder();
    }

    /**
     * Gets the public 'sulu_search.controller.website_search' shared service.
     *
     * @return \Sulu\Bundle\SearchBundle\Controller\WebsiteSearchController
     */
    protected function getSuluSearch_Controller_WebsiteSearchService()
    {
        return $this->services['sulu_search.controller.website_search'] = new \Sulu\Bundle\SearchBundle\Controller\WebsiteSearchController(${($_ = isset($this->services['massive_search.search_manager']) ? $this->services['massive_search.search_manager'] : $this->get('massive_search.search_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.resolver.parameter']) ? $this->services['sulu_website.resolver.parameter'] : $this->get('sulu_website.resolver.parameter')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_search.event_listener.hit' shared service.
     *
     * @return \Sulu\Bundle\ContentBundle\Search\EventListener\HitListener
     */
    protected function getSuluSearch_EventListener_HitService()
    {
        return $this->services['sulu_search.event_listener.hit'] = new \Sulu\Bundle\ContentBundle\Search\EventListener\HitListener(${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_search.index_configuration_provider' shared service.
     *
     * @return \Sulu\Bundle\SearchBundle\Search\Configuration\IndexConfigurationProvider
     */
    protected function getSuluSearch_IndexConfigurationProviderService()
    {
        return $this->services['sulu_search.index_configuration_provider'] = new \Sulu\Bundle\SearchBundle\Search\Configuration\IndexConfigurationProvider(array('snippet' => array('security_context' => 'sulu.global.snippets', 'contexts' => array()), 'media' => array('security_context' => 'sulu.media.collections', 'contexts' => array()), 'contact' => array('security_context' => 'sulu.contact.people', 'contexts' => array()), 'account' => array('security_context' => 'sulu.contact.organizations', 'contexts' => array()), 'page_example' => array('security_context' => 'sulu.webspaces.example', 'name' => 'example.com'), 'page_example_published' => array('security_context' => 'sulu.webspaces.example', 'name' => 'example.com', 'contexts' => array(0 => 'website'))));
    }

    /**
     * Gets the public 'sulu_search.search.factory' shared service.
     *
     * @return \Sulu\Bundle\SearchBundle\Search\Factory
     */
    protected function getSuluSearch_Search_FactoryService()
    {
        return $this->services['sulu_search.search.factory'] = new \Sulu\Bundle\SearchBundle\Search\Factory();
    }

    /**
     * Gets the public 'sulu_security.access_control_manager' shared service.
     *
     * @return \Sulu\Component\Security\Authorization\AccessControl\AccessControlManager
     */
    protected function getSuluSecurity_AccessControlManagerService()
    {
        return $this->services['sulu_security.access_control_manager'] = new \Sulu\Component\Security\Authorization\AccessControl\AccessControlManager(${($_ = isset($this->services['sulu_security.mask_converter']) ? $this->services['sulu_security.mask_converter'] : $this->get('sulu_security.mask_converter')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_security.authentication_entry_point' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Security\AuthenticationEntryPoint
     */
    protected function getSuluSecurity_AuthenticationEntryPointService()
    {
        return $this->services['sulu_security.authentication_entry_point'] = new \Sulu\Bundle\SecurityBundle\Security\AuthenticationEntryPoint(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_security.authentication_handler' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Security\AuthenticationHandler
     */
    protected function getSuluSecurity_AuthenticationHandlerService()
    {
        return $this->services['sulu_security.authentication_handler'] = new \Sulu\Bundle\SecurityBundle\Security\AuthenticationHandler(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'}, ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_security.build.user' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Build\UserBuilder
     */
    protected function getSuluSecurity_Build_UserService()
    {
        return $this->services['sulu_security.build.user'] = new \Sulu\Bundle\SecurityBundle\Build\UserBuilder();
    }

    /**
     * Gets the public 'sulu_security.document.serializer.subscriber.security' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Serializer\Subscriber\SecuritySubscriber
     */
    protected function getSuluSecurity_Document_Serializer_Subscriber_SecurityService()
    {
        return $this->services['sulu_security.document.serializer.subscriber.security'] = new \Sulu\Bundle\SecurityBundle\Serializer\Subscriber\SecuritySubscriber(${($_ = isset($this->services['sulu_security.access_control_manager']) ? $this->services['sulu_security.access_control_manager'] : $this->get('sulu_security.access_control_manager')) && false ?: '_'}, NULL);
    }

    /**
     * Gets the public 'sulu_security.group_repository' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Entity\GroupRepository
     */
    protected function getSuluSecurity_GroupRepositoryService()
    {
        return $this->services['sulu_security.group_repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluSecurityBundle:Group');
    }

    /**
     * Gets the public 'sulu_security.mask_converter' shared service.
     *
     * @return \Sulu\Component\Security\Authorization\MaskConverter
     */
    protected function getSuluSecurity_MaskConverterService()
    {
        return $this->services['sulu_security.mask_converter'] = new \Sulu\Component\Security\Authorization\MaskConverter(array('view' => 64, 'add' => 32, 'edit' => 16, 'delete' => 8, 'archive' => 4, 'live' => 2, 'security' => 1));
    }

    /**
     * Gets the public 'sulu_security.salt_generator' shared service.
     *
     * @return \Sulu\Component\Security\Authentication\SaltGenerator
     */
    protected function getSuluSecurity_SaltGeneratorService()
    {
        return $this->services['sulu_security.salt_generator'] = new \Sulu\Component\Security\Authentication\SaltGenerator();
    }

    /**
     * Gets the public 'sulu_security.token_generator' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Util\TokenGenerator
     */
    protected function getSuluSecurity_TokenGeneratorService()
    {
        return $this->services['sulu_security.token_generator'] = new \Sulu\Bundle\SecurityBundle\Util\TokenGenerator();
    }

    /**
     * Gets the public 'sulu_security.twig_extension.user' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\Twig\UserTwigExtension
     */
    protected function getSuluSecurity_TwigExtension_UserService()
    {
        return $this->services['sulu_security.twig_extension.user'] = new \Sulu\Bundle\SecurityBundle\Twig\UserTwigExtension(${($_ = isset($this->services['sulu_security.twig_extension.user.cache']) ? $this->services['sulu_security.twig_extension.user.cache'] : $this->get('sulu_security.twig_extension.user.cache')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.user']) ? $this->services['sulu.repository.user'] : $this->get('sulu.repository.user')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_security.twig_extension.user.cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getSuluSecurity_TwigExtension_User_CacheService()
    {
        return $this->services['sulu_security.twig_extension.user.cache'] = new \Doctrine\Common\Cache\ArrayCache();
    }

    /**
     * Gets the public 'sulu_security.user_manager' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\UserManager\UserManager
     */
    protected function getSuluSecurity_UserManagerService()
    {
        return $this->services['sulu_security.user_manager'] = new \Sulu\Bundle\SecurityBundle\UserManager\UserManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, NULL, ${($_ = isset($this->services['sulu.repository.role']) ? $this->services['sulu.repository.role'] : $this->get('sulu.repository.role')) && false ?: '_'}, ${($_ = isset($this->services['sulu_security.group_repository']) ? $this->services['sulu_security.group_repository'] : $this->get('sulu_security.group_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_contact.contact_manager']) ? $this->services['sulu_contact.contact_manager'] : $this->get('sulu_contact.contact_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_security.salt_generator']) ? $this->services['sulu_security.salt_generator'] : $this->get('sulu_security.salt_generator')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.user']) ? $this->services['sulu.repository.user'] : $this->get('sulu.repository.user')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_security.user_provider' shared service.
     *
     * @return \Sulu\Bundle\SecurityBundle\User\UserProvider
     */
    protected function getSuluSecurity_UserProviderService()
    {
        return $this->services['sulu_security.user_provider'] = new \Sulu\Bundle\SecurityBundle\User\UserProvider(${($_ = isset($this->services['sulu_security.user_repository']) ? $this->services['sulu_security.user_repository'] : $this->get('sulu_security.user_repository')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'Sulu');
    }

    /**
     * Gets the public 'sulu_security.user_repository' shared service.
     *
     * @return \Sulu\Component\Security\Authentication\UserRepository
     */
    protected function getSuluSecurity_UserRepositoryService()
    {
        return $this->services['sulu_security.user_repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('Sulu\\Bundle\\SecurityBundle\\Entity\\User');
    }

    /**
     * Gets the public 'sulu_security.user_setting_repository' shared service.
     *
     * @return \Sulu\Component\Security\Authentication\UserSettingRepository
     */
    protected function getSuluSecurity_UserSettingRepositoryService()
    {
        return $this->services['sulu_security.user_setting_repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluSecurityBundle:UserSetting');
    }

    /**
     * Gets the public 'sulu_snippet.content.snippet' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Content\SnippetContent
     */
    protected function getSuluSnippet_Content_SnippetService()
    {
        return $this->services['sulu_snippet.content.snippet'] = new \Sulu\Bundle\SnippetBundle\Content\SnippetContent(${($_ = isset($this->services['sulu_snippet.default_snippet.manager']) ? $this->services['sulu_snippet.default_snippet.manager'] : $this->get('sulu_snippet.default_snippet.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_snippet.resolver']) ? $this->services['sulu_snippet.resolver'] : $this->get('sulu_snippet.resolver')) && false ?: '_'}, ${($_ = isset($this->services['sulu_snippet.reference_store.snippet']) ? $this->services['sulu_snippet.reference_store.snippet'] : $this->get('sulu_snippet.reference_store.snippet')) && false ?: '_'}, true, 'SuluSnippetBundle:Template:content-types/snippet.html.twig');
    }

    /**
     * Gets the public 'sulu_snippet.default_snippet.manager' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Snippet\DefaultSnippetManager
     */
    protected function getSuluSnippet_DefaultSnippet_ManagerService()
    {
        return $this->services['sulu_snippet.default_snippet.manager'] = new \Sulu\Bundle\SnippetBundle\Snippet\DefaultSnippetManager(${($_ = isset($this->services['sulu_core.webspace.settings_manager']) ? $this->services['sulu_core.webspace.settings_manager'] : $this->get('sulu_core.webspace.settings_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, array('default' => array('key' => 'default', 'template' => 'default', 'title' => array('de' => 'Standard', 'en' => 'Default', 'fr' => 'Default', 'nl' => 'Default'))));
    }

    /**
     * Gets the public 'sulu_snippet.document.snippet_initializer' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Document\SnippetInitializer
     */
    protected function getSuluSnippet_Document_SnippetInitializerService()
    {
        return $this->services['sulu_snippet.document.snippet_initializer'] = new \Sulu\Bundle\SnippetBundle\Document\SnippetInitializer(${($_ = isset($this->services['sulu_document_manager.node_manager']) ? $this->services['sulu_document_manager.node_manager'] : $this->getSuluDocumentManager_NodeManagerService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.path_builder']) ? $this->services['sulu_document_manager.path_builder'] : $this->getSuluDocumentManager_PathBuilderService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.export.snippet' shared service.
     *
     * @return \Sulu\Component\Snippet\Export\SnippetExport
     */
    protected function getSuluSnippet_Export_SnippetService()
    {
        return $this->services['sulu_snippet.export.snippet'] = new \Sulu\Component\Snippet\Export\SnippetExport(${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, ${($_ = isset($this->services['sulu_snippet.repository']) ? $this->services['sulu_snippet.repository'] : $this->get('sulu_snippet.repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.export.manager']) ? $this->services['sulu_content.export.manager'] : $this->get('sulu_content.export.manager')) && false ?: '_'}, array('1.2.xliff' => 'SuluContentBundle:Export:Snippet/1.2.xliff.twig'));
    }

    /**
     * Gets the public 'sulu_snippet.form.snippet' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Form\SnippetType
     */
    protected function getSuluSnippet_Form_SnippetService()
    {
        return $this->services['sulu_snippet.form.snippet'] = new \Sulu\Bundle\SnippetBundle\Form\SnippetType();
    }

    /**
     * Gets the public 'sulu_snippet.import.snippet' shared service.
     *
     * @return \Sulu\Component\Snippet\Import\SnippetImport
     */
    protected function getSuluSnippet_Import_SnippetService()
    {
        return $this->services['sulu_snippet.import.snippet'] = new \Sulu\Component\Snippet\Import\SnippetImport(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_registry']) ? $this->services['sulu_document_manager.document_registry'] : $this->getSuluDocumentManager_DocumentRegistryService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.import.manager']) ? $this->services['sulu_content.import.manager'] : $this->get('sulu_content.import.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.compat.structure.legacy_property_factory']) ? $this->services['sulu_content.compat.structure.legacy_property_factory'] : $this->get('sulu_content.compat.structure.legacy_property_factory')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'}, ${($_ = isset($this->services['sulu_snippet.import.webspace.xliff12']) ? $this->services['sulu_snippet.import.webspace.xliff12'] : $this->get('sulu_snippet.import.webspace.xliff12')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.import.webspace.xliff12' shared service.
     *
     * @return \Sulu\Component\Import\Format\Xliff12
     */
    protected function getSuluSnippet_Import_Webspace_Xliff12Service()
    {
        return $this->services['sulu_snippet.import.webspace.xliff12'] = new \Sulu\Component\Import\Format\Xliff12();
    }

    /**
     * Gets the public 'sulu_snippet.jsconfig' shared service.
     *
     * @return \Sulu\Bundle\AdminBundle\Admin\JsConfig
     */
    protected function getSuluSnippet_JsconfigService()
    {
        return $this->services['sulu_snippet.jsconfig'] = new \Sulu\Bundle\AdminBundle\Admin\JsConfig('sulu-snippet', array('defaultType' => 'default'));
    }

    /**
     * Gets the public 'sulu_snippet.reference_store.snippet' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\ReferenceStore\ReferenceStore
     */
    protected function getSuluSnippet_ReferenceStore_SnippetService()
    {
        return $this->services['sulu_snippet.reference_store.snippet'] = new \Sulu\Bundle\WebsiteBundle\ReferenceStore\ReferenceStore();
    }

    /**
     * Gets the public 'sulu_snippet.repository' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Snippet\SnippetRepository
     */
    protected function getSuluSnippet_RepositoryService()
    {
        return $this->services['sulu_snippet.repository'] = new \Sulu\Bundle\SnippetBundle\Snippet\SnippetRepository(${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.resolver' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Snippet\SnippetResolver
     */
    protected function getSuluSnippet_ResolverService()
    {
        return $this->services['sulu_snippet.resolver'] = new \Sulu\Bundle\SnippetBundle\Snippet\SnippetResolver(${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.resolver.structure']) ? $this->services['sulu_website.resolver.structure'] : $this->get('sulu_website.resolver.structure')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.smart_content.snippet_data_provider' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Content\SnippetDataProvider
     */
    protected function getSuluSnippet_SmartContent_SnippetDataProviderService()
    {
        return $this->services['sulu_snippet.smart_content.snippet_data_provider'] = new \Sulu\Bundle\SnippetBundle\Content\SnippetDataProvider(${($_ = isset($this->services['sulu.content.query_executor']) ? $this->services['sulu.content.query_executor'] : $this->get('sulu.content.query_executor')) && false ?: '_'}, new \Sulu\Bundle\SnippetBundle\Content\SnippetQueryBuilder(${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, 'i18n'), ${($_ = isset($this->services['sulu.util.node_helper']) ? $this->services['sulu.util.node_helper'] : $this->get('sulu.util.node_helper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.smart_content.data_provider.content.proxy_factory']) ? $this->services['sulu_content.smart_content.data_provider.content.proxy_factory'] : $this->get('sulu_content.smart_content.data_provider.content.proxy_factory')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_snippet.reference_store.snippet']) ? $this->services['sulu_snippet.reference_store.snippet'] : $this->get('sulu_snippet.reference_store.snippet')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.twig.area_snippet' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Twig\SnippetAreaTwigExtension
     */
    protected function getSuluSnippet_Twig_AreaSnippetService()
    {
        return $this->services['sulu_snippet.twig.area_snippet'] = new \Sulu\Bundle\SnippetBundle\Twig\SnippetAreaTwigExtension(${($_ = isset($this->services['sulu_snippet.default_snippet.manager']) ? $this->services['sulu_snippet.default_snippet.manager'] : $this->get('sulu_snippet.default_snippet.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_snippet.resolver']) ? $this->services['sulu_snippet.resolver'] : $this->get('sulu_snippet.resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.twig.default_snippet' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Twig\DefaultSnippetTwigExtension
     */
    protected function getSuluSnippet_Twig_DefaultSnippetService()
    {
        return $this->services['sulu_snippet.twig.default_snippet'] = new \Sulu\Bundle\SnippetBundle\Twig\DefaultSnippetTwigExtension(${($_ = isset($this->services['sulu_snippet.default_snippet.manager']) ? $this->services['sulu_snippet.default_snippet.manager'] : $this->get('sulu_snippet.default_snippet.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_snippet.resolver']) ? $this->services['sulu_snippet.resolver'] : $this->get('sulu_snippet.resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.twig.snippet' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Twig\SnippetTwigExtension
     */
    protected function getSuluSnippet_Twig_SnippetService()
    {
        return $this->services['sulu_snippet.twig.snippet'] = new \Sulu\Bundle\SnippetBundle\Twig\SnippetTwigExtension(${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.resolver.structure']) ? $this->services['sulu_website.resolver.structure'] : $this->get('sulu_website.resolver.structure')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_snippet.twig.snippet.memoized' shared service.
     *
     * @return \Sulu\Bundle\SnippetBundle\Twig\MemoizedSnippetTwigExtension
     */
    protected function getSuluSnippet_Twig_Snippet_MemoizedService()
    {
        return $this->services['sulu_snippet.twig.snippet.memoized'] = new \Sulu\Bundle\SnippetBundle\Twig\MemoizedSnippetTwigExtension(${($_ = isset($this->services['sulu_snippet.twig.snippet']) ? $this->services['sulu_snippet.twig.snippet'] : $this->get('sulu_snippet.twig.snippet')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.cache.memoize']) ? $this->services['sulu_core.cache.memoize'] : $this->get('sulu_core.cache.memoize')) && false ?: '_'}, 1);
    }

    /**
     * Gets the public 'sulu_tag.content.type.tag_list' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Content\Types\TagList
     */
    protected function getSuluTag_Content_Type_TagListService()
    {
        return $this->services['sulu_tag.content.type.tag_list'] = new \Sulu\Bundle\TagBundle\Content\Types\TagList(${($_ = isset($this->services['sulu_tag.tag_manager']) ? $this->services['sulu_tag.tag_manager'] : $this->get('sulu_tag.tag_manager')) && false ?: '_'}, 'SuluTagBundle:Template:content-types/tag_list.html.twig');
    }

    /**
     * Gets the public 'sulu_tag.search.tags_converter' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Search\TagsConverter
     */
    protected function getSuluTag_Search_TagsConverterService()
    {
        return $this->services['sulu_tag.search.tags_converter'] = new \Sulu\Bundle\TagBundle\Search\TagsConverter(${($_ = isset($this->services['sulu_tag.tag_manager']) ? $this->services['sulu_tag.tag_manager'] : $this->get('sulu_tag.tag_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_tag.tag_manager' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Tag\TagManager
     */
    protected function getSuluTag_TagManagerService()
    {
        return $this->services['sulu_tag.tag_manager'] = new \Sulu\Bundle\TagBundle\Tag\TagManager(${($_ = isset($this->services['sulu.repository.tag']) ? $this->services['sulu.repository.tag'] : $this->get('sulu.repository.tag')) && false ?: '_'}, ${($_ = isset($this->services['sulu.repository.user']) ? $this->services['sulu.repository.user'] : $this->get('sulu.repository.user')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_tag.tag_repository' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Entity\TagRepository
     */
    protected function getSuluTag_TagRepositoryService()
    {
        return $this->services['sulu_tag.tag_repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluTagBundle:Tag');
    }

    /**
     * Gets the public 'sulu_tag.tag_request_handler' shared service.
     *
     * @return \Sulu\Component\Tag\Request\TagRequestHandler
     */
    protected function getSuluTag_TagRequestHandlerService()
    {
        return $this->services['sulu_tag.tag_request_handler'] = new \Sulu\Component\Tag\Request\TagRequestHandler(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_tag.twig_extension' shared service.
     *
     * @return \Sulu\Bundle\TagBundle\Twig\TagTwigExtension
     */
    protected function getSuluTag_TwigExtensionService()
    {
        return $this->services['sulu_tag.twig_extension'] = new \Sulu\Bundle\TagBundle\Twig\TagTwigExtension(${($_ = isset($this->services['sulu_tag.tag_manager']) ? $this->services['sulu_tag.tag_manager'] : $this->get('sulu_tag.tag_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_tag.tag_request_handler']) ? $this->services['sulu_tag.tag_request_handler'] : $this->get('sulu_tag.tag_request_handler')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.cache.memoize']) ? $this->services['sulu_core.cache.memoize'] : $this->get('sulu_core.cache.memoize')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_translate.export' shared service.
     *
     * @return \Sulu\Bundle\TranslateBundle\Translate\Export
     */
    protected function getSuluTranslate_ExportService()
    {
        return $this->services['sulu_translate.export'] = new \Sulu\Bundle\TranslateBundle\Translate\Export(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.analytics.manager' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Analytics\AnalyticsManager
     */
    protected function getSuluWebsite_Analytics_ManagerService()
    {
        return $this->services['sulu_website.analytics.manager'] = new \Sulu\Bundle\WebsiteBundle\Analytics\AnalyticsManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.analytics.repository']) ? $this->services['sulu_website.analytics.repository'] : $this->get('sulu_website.analytics.repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.domains.repository']) ? $this->services['sulu_website.domains.repository'] : $this->get('sulu_website.domains.repository')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.analytics.repository' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Entity\AnalyticsRepository
     */
    protected function getSuluWebsite_Analytics_RepositoryService()
    {
        $this->services['sulu_website.analytics.repository'] = $instance = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluWebsiteBundle:Analytics');

        $instance->setEnvironment('dev');

        return $instance;
    }

    /**
     * Gets the public 'sulu_website.analytics.response_listener' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\EventListener\AppendAnalyticsListener
     */
    protected function getSuluWebsite_Analytics_ResponseListenerService()
    {
        return $this->services['sulu_website.analytics.response_listener'] = new \Sulu\Bundle\WebsiteBundle\EventListener\AppendAnalyticsListener(${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.analytics.repository']) ? $this->services['sulu_website.analytics.repository'] : $this->get('sulu_website.analytics.repository')) && false ?: '_'}, 'dev', (($this->hasParameter("sulu.preview")) ? ($this->getParameter("sulu.preview")) : ("")));
    }

    /**
     * Gets the public 'sulu_website.data_collector.sulu_collector' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\DataCollector\SuluCollector
     */
    protected function getSuluWebsite_DataCollector_SuluCollectorService()
    {
        return $this->services['sulu_website.data_collector.sulu_collector'] = new \Sulu\Bundle\WebsiteBundle\DataCollector\SuluCollector();
    }

    /**
     * Gets the public 'sulu_website.default_locale.portal_provider' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Locale\PortalDefaultLocaleProvider
     */
    protected function getSuluWebsite_DefaultLocale_PortalProviderService()
    {
        return $this->services['sulu_website.default_locale.portal_provider'] = new \Sulu\Bundle\WebsiteBundle\Locale\PortalDefaultLocaleProvider(${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.default_locale.request_provider' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Locale\RequestDefaultLocaleProvider
     */
    protected function getSuluWebsite_DefaultLocale_RequestProviderService()
    {
        return $this->services['sulu_website.default_locale.request_provider'] = new \Sulu\Bundle\WebsiteBundle\Locale\RequestDefaultLocaleProvider(${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.domains.repository' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Entity\DomainRepository
     */
    protected function getSuluWebsite_Domains_RepositoryService()
    {
        return $this->services['sulu_website.domains.repository'] = ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getRepository('SuluWebsiteBundle:Domain');
    }

    /**
     * Gets the public 'sulu_website.event_subscriber.generator' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\EventSubscriber\GeneratorEventSubscriber
     */
    protected function getSuluWebsite_EventSubscriber_GeneratorService()
    {
        return $this->services['sulu_website.event_subscriber.generator'] = new \Sulu\Bundle\WebsiteBundle\EventSubscriber\GeneratorEventSubscriber('1.6.7');
    }

    /**
     * Gets the public 'sulu_website.exception_controller' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Controller\ExceptionController
     */
    protected function getSuluWebsite_ExceptionControllerService()
    {
        $a = ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'};

        return $this->services['sulu_website.exception_controller'] = new \Sulu\Bundle\WebsiteBundle\Controller\ExceptionController(new \Symfony\Bundle\TwigBundle\Controller\ExceptionController($a, true), ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.resolver.parameter']) ? $this->services['sulu_website.resolver.parameter'] : $this->get('sulu_website.resolver.parameter')) && false ?: '_'}, $a, true);
    }

    /**
     * Gets the public 'sulu_website.http_cache.clearer' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Cache\CacheClearer
     */
    protected function getSuluWebsite_HttpCache_ClearerService()
    {
        return $this->services['sulu_website.http_cache.clearer'] = new \Sulu\Bundle\WebsiteBundle\Cache\CacheClearer(${($_ = isset($this->services['filesystem']) ? $this->services['filesystem'] : $this->get('filesystem')) && false ?: '_'}, 'dev', ($this->targetDirs[4].'/app'), ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, (($this->hasParameter("kernel.var_dir")) ? ($this->getParameter("kernel.var_dir")) : (null)), ${($_ = isset($this->services['sulu_http_cache.proxy_client.symfony']) ? $this->services['sulu_http_cache.proxy_client.symfony'] : $this->get('sulu_http_cache.proxy_client.symfony', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.navigation_mapper' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Navigation\NavigationMapper
     */
    protected function getSuluWebsite_NavigationMapperService()
    {
        return $this->services['sulu_website.navigation_mapper'] = new \Sulu\Bundle\WebsiteBundle\Navigation\NavigationMapper(${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.query_executor']) ? $this->services['sulu.content.query_executor'] : $this->get('sulu.content.query_executor')) && false ?: '_'}, new \Sulu\Bundle\WebsiteBundle\Navigation\NavigationQueryBuilder(${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, 'i18n'), ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.provider.content' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Routing\ContentRouteProvider
     */
    protected function getSuluWebsite_Provider_ContentService()
    {
        return $this->services['sulu_website.provider.content'] = new \Sulu\Bundle\WebsiteBundle\Routing\ContentRouteProvider(${($_ = isset($this->services['sulu_document_manager.document_manager']) ? $this->services['sulu_document_manager.document_manager'] : $this->get('sulu_document_manager.document_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_document_manager.document_inspector']) ? $this->services['sulu_document_manager.document_inspector'] : $this->get('sulu_document_manager.document_inspector')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.resource_locator.strategy_pool']) ? $this->services['sulu.content.resource_locator.strategy_pool'] : $this->get('sulu.content.resource_locator.strategy_pool')) && false ?: '_'}, ${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.redirect_exception_listener' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\EventListener\RedirectExceptionSubscriber
     */
    protected function getSuluWebsite_RedirectExceptionListenerService()
    {
        return $this->services['sulu_website.redirect_exception_listener'] = new \Sulu\Bundle\WebsiteBundle\EventListener\RedirectExceptionSubscriber(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.default_locale.portal_provider']) ? $this->services['sulu_website.default_locale.portal_provider'] : $this->get('sulu_website.default_locale.portal_provider')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager.url_replacer']) ? $this->services['sulu_core.webspace.webspace_manager.url_replacer'] : $this->get('sulu_core.webspace.webspace_manager.url_replacer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.reference_store_pool' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\ReferenceStore\ReferenceStorePool
     */
    protected function getSuluWebsite_ReferenceStorePoolService()
    {
        return $this->services['sulu_website.reference_store_pool'] = new \Sulu\Bundle\WebsiteBundle\ReferenceStore\ReferenceStorePool(array('snippet' => ${($_ = isset($this->services['sulu_snippet.reference_store.snippet']) ? $this->services['sulu_snippet.reference_store.snippet'] : $this->get('sulu_snippet.reference_store.snippet')) && false ?: '_'}, 'content' => ${($_ = isset($this->services['sulu_content.reference_store.content']) ? $this->services['sulu_content.reference_store.content'] : $this->get('sulu_content.reference_store.content')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_website.resolver.parameter' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Resolver\ParameterResolver
     */
    protected function getSuluWebsite_Resolver_ParameterService()
    {
        return $this->services['sulu_website.resolver.parameter'] = new \Sulu\Bundle\WebsiteBundle\Resolver\ParameterResolver(${($_ = isset($this->services['sulu_website.resolver.structure']) ? $this->services['sulu_website.resolver.structure'] : $this->get('sulu_website.resolver.structure')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.resolver.request_analyzer']) ? $this->services['sulu_website.resolver.request_analyzer'] : $this->get('sulu_website.resolver.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.resolver.request_analyzer' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Resolver\RequestAnalyzerResolver
     */
    protected function getSuluWebsite_Resolver_RequestAnalyzerService()
    {
        return $this->services['sulu_website.resolver.request_analyzer'] = new \Sulu\Bundle\WebsiteBundle\Resolver\RequestAnalyzerResolver(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_website.resolver.structure' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Resolver\StructureResolver
     */
    protected function getSuluWebsite_Resolver_StructureService()
    {
        return $this->services['sulu_website.resolver.structure'] = new \Sulu\Bundle\WebsiteBundle\Resolver\StructureResolver(${($_ = isset($this->services['sulu.content.type_manager']) ? $this->services['sulu.content.type_manager'] : $this->get('sulu.content.type_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.resolver.template_attribute' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Resolver\TemplateAttributeResolver
     */
    protected function getSuluWebsite_Resolver_TemplateAttributeService()
    {
        return $this->services['sulu_website.resolver.template_attribute'] = new \Sulu\Bundle\WebsiteBundle\Resolver\TemplateAttributeResolver(${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.resolver.request_analyzer']) ? $this->services['sulu_website.resolver.request_analyzer'] : $this->get('sulu_website.resolver.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'dev');
    }

    /**
     * Gets the public 'sulu_website.router_listener' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\EventListener\RouterListener
     */
    protected function getSuluWebsite_RouterListenerService()
    {
        return $this->services['sulu_website.router_listener'] = new \Sulu\Bundle\WebsiteBundle\EventListener\RouterListener(new \Symfony\Component\HttpKernel\EventListener\RouterListener(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}), ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.routing.portal_loader' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Routing\PortalLoader
     */
    protected function getSuluWebsite_Routing_PortalLoaderService()
    {
        return $this->services['sulu_website.routing.portal_loader'] = new \Sulu\Bundle\WebsiteBundle\Routing\PortalLoader();
    }

    /**
     * Gets the public 'sulu_website.routing.request_listener' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Routing\RequestListener
     */
    protected function getSuluWebsite_Routing_RequestListenerService()
    {
        return $this->services['sulu_website.routing.request_listener'] = new \Sulu\Bundle\WebsiteBundle\Routing\RequestListener(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.sitemap' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Sitemap\SitemapGenerator
     */
    protected function getSuluWebsite_SitemapService()
    {
        return $this->services['sulu_website.sitemap'] = new \Sulu\Bundle\WebsiteBundle\Sitemap\SitemapGenerator(${($_ = isset($this->services['sulu.content.query_executor']) ? $this->services['sulu.content.query_executor'] : $this->get('sulu.content.query_executor')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, new \Sulu\Bundle\WebsiteBundle\Sitemap\SitemapContentQueryBuilder(${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, 'i18n'), 'dev');
    }

    /**
     * Gets the public 'sulu_website.sitemap.pages_provider' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Sitemap\Provider\PagesSitemapProvider
     */
    protected function getSuluWebsite_Sitemap_PagesProviderService()
    {
        return $this->services['sulu_website.sitemap.pages_provider'] = new \Sulu\Bundle\WebsiteBundle\Sitemap\Provider\PagesSitemapProvider(${($_ = isset($this->services['sulu_content.content_repository']) ? $this->services['sulu_content.content_repository'] : $this->get('sulu_content.content_repository')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.sitemap.pool' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Sitemap\SitemapProviderPool
     */
    protected function getSuluWebsite_Sitemap_PoolService()
    {
        return $this->services['sulu_website.sitemap.pool'] = new \Sulu\Bundle\WebsiteBundle\Sitemap\SitemapProviderPool(array('pages' => ${($_ = isset($this->services['sulu_website.sitemap.pages_provider']) ? $this->services['sulu_website.sitemap.pages_provider'] : $this->get('sulu_website.sitemap.pages_provider')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sulu_website.sitemap.xml_dumper' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Sitemap\XmlSitemapDumper
     */
    protected function getSuluWebsite_Sitemap_XmlDumperService()
    {
        return $this->services['sulu_website.sitemap.xml_dumper'] = new \Sulu\Bundle\WebsiteBundle\Sitemap\XmlSitemapDumper(${($_ = isset($this->services['sulu_website.sitemap.xml_renderer']) ? $this->services['sulu_website.sitemap.xml_renderer'] : $this->get('sulu_website.sitemap.xml_renderer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.sitemap.pool']) ? $this->services['sulu_website.sitemap.pool'] : $this->get('sulu_website.sitemap.pool')) && false ?: '_'}, ${($_ = isset($this->services['filesystem']) ? $this->services['filesystem'] : $this->get('filesystem')) && false ?: '_'}, ($this->targetDirs[3].'/sitemaps'), NULL);
    }

    /**
     * Gets the public 'sulu_website.sitemap.xml_renderer' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Sitemap\XmlSitemapRenderer
     */
    protected function getSuluWebsite_Sitemap_XmlRendererService()
    {
        return $this->services['sulu_website.sitemap.xml_renderer'] = new \Sulu\Bundle\WebsiteBundle\Sitemap\XmlSitemapRenderer(${($_ = isset($this->services['sulu_website.sitemap.pool']) ? $this->services['sulu_website.sitemap.pool'] : $this->get('sulu_website.sitemap.pool')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.translator.request_analyzer' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Translator\RequestAnalyzerTranslator
     */
    protected function getSuluWebsite_Translator_RequestAnalyzerService()
    {
        return $this->services['sulu_website.translator.request_analyzer'] = new \Sulu\Bundle\WebsiteBundle\Translator\RequestAnalyzerTranslator(${($_ = isset($this->services['translator.data_collector']) ? $this->services['translator.data_collector'] : $this->getTranslator_DataCollectorService()) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.twig.content' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Content\ContentTwigExtension
     */
    protected function getSuluWebsite_Twig_ContentService()
    {
        return $this->services['sulu_website.twig.content'] = new \Sulu\Bundle\WebsiteBundle\Twig\Content\ContentTwigExtension(${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.resolver.structure']) ? $this->services['sulu_website.resolver.structure'] : $this->get('sulu_website.resolver.structure')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.twig.content.memoized' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Content\MemoizedContentTwigExtension
     */
    protected function getSuluWebsite_Twig_Content_MemoizedService()
    {
        return $this->services['sulu_website.twig.content.memoized'] = new \Sulu\Bundle\WebsiteBundle\Twig\Content\MemoizedContentTwigExtension(${($_ = isset($this->services['sulu_website.twig.content']) ? $this->services['sulu_website.twig.content'] : $this->get('sulu_website.twig.content')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.cache.memoize']) ? $this->services['sulu_core.cache.memoize'] : $this->get('sulu_core.cache.memoize')) && false ?: '_'}, 1);
    }

    /**
     * Gets the public 'sulu_website.twig.content_path' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Content\ContentPathTwigExtension
     */
    protected function getSuluWebsite_Twig_ContentPathService()
    {
        return $this->services['sulu_website.twig.content_path'] = new \Sulu\Bundle\WebsiteBundle\Twig\Content\ContentPathTwigExtension(${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, 'dev', ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.twig.meta' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Meta\MetaTwigExtension
     */
    protected function getSuluWebsite_Twig_MetaService()
    {
        return $this->services['sulu_website.twig.meta'] = new \Sulu\Bundle\WebsiteBundle\Twig\Meta\MetaTwigExtension(${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.twig.content_path']) ? $this->services['sulu_website.twig.content_path'] : $this->get('sulu_website.twig.content_path')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.twig.navigation' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Navigation\NavigationTwigExtension
     */
    protected function getSuluWebsite_Twig_NavigationService()
    {
        return $this->services['sulu_website.twig.navigation'] = new \Sulu\Bundle\WebsiteBundle\Twig\Navigation\NavigationTwigExtension(${($_ = isset($this->services['sulu.content.mapper']) ? $this->services['sulu.content.mapper'] : $this->get('sulu.content.mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.navigation_mapper']) ? $this->services['sulu_website.navigation_mapper'] : $this->get('sulu_website.navigation_mapper')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.twig.navigation.memoized' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Navigation\MemoizedNavigationTwigExtension
     */
    protected function getSuluWebsite_Twig_Navigation_MemoizedService()
    {
        return $this->services['sulu_website.twig.navigation.memoized'] = new \Sulu\Bundle\WebsiteBundle\Twig\Navigation\MemoizedNavigationTwigExtension(${($_ = isset($this->services['sulu_website.twig.navigation']) ? $this->services['sulu_website.twig.navigation'] : $this->get('sulu_website.twig.navigation')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.cache.memoize']) ? $this->services['sulu_core.cache.memoize'] : $this->get('sulu_core.cache.memoize')) && false ?: '_'}, 1);
    }

    /**
     * Gets the public 'sulu_website.twig.seo' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Seo\SeoTwigExtension
     */
    protected function getSuluWebsite_Twig_SeoService()
    {
        return $this->services['sulu_website.twig.seo'] = new \Sulu\Bundle\WebsiteBundle\Twig\Seo\SeoTwigExtension(${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['sulu_website.twig.content_path']) ? $this->services['sulu_website.twig.content_path'] : $this->get('sulu_website.twig.content_path')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.twig.sitemap' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Sitemap\SitemapTwigExtension
     */
    protected function getSuluWebsite_Twig_SitemapService()
    {
        return $this->services['sulu_website.twig.sitemap'] = new \Sulu\Bundle\WebsiteBundle\Twig\Sitemap\SitemapTwigExtension(${($_ = isset($this->services['sulu_website.sitemap']) ? $this->services['sulu_website.sitemap'] : $this->get('sulu_website.sitemap')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.webspace.webspace_manager']) ? $this->services['sulu_core.webspace.webspace_manager'] : $this->get('sulu_core.webspace.webspace_manager')) && false ?: '_'}, 'dev', ${($_ = isset($this->services['sulu_core.webspace.request_analyzer']) ? $this->services['sulu_core.webspace.request_analyzer'] : $this->get('sulu_core.webspace.request_analyzer', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_website.twig.sitemap.memoized' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Sitemap\MemoizedSitemapTwigExtension
     */
    protected function getSuluWebsite_Twig_Sitemap_MemoizedService()
    {
        return $this->services['sulu_website.twig.sitemap.memoized'] = new \Sulu\Bundle\WebsiteBundle\Twig\Sitemap\MemoizedSitemapTwigExtension(${($_ = isset($this->services['sulu_website.twig.sitemap']) ? $this->services['sulu_website.twig.sitemap'] : $this->get('sulu_website.twig.sitemap')) && false ?: '_'}, ${($_ = isset($this->services['sulu_core.cache.memoize']) ? $this->services['sulu_core.cache.memoize'] : $this->get('sulu_core.cache.memoize')) && false ?: '_'}, 1);
    }

    /**
     * Gets the public 'sulu_website.twig.util' shared service.
     *
     * @return \Sulu\Bundle\WebsiteBundle\Twig\Core\UtilTwigExtension
     */
    protected function getSuluWebsite_Twig_UtilService()
    {
        return $this->services['sulu_website.twig.util'] = new \Sulu\Bundle\WebsiteBundle\Twig\Core\UtilTwigExtension();
    }

    /**
     * Gets the public 'sulu_websocket.admin' shared service.
     *
     * @return \Sulu\Bundle\WebsocketBundle\Admin\WebsocketAdmin
     */
    protected function getSuluWebsocket_AdminService()
    {
        return $this->services['sulu_websocket.admin'] = new \Sulu\Bundle\WebsocketBundle\Admin\WebsocketAdmin();
    }

    /**
     * Gets the public 'sulu_websocket.admin.message_builder' shared service.
     *
     * @return \Sulu\Component\Websocket\MessageDispatcher\MessageBuilder
     */
    protected function getSuluWebsocket_Admin_MessageBuilderService()
    {
        return $this->services['sulu_websocket.admin.message_builder'] = new \Sulu\Component\Websocket\MessageDispatcher\MessageBuilder();
    }

    /**
     * Gets the public 'sulu_websocket.fallback_controller' shared service.
     *
     * @return \Sulu\Bundle\WebsocketBundle\Controller\FallbackController
     */
    protected function getSuluWebsocket_FallbackControllerService()
    {
        return $this->services['sulu_websocket.fallback_controller'] = new \Sulu\Bundle\WebsocketBundle\Controller\FallbackController(${($_ = isset($this->services['sulu_websocket.manager']) ? $this->services['sulu_websocket.manager'] : $this->get('sulu_websocket.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sulu_websocket.manager' shared service.
     *
     * @return \Sulu\Component\Websocket\RatchetAppManager
     */
    protected function getSuluWebsocket_ManagerService()
    {
        return $this->services['sulu_websocket.manager'] = new \Sulu\Component\Websocket\RatchetAppManager(9876, 'localhost', '0.0.0.0');
    }

    /**
     * Gets the public 'swiftmailer.email_sender.listener' shared service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.default' shared service.
     *
     * @return \Swift_Mailer
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer(${($_ = isset($this->services['swiftmailer.mailer.default.transport']) ? $this->services['swiftmailer.mailer.default.transport'] : $this->get('swiftmailer.mailer.default.transport')) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.plugin.messagelogger' shared service.
     *
     * @return \Swift_Plugins_MessageLogger
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.spool' shared service.
     *
     * @return \Swift_MemorySpool
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.transport' shared service.
     *
     * @return \Swift_Transport_SpoolTransport
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport(${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['swiftmailer.mailer.default.spool']) ? $this->services['swiftmailer.mailer.default.spool'] : $this->get('swiftmailer.mailer.default.spool')) && false ?: '_'});

        $instance->registerPlugin(${($_ = isset($this->services['swiftmailer.mailer.default.plugin.messagelogger']) ? $this->services['swiftmailer.mailer.default.plugin.messagelogger'] : $this->get('swiftmailer.mailer.default.plugin.messagelogger')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.transport.real' shared service.
     *
     * @return \Swift_Transport_EsmtpTransport
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        $a = new \Swift_Transport_Esmtp_AuthHandler(array(0 => new \Swift_Transport_Esmtp_Auth_CramMd5Authenticator(), 1 => new \Swift_Transport_Esmtp_Auth_LoginAuthenticator(), 2 => new \Swift_Transport_Esmtp_Auth_PlainAuthenticator()));
        $a->setUsername(NULL);
        $a->setPassword(NULL);
        $a->setAuthMode(NULL);

        $this->services['swiftmailer.mailer.default.transport.real'] = $instance = new \Swift_Transport_EsmtpTransport(new \Swift_Transport_StreamBuffer(new \Swift_StreamFilters_StringReplacementFilterFactory()), array(0 => $a), ${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'});

        $instance->setHost('maildev');
        $instance->setPort(25);
        $instance->setEncryption(NULL);
        $instance->setTimeout(30);
        $instance->setSourceIp(NULL);
        (new \Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator(NULL, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'templating' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\TwigEngine
     */
    protected function getTemplatingService()
    {
        return $this->services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.filename_parser' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the public 'templating.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.name_parser' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'translation.dumper.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.json' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this->services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.php' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.po' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.res' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.xliff' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the public 'translation.extractor' shared service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', ${($_ = isset($this->services['translation.extractor.php']) ? $this->services['translation.extractor.php'] : $this->get('translation.extractor.php')) && false ?: '_'});
        $instance->addExtractor('twig', ${($_ = isset($this->services['twig.translation.extractor']) ? $this->services['twig.translation.extractor'] : $this->get('twig.translation.extractor')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translation.extractor.php' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the public 'translation.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader
     */
    protected function getTranslation_LoaderService()
    {
        $a = ${($_ = isset($this->services['translation.loader.xliff']) ? $this->services['translation.loader.xliff'] : $this->get('translation.loader.xliff')) && false ?: '_'};

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', ${($_ = isset($this->services['translation.loader.php']) ? $this->services['translation.loader.php'] : $this->get('translation.loader.php')) && false ?: '_'});
        $instance->addLoader('yml', ${($_ = isset($this->services['translation.loader.yml']) ? $this->services['translation.loader.yml'] : $this->get('translation.loader.yml')) && false ?: '_'});
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', ${($_ = isset($this->services['translation.loader.po']) ? $this->services['translation.loader.po'] : $this->get('translation.loader.po')) && false ?: '_'});
        $instance->addLoader('mo', ${($_ = isset($this->services['translation.loader.mo']) ? $this->services['translation.loader.mo'] : $this->get('translation.loader.mo')) && false ?: '_'});
        $instance->addLoader('ts', ${($_ = isset($this->services['translation.loader.qt']) ? $this->services['translation.loader.qt'] : $this->get('translation.loader.qt')) && false ?: '_'});
        $instance->addLoader('csv', ${($_ = isset($this->services['translation.loader.csv']) ? $this->services['translation.loader.csv'] : $this->get('translation.loader.csv')) && false ?: '_'});
        $instance->addLoader('res', ${($_ = isset($this->services['translation.loader.res']) ? $this->services['translation.loader.res'] : $this->get('translation.loader.res')) && false ?: '_'});
        $instance->addLoader('dat', ${($_ = isset($this->services['translation.loader.dat']) ? $this->services['translation.loader.dat'] : $this->get('translation.loader.dat')) && false ?: '_'});
        $instance->addLoader('ini', ${($_ = isset($this->services['translation.loader.ini']) ? $this->services['translation.loader.ini'] : $this->get('translation.loader.ini')) && false ?: '_'});
        $instance->addLoader('json', ${($_ = isset($this->services['translation.loader.json']) ? $this->services['translation.loader.json'] : $this->get('translation.loader.json')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translation.loader.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the public 'translation.loader.dat' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the public 'translation.loader.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the public 'translation.loader.json' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this->services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the public 'translation.loader.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the public 'translation.loader.php' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the public 'translation.loader.po' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the public 'translation.loader.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the public 'translation.loader.res' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the public 'translation.loader.xliff' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the public 'translation.loader.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the public 'translation.writer' shared service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', ${($_ = isset($this->services['translation.dumper.php']) ? $this->services['translation.dumper.php'] : $this->get('translation.dumper.php')) && false ?: '_'});
        $instance->addDumper('xlf', ${($_ = isset($this->services['translation.dumper.xliff']) ? $this->services['translation.dumper.xliff'] : $this->get('translation.dumper.xliff')) && false ?: '_'});
        $instance->addDumper('po', ${($_ = isset($this->services['translation.dumper.po']) ? $this->services['translation.dumper.po'] : $this->get('translation.dumper.po')) && false ?: '_'});
        $instance->addDumper('mo', ${($_ = isset($this->services['translation.dumper.mo']) ? $this->services['translation.dumper.mo'] : $this->get('translation.dumper.mo')) && false ?: '_'});
        $instance->addDumper('yml', ${($_ = isset($this->services['translation.dumper.yml']) ? $this->services['translation.dumper.yml'] : $this->get('translation.dumper.yml')) && false ?: '_'});
        $instance->addDumper('ts', ${($_ = isset($this->services['translation.dumper.qt']) ? $this->services['translation.dumper.qt'] : $this->get('translation.dumper.qt')) && false ?: '_'});
        $instance->addDumper('csv', ${($_ = isset($this->services['translation.dumper.csv']) ? $this->services['translation.dumper.csv'] : $this->get('translation.dumper.csv')) && false ?: '_'});
        $instance->addDumper('ini', ${($_ = isset($this->services['translation.dumper.ini']) ? $this->services['translation.dumper.ini'] : $this->get('translation.dumper.ini')) && false ?: '_'});
        $instance->addDumper('json', ${($_ = isset($this->services['translation.dumper.json']) ? $this->services['translation.dumper.json'] : $this->get('translation.dumper.json')) && false ?: '_'});
        $instance->addDumper('res', ${($_ = isset($this->services['translation.dumper.res']) ? $this->services['translation.dumper.res'] : $this->get('translation.dumper.res')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translator.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\ServiceLocator(array('translation.loader.csv' => function () {
            return ${($_ = isset($this->services['translation.loader.csv']) ? $this->services['translation.loader.csv'] : $this->get('translation.loader.csv')) && false ?: '_'};
        }, 'translation.loader.dat' => function () {
            return ${($_ = isset($this->services['translation.loader.dat']) ? $this->services['translation.loader.dat'] : $this->get('translation.loader.dat')) && false ?: '_'};
        }, 'translation.loader.ini' => function () {
            return ${($_ = isset($this->services['translation.loader.ini']) ? $this->services['translation.loader.ini'] : $this->get('translation.loader.ini')) && false ?: '_'};
        }, 'translation.loader.json' => function () {
            return ${($_ = isset($this->services['translation.loader.json']) ? $this->services['translation.loader.json'] : $this->get('translation.loader.json')) && false ?: '_'};
        }, 'translation.loader.mo' => function () {
            return ${($_ = isset($this->services['translation.loader.mo']) ? $this->services['translation.loader.mo'] : $this->get('translation.loader.mo')) && false ?: '_'};
        }, 'translation.loader.php' => function () {
            return ${($_ = isset($this->services['translation.loader.php']) ? $this->services['translation.loader.php'] : $this->get('translation.loader.php')) && false ?: '_'};
        }, 'translation.loader.po' => function () {
            return ${($_ = isset($this->services['translation.loader.po']) ? $this->services['translation.loader.po'] : $this->get('translation.loader.po')) && false ?: '_'};
        }, 'translation.loader.qt' => function () {
            return ${($_ = isset($this->services['translation.loader.qt']) ? $this->services['translation.loader.qt'] : $this->get('translation.loader.qt')) && false ?: '_'};
        }, 'translation.loader.res' => function () {
            return ${($_ = isset($this->services['translation.loader.res']) ? $this->services['translation.loader.res'] : $this->get('translation.loader.res')) && false ?: '_'};
        }, 'translation.loader.xliff' => function () {
            return ${($_ = isset($this->services['translation.loader.xliff']) ? $this->services['translation.loader.xliff'] : $this->get('translation.loader.xliff')) && false ?: '_'};
        }, 'translation.loader.yml' => function () {
            return ${($_ = isset($this->services['translation.loader.yml']) ? $this->services['translation.loader.yml'] : $this->get('translation.loader.yml')) && false ?: '_'};
        })), new \Symfony\Component\Translation\MessageSelector(), 'en', array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'translation.loader.json' => array(0 => 'json')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => true, 'resource_files' => array('pl' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pl.xlf')), 'tr' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.tr.xlf')), 'sr_Cyrl' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Cyrl.xlf')), 'lt' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lt.xlf')), 'mn' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf')), 'lv' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lv.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lv.xlf')), 'ro' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ro.xlf')), 'bg' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.bg.xlf')), 'vi' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.vi.xlf')), 'hy' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf')), 'ru' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ru.xlf')), 'eu' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf')), 'et' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf')), 'el' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.el.xlf')), 'no' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.no.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.no.xlf')), 'ja' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ja.xlf')), 'sq' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf')), 'ca' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ca.xlf')), 'fr' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fr.xlf'), 3 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations/sulu/backend.fr.xlf'), 4 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations/sulu/backend.fr.xlf'), 5 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations/sulu/backend.fr.xlf'), 6 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations/sulu/backend.fr.xlf'), 7 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations/sulu/backend.fr.xlf'), 8 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations/sulu/backend.fr.xlf'), 9 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/Resources/translations/sulu/backend.fr.xlf'), 10 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations/sulu/backend.fr.xlf'), 11 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations/sulu/backend.fr.xlf'), 12 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations/sulu/backend.fr.xlf'), 13 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/Resources/translations/sulu/backend.fr.xlf'), 14 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations/sulu/backend.fr.xlf')), 'sr_Latn' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sr_Latn.xlf')), 'fi' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf')), 'id' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.id.xlf')), 'cy' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf')), 'he' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.he.xlf')), 'hr' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hr.xlf')), 'it' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.it.xlf')), 'af' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf')), 'sl' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sl.xlf')), 'sk' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sk.xlf')), 'pt' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf')), 'cs' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.cs.xlf')), 'nl' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.nl.xlf'), 3 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations/sulu/backend.nl.xlf'), 4 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations/sulu/backend.nl.xlf'), 5 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations/sulu/backend.nl.xlf'), 6 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations/sulu/backend.nl.xlf'), 7 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations/sulu/backend.nl.xlf'), 8 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations/sulu/backend.nl.xlf'), 9 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/Resources/translations/sulu/backend.nl.xlf'), 10 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations/sulu/backend.nl.xlf'), 11 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations/sulu/backend.nl.xlf'), 12 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations/sulu/backend.nl.xlf'), 13 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/Resources/translations/sulu/backend.nl.xlf'), 14 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations/sulu/backend.nl.xlf')), 'nn' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nn.xlf')), 'sv' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.sv.xlf')), 'zh_TW' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf')), 'lb' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.lb.xlf')), 'uk' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf')), 'fa' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.fa.xlf')), 'hu' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.hu.xlf')), 'gl' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.gl.xlf')), 'pt_BR' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_BR.xlf')), 'zh_CN' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.zh_CN.xlf')), 'de' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.de.xlf'), 3 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations/sulu/backend.de.xlf'), 4 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations/sulu/backend.de.xlf'), 5 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations/sulu/backend.de.xlf'), 6 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations/sulu/backend.de.xlf'), 7 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations/sulu/backend.de.xlf'), 8 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations/sulu/backend.de.xlf'), 9 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/Resources/translations/sulu/backend.de.xlf'), 10 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations/sulu/backend.de.xlf'), 11 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations/sulu/backend.de.xlf'), 12 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations/sulu/backend.de.xlf'), 13 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/Resources/translations/sulu/backend.de.xlf'), 14 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations/sulu/backend.de.xlf')), 'th' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.th.xlf')), 'es' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.es.xlf')), 'ar' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ar.xlf')), 'da' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.da.xlf')), 'az' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.az.xlf')), 'en' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf'), 1 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf'), 2 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.en.xlf'), 3 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/translations/sulu/backend.en.xlf'), 4 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/translations/sulu/backend.en.xlf'), 5 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/translations/sulu/backend.en.xlf'), 6 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/translations/sulu/backend.en.xlf'), 7 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/translations/sulu/backend.en.xlf'), 8 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/translations/sulu/backend.en.xlf'), 9 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/Resources/translations/sulu/backend.en.xlf'), 10 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/translations/sulu/backend.en.xlf'), 11 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/translations/sulu/backend.en.xlf'), 12 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/translations/sulu/backend.en.xlf'), 13 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/Resources/translations/sulu/backend.en.xlf'), 14 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/translations/sulu/backend.en.xlf')), 'ua' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.ua.xlf')), 'pt_PT' => array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Resources/translations/security.pt_PT.xlf')))));

        $instance->setConfigCacheFactory(${($_ = isset($this->services['config_cache_factory']) ? $this->services['config_cache_factory'] : $this->get('config_cache_factory')) && false ?: '_'});
        $instance->setFallbackLocales(array(0 => 'en'));

        return $instance;
    }

    /**
     * Gets the public 'translator_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener
     */
    protected function getTranslatorListenerService()
    {
        return $this->services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener(${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'twig' shared service.
     *
     * @return \Twig\Environment
     */
    protected function getTwigService()
    {
        $a = ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $b = ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'};
        $c = ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'};

        $d = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 1);
        $d->setDisplayOptions(array('maxStringLength' => 4096, 'fileLinkFormat' => $b));

        $e = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 0);
        $e->setDisplayOptions(array('fileLinkFormat' => $b));

        $f = new \Symfony\Bridge\Twig\AppVariable();
        $f->setEnvironment('dev');
        $f->setDebug(true);
        if ($this->has('request_stack')) {
            $f->setRequestStack($c);
        }

        $this->services['twig'] = $instance = new \Twig\Environment(${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}, array('debug' => true, 'strict_variables' => true, 'exception_controller' => 'twig.controller.exception:showAction', 'form_themes' => array(0 => 'form_div_layout.html.twig'), 'autoescape' => 'name', 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'paths' => array(), 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension(${($_ = isset($this->services['twig.profile']) ? $this->services['twig.profile'] : $this->get('twig.profile')) && false ?: '_'}, $a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension(${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(${($_ = isset($this->services['assets.packages']) ? $this->services['assets.packages'] : $this->get('assets.packages')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension($b, ($this->targetDirs[4].'/app'), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($a, true));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($c, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}));
        $instance->addExtension(new \Twig\Extension\DebugExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(array(0 => $this, 1 => 'twig.form.renderer')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\WebLinkExtension($c));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerRuntimeExtension());
        $instance->addExtension(${($_ = isset($this->services['hateoas.twig.link']) ? $this->services['hateoas.twig.link'] : $this->get('hateoas.twig.link')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_contact.twig']) ? $this->services['sulu_contact.twig'] : $this->get('sulu_contact.twig')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_media.twig_extension.disposition_type']) ? $this->services['sulu_media.twig_extension.disposition_type'] : $this->get('sulu_media.twig_extension.disposition_type')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_media.twig_extension.media']) ? $this->services['sulu_media.twig_extension.media'] : $this->get('sulu_media.twig_extension.media')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_security.twig_extension.user']) ? $this->services['sulu_security.twig_extension.user'] : $this->get('sulu_security.twig_extension.user')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_category.twig_extension']) ? $this->services['sulu_category.twig_extension'] : $this->get('sulu_category.twig_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_snippet.twig.snippet.memoized']) ? $this->services['sulu_snippet.twig.snippet.memoized'] : $this->get('sulu_snippet.twig.snippet.memoized')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_snippet.twig.default_snippet']) ? $this->services['sulu_snippet.twig.default_snippet'] : $this->get('sulu_snippet.twig.default_snippet')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_snippet.twig.area_snippet']) ? $this->services['sulu_snippet.twig.area_snippet'] : $this->get('sulu_snippet.twig.area_snippet')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_content.twig_extension']) ? $this->services['sulu_content.twig_extension'] : $this->get('sulu_content.twig_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_content.export_twig_extension']) ? $this->services['sulu_content.export_twig_extension'] : $this->get('sulu_content.export_twig_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_tag.twig_extension']) ? $this->services['sulu_tag.twig_extension'] : $this->get('sulu_tag.twig_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_website.twig.content_path']) ? $this->services['sulu_website.twig.content_path'] : $this->get('sulu_website.twig.content_path')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_website.twig.navigation.memoized']) ? $this->services['sulu_website.twig.navigation.memoized'] : $this->get('sulu_website.twig.navigation.memoized')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_website.twig.sitemap.memoized']) ? $this->services['sulu_website.twig.sitemap.memoized'] : $this->get('sulu_website.twig.sitemap.memoized')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_website.twig.content.memoized']) ? $this->services['sulu_website.twig.content.memoized'] : $this->get('sulu_website.twig.content.memoized')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_website.twig.meta']) ? $this->services['sulu_website.twig.meta'] : $this->get('sulu_website.twig.meta')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_website.twig.seo']) ? $this->services['sulu_website.twig.seo'] : $this->get('sulu_website.twig.seo')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sulu_website.twig.util']) ? $this->services['sulu_website.twig.util'] : $this->get('sulu_website.twig.util')) && false ?: '_'});
        $instance->addExtension(new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension($d));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\DumpExtension(${($_ = isset($this->services['var_dumper.cloner']) ? $this->services['var_dumper.cloner'] : $this->get('var_dumper.cloner')) && false ?: '_'}, $e));
        $instance->addGlobal('app', $f);
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\ServiceLocator(array('JMS\\Serializer\\Twig\\SerializerRuntimeHelper' => function () {
            return ${($_ = isset($this->services['jms_serializer.twig_extension.serializer_runtime_helper']) ? $this->services['jms_serializer.twig_extension.serializer_runtime_helper'] : $this->get('jms_serializer.twig_extension.serializer_runtime_helper')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => function () {
            return ${($_ = isset($this->services['twig.runtime.httpkernel']) ? $this->services['twig.runtime.httpkernel'] : $this->get('twig.runtime.httpkernel')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer' => function () {
            return ${($_ = isset($this->services['twig.form.renderer']) ? $this->services['twig.form.renderer'] : $this->get('twig.form.renderer')) && false ?: '_'};
        }))));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'twig.controller.preview_error' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this->services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController(${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'}, 'twig.controller.exception:showAction');
    }

    /**
     * Gets the public 'twig.exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('twig.controller.exception:showAction', ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'twig.form.renderer' shared service.
     *
     * @return \Symfony\Bridge\Twig\Form\TwigRenderer
     */
    protected function getTwig_Form_RendererService()
    {
        return $this->services['twig.form.renderer'] = new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => 'form_div_layout.html.twig'), ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}), ${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'twig.loader' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, $this->targetDirs[4]);

        $instance->addPath(($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), 'Framework');
        $instance->addPath(($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), 'Twig');
        $instance->addPath(($this->targetDirs[4].'/vendor/symfony/swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance->addPath(($this->targetDirs[4].'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $instance->addPath(($this->targetDirs[4].'/vendor/doctrine/phpcr-bundle/Resources/views'), 'DoctrinePHPCR');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/views'), 'SuluContact');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/views'), 'SuluMedia');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/views'), 'SuluSecurity');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/views'), 'SuluCategory');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/views'), 'SuluSnippet');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/Resources/views'), 'SuluContent');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/views'), 'SuluTag');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/views'), 'SuluWebsite');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/views'), 'SuluLocation');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/views'), 'SuluRoute');
        $instance->addPath(($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views'), 'WebProfiler');
        $instance->addPath(($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TestBundle/Resources/views'), 'SuluTest');
        $instance->addPath(($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/views'), 'Debug');
        $instance->addPath(($this->targetDirs[4].'/app/Resources/views'));
        $instance->addPath(($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form'));

        return $instance;
    }

    /**
     * Gets the public 'twig.profile' shared service.
     *
     * @return \Twig\Profiler\Profile
     */
    protected function getTwig_ProfileService()
    {
        return $this->services['twig.profile'] = new \Twig\Profiler\Profile();
    }

    /**
     * Gets the public 'twig.runtime.httpkernel' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpKernelRuntime
     */
    protected function getTwig_Runtime_HttpkernelService()
    {
        return $this->services['twig.runtime.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelRuntime(${($_ = isset($this->services['fragment.handler']) ? $this->services['fragment.handler'] : $this->get('fragment.handler')) && false ?: '_'});
    }

    /**
     * Gets the public 'twig.translation.extractor' shared service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'});
    }

    /**
     * Gets the public 'uri_signer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the public 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected function getValidateRequestListenerService()
    {
        return $this->services['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the public 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = ${($_ = isset($this->services['validator.builder']) ? $this->services['validator.builder'] : $this->get('validator.builder')) && false ?: '_'}->getValidator();
    }

    /**
     * Gets the public 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface
     */
    protected function getValidator_BuilderService()
    {
        $this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => function () {
            return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->get('doctrine.orm.validator.unique')) && false ?: '_'};
        }, 'Symfony\\Cmf\\Bundle\\RoutingBundle\\Validator\\Constraints\\RouteDefaultsTemplatingValidator' => function () {
            return ${($_ = isset($this->services['cmf_routing.validator.route_defaults']) ? $this->services['cmf_routing.validator.route_defaults'] : $this->get('cmf_routing.validator.route_defaults')) && false ?: '_'};
        }, 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => function () {
            return ${($_ = isset($this->services['validator.email']) ? $this->services['validator.email'] : $this->get('validator.email')) && false ?: '_'};
        }, 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => function () {
            return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : $this->get('validator.expression')) && false ?: '_'};
        }, 'cmf_routing.validator.route_defaults' => function () {
            return ${($_ = isset($this->services['cmf_routing.validator.route_defaults']) ? $this->services['cmf_routing.validator.route_defaults'] : $this->get('cmf_routing.validator.route_defaults')) && false ?: '_'};
        }, 'doctrine.orm.validator.unique' => function () {
            return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->get('doctrine.orm.validator.unique')) && false ?: '_'};
        }, 'validator.expression' => function () {
            return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : $this->get('validator.expression')) && false ?: '_'};
        }))));
        $instance->setTranslator(${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'});
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(array(0 => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml')));
        $instance->enableAnnotationMapping(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers(array(0 => ${($_ = isset($this->services['doctrine.orm.validator_initializer']) ? $this->services['doctrine.orm.validator_initializer'] : $this->get('doctrine.orm.validator_initializer')) && false ?: '_'}));

        return $instance;
    }

    /**
     * Gets the public 'validator.email' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator
     */
    protected function getValidator_EmailService()
    {
        return $this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /**
     * Gets the public 'validator.expression' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator
     */
    protected function getValidator_ExpressionService()
    {
        return $this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator();
    }

    /**
     * Gets the public 'var_dumper.cli_dumper' shared service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper
     */
    protected function getVarDumper_CliDumperService()
    {
        return $this->services['var_dumper.cli_dumper'] = new \Symfony\Component\VarDumper\Dumper\CliDumper(NULL, 'UTF-8', 0);
    }

    /**
     * Gets the public 'var_dumper.cloner' shared service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner
     */
    protected function getVarDumper_ClonerService()
    {
        $this->services['var_dumper.cloner'] = $instance = new \Symfony\Component\VarDumper\Cloner\VarCloner();

        $instance->setMaxItems(2500);
        $instance->setMaxString(-1);

        return $instance;
    }

    /**
     * Gets the public 'web_profiler.controller.exception' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'web_profiler.controller.profiler' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController(${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, array('data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.ajax' => array(0 => 'ajax', 1 => '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.form' => array(0 => 'form', 1 => '@WebProfiler/Collector/form.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.cache' => array(0 => 'cache', 1 => '@WebProfiler/Collector/cache.html.twig'), 'data_collector.translation' => array(0 => 'translation', 1 => '@WebProfiler/Collector/translation.html.twig'), 'data_collector.twig' => array(0 => 'twig', 1 => '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => '@Doctrine/Collector/db.html.twig'), 'doctrine_phpcr.data_collector' => array(0 => 'phpcr', 1 => 'DoctrinePHPCRBundle:Collector:phpcr'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.dump' => array(0 => 'dump', 1 => '@Debug/Profiler/dump.html.twig'), 'sulu_website.data_collector.sulu_collector' => array(0 => 'sulu', 1 => 'SuluWebsiteBundle:Profiler:layout'), 'data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig')), 'bottom', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'}, $this->targetDirs[4]);
    }

    /**
     * Gets the public 'web_profiler.controller.router' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'web_profiler.debug_toolbar' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, false, 2, 'bottom', ${($_ = isset($this->services['cmf_routing.router']) ? $this->services['cmf_routing.router'] : $this->get('cmf_routing.router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, '^/(app(_[\\w]+)?\\.php/)?_wdt', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'});
    }

    /**
     * Gets the private '1_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker
     */
    protected function get160e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492eeService()
    {
        return $this->services['1_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee'] = new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($this);
    }

    /**
     * Gets the private '2_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee' shared service.
     *
     * @return \Symfony\Component\Config\Resource\SelfCheckingResourceChecker
     */
    protected function get260e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492eeService()
    {
        return $this->services['2_60e5fae58fa2e0f3940af34559ca9e88fa51f2b48b076ebda581a024753492ee'] = new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker();
    }

    /**
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected function getAnnotations_ReaderService()
    {
        $a = new \Doctrine\Common\Annotations\AnnotationRegistry();
        $a->registerLoader('class_exists');

        $this->services['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $instance->addGlobalIgnoredName('required', $a);

        return $instance;
    }

    /**
     * Gets the private 'argument_resolver.default' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver
     */
    protected function getArgumentResolver_DefaultService()
    {
        return $this->services['argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.request' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver
     */
    protected function getArgumentResolver_RequestService()
    {
        return $this->services['argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.request_attribute' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver
     */
    protected function getArgumentResolver_RequestAttributeService()
    {
        return $this->services['argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.service' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver
     */
    protected function getArgumentResolver_ServiceService()
    {
        return $this->services['argument_resolver.service'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver(new \Symfony\Component\DependencyInjection\ServiceLocator(array()));
    }

    /**
     * Gets the private 'argument_resolver.session' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver
     */
    protected function getArgumentResolver_SessionService()
    {
        return $this->services['argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.variadic' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver
     */
    protected function getArgumentResolver_VariadicService()
    {
        return $this->services['argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver();
    }

    /**
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AnnotationsService()
    {
        return $this->services['cache.annotations'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.annotations.recorder_inner']) ? $this->services['cache.annotations.recorder_inner'] : $this->getCache_Annotations_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.annotations.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Annotations_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.annotations.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('2ArsXzEUek', 0, '3tivYrnPnR0F59VnjhviPJ', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.app.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    public function getCache_App_RecorderInnerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['cache.app.recorder_inner'] = SymfonyComponentCacheAdapterFilesystemAdapter_00000000199ddbca000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getCache_App_RecorderInnerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('PuQ1VcvG9O', 0, (__DIR__.'/pools'));

        if ($this->has('monolog.logger.cache')) {
            $instance->setLogger(${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }

        return $instance;
    }

    /**
     * Gets the private 'cache.serializer.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Serializer_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.serializer.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('co-h4vC41j', 0, '3tivYrnPnR0F59VnjhviPJ', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.system.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_System_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.system.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('WlgzgQi+4M', 0, '3tivYrnPnR0F59VnjhviPJ', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_ValidatorService()
    {
        return $this->services['cache.validator'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.validator.recorder_inner']) ? $this->services['cache.validator.recorder_inner'] : $this->getCache_Validator_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.validator.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Validator_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.validator.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('-6ONDNYvqH', 0, '3tivYrnPnR0F59VnjhviPJ', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cmf_routing.matcher.dummy_collection' shared service.
     *
     * @return \Symfony\Component\Routing\RouteCollection
     */
    protected function getCmfRouting_Matcher_DummyCollectionService()
    {
        return $this->services['cmf_routing.matcher.dummy_collection'] = new \Symfony\Component\Routing\RouteCollection();
    }

    /**
     * Gets the private 'cmf_routing.matcher.dummy_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getCmfRouting_Matcher_DummyContextService()
    {
        return $this->services['cmf_routing.matcher.dummy_context'] = new \Symfony\Component\Routing\RequestContext();
    }

    /**
     * Gets the private 'console.error_listener' shared service.
     *
     * @return \Symfony\Component\Console\EventListener\ErrorListener
     */
    protected function getConsole_ErrorListenerService()
    {
        return $this->services['console.error_listener'] = new \Symfony\Component\Console\EventListener\ErrorListener(${($_ = isset($this->services['monolog.logger.console']) ? $this->services['monolog.logger.console'] : $this->get('monolog.logger.console', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'controller_name_converter' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the private 'debug.file_link_formatter' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\FileLinkFormatter
     */
    protected function getDebug_FileLinkFormatterService()
    {
        return $this->services['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, $this->targetDirs[4], '/_profiler/open?file=%f&line=%l#line%l');
    }

    /**
     * Gets the private 'debug.log_processor' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Processor\DebugProcessor
     */
    protected function getDebug_LogProcessorService()
    {
        return $this->services['debug.log_processor'] = new \Symfony\Bridge\Monolog\Processor\DebugProcessor();
    }

    /**
     * Gets the private 'doctrine.dbal.logger.profiling.default' shared service.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the private 'form.server_params' shared service.
     *
     * @return \Symfony\Component\Form\Util\ServerParams
     */
    protected function getForm_ServerParamsService()
    {
        return $this->services['form.server_params'] = new \Symfony\Component\Form\Util\ServerParams(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the private 'form.type.choice' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType(new \Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator(new \Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator(new \Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory(), ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'})));
    }

    /**
     * Gets the private 'form.type.form' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType(${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});
    }

    /**
     * Gets the private 'form.type_extension.csrf' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension(${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager')) && false ?: '_'}, true, '_token', ${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'}, 'validators', ${($_ = isset($this->services['form.server_params']) ? $this->services['form.server_params'] : $this->getForm_ServerParamsService()) && false ?: '_'});
    }

    /**
     * Gets the private 'form.type_extension.form.data_collector' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension
     */
    protected function getForm_TypeExtension_Form_DataCollectorService()
    {
        return $this->services['form.type_extension.form.data_collector'] = new \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension(${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
    }

    /**
     * Gets the private 'form.type_extension.form.http_foundation' shared service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler(${($_ = isset($this->services['form.server_params']) ? $this->services['form.server_params'] : $this->getForm_ServerParamsService()) && false ?: '_'}));
    }

    /**
     * Gets the private 'form.type_extension.form.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the private 'form.type_extension.repeated.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the private 'form.type_extension.submit.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the private 'form.type_extension.upload.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension
     */
    protected function getForm_TypeExtension_Upload_ValidatorService()
    {
        return $this->services['form.type_extension.upload.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension(${($_ = isset($this->services['sulu_website.translator.request_analyzer']) ? $this->services['sulu_website.translator.request_analyzer'] : $this->get('sulu_website.translator.request_analyzer')) && false ?: '_'}, 'validators');
    }

    /**
     * Gets the private 'form.type_guesser.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the private 'hateoas.configuration.relations_repository' shared service.
     *
     * @return \Hateoas\Configuration\RelationsRepository
     */
    protected function getHateoas_Configuration_RelationsRepositoryService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata.file_locator']) ? $this->services['jms_serializer.metadata.file_locator'] : $this->getJmsSerializer_Metadata_FileLocatorService()) && false ?: '_'};
        $b = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $c = new \Hateoas\Configuration\Metadata\Driver\YamlDriver($a);

        $d = new \Hateoas\Configuration\Metadata\Driver\XmlDriver($a);

        $e = new \Hateoas\Configuration\Metadata\Driver\AnnotationDriver($b);

        $f = new \Hateoas\Configuration\Metadata\Driver\ExtensionDriver($e);

        $g = new \Metadata\Driver\DriverChain(array(0 => $c, 1 => $d, 2 => $f));

        $h = new \Metadata\Cache\FileCache((__DIR__.'/hateoas'));

        $i = new \Metadata\MetadataFactory($g, 'Metadata\\ClassHierarchyMetadata', true);
        $i->setCache($h);

        return $this->services['hateoas.configuration.relations_repository'] = new \Hateoas\Configuration\RelationsRepository($i, new \Hateoas\Configuration\Provider\RelationProvider($i, ${($_ = isset($this->services['hateoas.configuration.provider.resolver']) ? $this->services['hateoas.configuration.provider.resolver'] : $this->get('hateoas.configuration.provider.resolver')) && false ?: '_'}));
    }

    /**
     * Gets the private 'hateoas.embeds_factory' shared service.
     *
     * @return \Hateoas\Factory\EmbeddedsFactory
     */
    protected function getHateoas_EmbedsFactoryService()
    {
        return $this->services['hateoas.embeds_factory'] = new \Hateoas\Factory\EmbeddedsFactory(${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.expression.evaluator']) ? $this->services['hateoas.expression.evaluator'] : $this->get('hateoas.expression.evaluator')) && false ?: '_'}, ${($_ = isset($this->services['hateoas.serializer.exclusion_manager']) ? $this->services['hateoas.serializer.exclusion_manager'] : $this->get('hateoas.serializer.exclusion_manager')) && false ?: '_'});
    }

    /**
     * Gets the private 'hateoas.link_factory' shared service.
     *
     * @return \Hateoas\Factory\LinkFactory
     */
    protected function getHateoas_LinkFactoryService()
    {
        return $this->services['hateoas.link_factory'] = new \Hateoas\Factory\LinkFactory(${($_ = isset($this->services['hateoas.expression.evaluator']) ? $this->services['hateoas.expression.evaluator'] : $this->get('hateoas.expression.evaluator')) && false ?: '_'}, ${($_ = isset($this->services['hateoas.generator.registry']) ? $this->services['hateoas.generator.registry'] : $this->get('hateoas.generator.registry')) && false ?: '_'});
    }

    /**
     * Gets the private 'hateoas.links_factory' shared service.
     *
     * @return \Hateoas\Factory\LinksFactory
     */
    protected function getHateoas_LinksFactoryService()
    {
        return $this->services['hateoas.links_factory'] = new \Hateoas\Factory\LinksFactory(${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.link_factory']) ? $this->services['hateoas.link_factory'] : $this->getHateoas_LinkFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.serializer.exclusion_manager']) ? $this->services['hateoas.serializer.exclusion_manager'] : $this->get('hateoas.serializer.exclusion_manager')) && false ?: '_'});
    }

    /**
     * Gets the private 'jms_serializer.metadata.file_locator' shared service.
     *
     * @return \Metadata\Driver\FileLocator
     */
    protected function getJmsSerializer_Metadata_FileLocatorService()
    {
        return $this->services['jms_serializer.metadata.file_locator'] = new \Metadata\Driver\FileLocator(array('Symfony\\Bundle\\FrameworkBundle' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/serializer'), 'Symfony\\Bundle\\TwigBundle' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/config/serializer'), 'Symfony\\Bundle\\MonologBundle' => ($this->targetDirs[4].'/vendor/symfony/monolog-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\SwiftmailerBundle' => ($this->targetDirs[4].'/vendor/symfony/swiftmailer-bundle/Resources/config/serializer'), 'Sensio\\Bundle\\FrameworkExtraBundle' => ($this->targetDirs[4].'/vendor/sensio/framework-extra-bundle/Resources/config/serializer'), 'Sulu\\Bundle\\CoreBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineBundle' => ($this->targetDirs[4].'/vendor/doctrine/doctrine-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineCacheBundle' => ($this->targetDirs[4].'/vendor/doctrine/doctrine-cache-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\FixturesBundle' => ($this->targetDirs[4].'/vendor/doctrine/doctrine-fixtures-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\PHPCRBundle' => ($this->targetDirs[4].'/vendor/doctrine/phpcr-bundle/Resources/config/serializer'), 'Stof\\DoctrineExtensionsBundle' => ($this->targetDirs[4].'/vendor/stof/doctrine-extensions-bundle/Resources/config/serializer'), 'FOS\\RestBundle' => ($this->targetDirs[4].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/config/serializer'), 'JMS\\SerializerBundle' => ($this->targetDirs[4].'/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/config/serializer'), 'Bazinga\\Bundle\\HateoasBundle' => ($this->targetDirs[4].'/vendor/willdurand/hateoas-bundle/Resources/config/serializer'), 'Massive\\Bundle\\SearchBundle' => ($this->targetDirs[4].'/vendor/massive/search-bundle/Resources/config/serializer'), 'Sulu\\Bundle\\SearchBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/config/serializer'), 'Sulu\\Bundle\\PersistenceBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/PersistenceBundle/Resources/config/serializer'), 'Sulu\\Bundle\\ContactBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle/Resources/config/serializer'), 'Sulu\\Bundle\\MediaBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/Resources/config/serializer'), 'Sulu\\Bundle\\SecurityBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/Resources/config/serializer'), 'Sulu\\Bundle\\CategoryBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/Resources/config/serializer'), 'Sulu\\Bundle\\SnippetBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/Resources/config/serializer'), 'Sulu\\Bundle\\ContentBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/DependencyInjection/../Resources/config/serializer'), 'Sulu\\Bundle\\TagBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle/Resources/config/serializer'), 'Sulu\\Bundle\\WebsiteBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle/Resources/config/serializer'), 'Sulu\\Bundle\\LocationBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle/Resources/config/serializer'), 'Sulu\\Bundle\\HttpCacheBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/HttpCacheBundle/Resources/config/serializer'), 'Sulu\\Bundle\\WebsocketBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsocketBundle/Resources/config/serializer'), 'Sulu\\Bundle\\TranslateBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TranslateBundle/Resources/config/serializer'), 'Sulu\\Bundle\\DocumentManagerBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/Resources/config/serializer'), 'Sulu\\Bundle\\HashBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/HashBundle/Resources/config/serializer'), 'Sulu\\Bundle\\CustomUrlBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/Resources/config/serializer'), 'Sulu\\Bundle\\RouteBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle/Resources/config/serializer'), 'Sulu\\Bundle\\MarkupBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MarkupBundle/Resources/config/serializer'), 'DTL\\Bundle\\PhpcrMigrations' => ($this->targetDirs[4].'/vendor/dantleech/phpcr-migrations-bundle/Resources/config/serializer'), 'Dubture\\FFmpegBundle' => ($this->targetDirs[4].'/vendor/pulse00/ffmpeg-bundle/Resources/config/serializer'), 'Massive\\Bundle\\BuildBundle' => ($this->targetDirs[4].'/vendor/massive/build-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\WebProfilerBundle' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/serializer'), 'Sensio\\Bundle\\DistributionBundle' => ($this->targetDirs[4].'/vendor/sensio/distribution-bundle/Resources/config/serializer'), 'Sensio\\Bundle\\GeneratorBundle' => ($this->targetDirs[4].'/vendor/sensio/generator-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\WebServerBundle' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/WebServerBundle/Resources/config/serializer'), 'Sulu\\Bundle\\TestBundle' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TestBundle/Resources/config/serializer'), 'Symfony\\Bundle\\DebugBundle' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/Resources/config/serializer'), 'Symfony\\Cmf\\Bundle\\RoutingBundle' => ($this->targetDirs[4].'/vendor/symfony-cmf/routing-bundle/src/Resources/config/serializer'), 'Sulu\\Component\\CustomUrl' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle/DependencyInjection/../Resources/config/serializer'), 'Sulu\\Component\\DocumentManager' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle/DependencyInjection/../Resources/config/serializer'), 'Sulu\\Component\\Content' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/DependencyInjection/../Resources/config/serializer'), 'Sulu\\Component\\Webspace' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/DependencyInjection/../Resources/config/serializer'), 'Sulu\\Bundle\\CategoryBundle\\Entity' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle/DependencyInjection/../Resources/config/serializer'), 'Massive\\Bundle\\SearchBundle\\Search' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/config/serializer/massive'), 'Sulu\\Bundle\\SearchBundle\\Search' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle/Resources/config/serializer/sulu')));
    }

    /**
     * Gets the private 'jms_serializer.metadata_factory' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getJmsSerializer_MetadataFactoryService()
    {
        $this->services['jms_serializer.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_serializer')));

        return $instance;
    }

    /**
     * Gets the private 'jms_serializer.unserialize_object_constructor' shared service.
     *
     * @return \JMS\Serializer\Construction\UnserializeObjectConstructor
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /**
     * Gets the private 'monolog.processor.psr_log_message' shared service.
     *
     * @return \Monolog\Processor\PsrLogMessageProcessor
     */
    protected function getMonolog_Processor_PsrLogMessageService()
    {
        return $this->services['monolog.processor.psr_log_message'] = new \Monolog\Processor\PsrLogMessageProcessor();
    }

    /**
     * Gets the private 'phpcr_migrations.version_finder' shared service.
     *
     * @return \PHPCR\Migrations\VersionFinder
     */
    protected function getPhpcrMigrations_VersionFinderService()
    {
        return $this->services['phpcr_migrations.version_finder'] = new \PHPCR\Migrations\VersionFinder(array(0 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/Resources/phpcr-migrations')));
    }

    /**
     * Gets the private 'phpcr_migrations.version_storage' shared service.
     *
     * @return \PHPCR\Migrations\VersionStorage
     */
    protected function getPhpcrMigrations_VersionStorageService()
    {
        return $this->services['phpcr_migrations.version_storage'] = new \PHPCR\Migrations\VersionStorage(${($_ = isset($this->services['doctrine_phpcr.default_session']) ? $this->services['doctrine_phpcr.default_session'] : $this->get('doctrine_phpcr.default_session')) && false ?: '_'}, 'jcr:versions');
    }

    /**
     * Gets the private 'resolve_controller_name_subscriber' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber
     */
    protected function getResolveControllerNameSubscriberService()
    {
        return $this->services['resolve_controller_name_subscriber'] = new \Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber(${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'});
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the private 'service_locator.e64d23c3bf770e2cf44b71643280668d' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getServiceLocator_E64d23c3bf770e2cf44b71643280668dService()
    {
        return $this->services['service_locator.e64d23c3bf770e2cf44b71643280668d'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('esi' => function () {
            return ${($_ = isset($this->services['fragment.renderer.esi']) ? $this->services['fragment.renderer.esi'] : $this->get('fragment.renderer.esi')) && false ?: '_'};
        }, 'hinclude' => function () {
            return ${($_ = isset($this->services['fragment.renderer.hinclude']) ? $this->services['fragment.renderer.hinclude'] : $this->get('fragment.renderer.hinclude')) && false ?: '_'};
        }, 'inline' => function () {
            return ${($_ = isset($this->services['fragment.renderer.inline']) ? $this->services['fragment.renderer.inline'] : $this->get('fragment.renderer.inline')) && false ?: '_'};
        }, 'ssi' => function () {
            return ${($_ = isset($this->services['fragment.renderer.ssi']) ? $this->services['fragment.renderer.ssi'] : $this->get('fragment.renderer.ssi')) && false ?: '_'};
        }));
    }

    /**
     * Gets the private 'session.storage.metadata_bag' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this->services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /**
     * Gets the private 'sulu_contact.util.id_converter' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Util\CustomerIdConverter
     */
    protected function getSuluContact_Util_IdConverterService()
    {
        return $this->services['sulu_contact.util.id_converter'] = new \Sulu\Bundle\ContactBundle\Util\CustomerIdConverter();
    }

    /**
     * Gets the private 'sulu_contact.util.index_comparator' shared service.
     *
     * @return \Sulu\Bundle\ContactBundle\Util\IndexComparator
     */
    protected function getSuluContact_Util_IndexComparatorService()
    {
        return $this->services['sulu_contact.util.index_comparator'] = new \Sulu\Bundle\ContactBundle\Util\IndexComparator();
    }

    /**
     * Gets the private 'sulu_content.smart_content.data_provider.content.query_builder' shared service.
     *
     * @return \Sulu\Component\Content\SmartContent\QueryBuilder
     */
    protected function getSuluContent_SmartContent_DataProvider_Content_QueryBuilderService()
    {
        return $this->services['sulu_content.smart_content.data_provider.content.query_builder'] = new \Sulu\Component\Content\SmartContent\QueryBuilder(${($_ = isset($this->services['sulu.content.structure_manager']) ? $this->services['sulu.content.structure_manager'] : $this->get('sulu.content.structure_manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu_content.extension.manager']) ? $this->services['sulu_content.extension.manager'] : $this->get('sulu_content.extension.manager')) && false ?: '_'}, ${($_ = isset($this->services['sulu.phpcr.session']) ? $this->services['sulu.phpcr.session'] : $this->get('sulu.phpcr.session')) && false ?: '_'}, 'i18n');
    }

    /**
     * Gets the private 'sulu_core.proxy_manager.configuration' shared service.
     *
     * @return \ProxyManager\Configuration
     */
    protected function getSuluCore_ProxyManager_ConfigurationService()
    {
        $this->services['sulu_core.proxy_manager.configuration'] = $instance = new \ProxyManager\Configuration();

        $instance->setProxiesTargetDir((__DIR__.'/sulu/proxies'));
        $instance->setGeneratorStrategy(new \ProxyManager\GeneratorStrategy\FileWriterGeneratorStrategy(new \ProxyManager\FileLocator\FileLocator(${($_ = isset($this->services['sulu_core.proxy_manager.configuration']) ? $this->services['sulu_core.proxy_manager.configuration'] : $this->getSuluCore_ProxyManager_ConfigurationService()) && false ?: '_'}->getProxiesTargetDir())));

        return $instance;
    }

    /**
     * Gets the private 'sulu_document_manager.document_registry' shared service.
     *
     * @return \Sulu\Component\DocumentManager\DocumentRegistry
     */
    protected function getSuluDocumentManager_DocumentRegistryService()
    {
        return $this->services['sulu_document_manager.document_registry'] = new \Sulu\Component\DocumentManager\DocumentRegistry('en');
    }

    /**
     * Gets the private 'sulu_document_manager.metadata_factory' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Metadata\MetadataFactory
     */
    protected function getSuluDocumentManager_MetadataFactoryService()
    {
        return $this->services['sulu_document_manager.metadata_factory'] = new \Sulu\Component\DocumentManager\Metadata\MetadataFactory(${($_ = isset($this->services['sulu_document_manager.metadata_factory.base']) ? $this->services['sulu_document_manager.metadata_factory.base'] : $this->getSuluDocumentManager_MetadataFactory_BaseService()) && false ?: '_'});
    }

    /**
     * Gets the private 'sulu_document_manager.metadata_factory.base' shared service.
     *
     * @return \Sulu\Component\DocumentManager\Metadata\BaseMetadataFactory
     */
    protected function getSuluDocumentManager_MetadataFactory_BaseService()
    {
        return $this->services['sulu_document_manager.metadata_factory.base'] = new \Sulu\Component\DocumentManager\Metadata\BaseMetadataFactory(${($_ = isset($this->services['sulu_document_manager.event_dispatcher']) ? $this->services['sulu_document_manager.event_dispatcher'] : $this->get('sulu_document_manager.event_dispatcher')) && false ?: '_'}, array(0 => array('alias' => 'custom_url', 'class' => 'Sulu\\Component\\CustomUrl\\Document\\CustomUrlDocument', 'phpcr_type' => 'sulu:custom_url', 'mapping' => array('published' => array('property' => 'published', 'encoding' => 'content', 'mapped' => true, 'multiple' => false, 'default' => NULL), 'baseDomain' => array('property' => 'baseDomain', 'encoding' => 'content', 'mapped' => true, 'multiple' => false, 'default' => NULL), 'domainParts' => array('property' => 'domainParts', 'type' => 'json_array', 'encoding' => 'content', 'mapped' => true, 'multiple' => false, 'default' => NULL), 'canonical' => array('property' => 'canonical', 'encoding' => 'content', 'mapped' => true, 'multiple' => false, 'default' => NULL), 'redirect' => array('property' => 'redirect', 'encoding' => 'content', 'mapped' => true, 'multiple' => false, 'default' => NULL), 'targetLocale' => array('property' => 'targetLocale', 'encoding' => 'content', 'mapped' => true, 'multiple' => false, 'default' => NULL))), 1 => array('alias' => 'custom_url_route', 'class' => 'Sulu\\Component\\CustomUrl\\Document\\RouteDocument', 'phpcr_type' => 'sulu:custom_url_route', 'mapping' => array('locale' => array('property' => 'locale', 'encoding' => 'content', 'mapped' => true, 'multiple' => false, 'default' => NULL))), 2 => array('alias' => 'page', 'class' => 'Sulu\\Bundle\\ContentBundle\\Document\\PageDocument', 'phpcr_type' => 'sulu:page', 'form_type' => 'Sulu\\Bundle\\ContentBundle\\Form\\Type\\PageDocumentType', 'set_default_author' => true, 'mapping' => array()), 3 => array('alias' => 'home', 'class' => 'Sulu\\Bundle\\ContentBundle\\Document\\HomeDocument', 'phpcr_type' => 'sulu:home', 'form_type' => 'Sulu\\Bundle\\ContentBundle\\Form\\Type\\HomeDocumentType', 'set_default_author' => true, 'mapping' => array()), 4 => array('alias' => 'route', 'class' => 'Sulu\\Bundle\\ContentBundle\\Document\\RouteDocument', 'phpcr_type' => 'sulu:path', 'mapping' => array()), 5 => array('alias' => 'snippet', 'class' => 'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetDocument', 'phpcr_type' => 'sulu:snippet', 'form_type' => 'Sulu\\Bundle\\SnippetBundle\\Form\\SnippetType', 'mapping' => array())));
    }

    /**
     * Gets the private 'sulu_document_manager.namespace_registry' shared service.
     *
     * @return \Sulu\Component\DocumentManager\NamespaceRegistry
     */
    protected function getSuluDocumentManager_NamespaceRegistryService()
    {
        return $this->services['sulu_document_manager.namespace_registry'] = new \Sulu\Component\DocumentManager\NamespaceRegistry(array('extension_localized' => 'i18n', 'system' => 'sulu', 'system_localized' => 'i18n', 'content' => NULL, 'content_localized' => 'i18n'));
    }

    /**
     * Gets the private 'sulu_document_manager.node_manager' shared service.
     *
     * @return \Sulu\Component\DocumentManager\NodeManager
     */
    protected function getSuluDocumentManager_NodeManagerService()
    {
        return $this->services['sulu_document_manager.node_manager'] = new \Sulu\Component\DocumentManager\NodeManager(${($_ = isset($this->services['sulu_document_manager.decorated_live_session']) ? $this->services['sulu_document_manager.decorated_live_session'] : $this->get('sulu_document_manager.decorated_live_session')) && false ?: '_'});
    }

    /**
     * Gets the private 'sulu_document_manager.path_builder' shared service.
     *
     * @return \Sulu\Component\DocumentManager\PathBuilder
     */
    protected function getSuluDocumentManager_PathBuilderService()
    {
        return $this->services['sulu_document_manager.path_builder'] = new \Sulu\Component\DocumentManager\PathBuilder(${($_ = isset($this->services['sulu_document_manager.path_segment_registry']) ? $this->services['sulu_document_manager.path_segment_registry'] : $this->get('sulu_document_manager.path_segment_registry')) && false ?: '_'});
    }

    /**
     * Gets the private 'sulu_document_manager.property_encoder' shared service.
     *
     * @return \Sulu\Bundle\DocumentManagerBundle\Bridge\PropertyEncoder
     */
    protected function getSuluDocumentManager_PropertyEncoderService()
    {
        return $this->services['sulu_document_manager.property_encoder'] = new \Sulu\Bundle\DocumentManagerBundle\Bridge\PropertyEncoder(${($_ = isset($this->services['sulu_document_manager.namespace_registry']) ? $this->services['sulu_document_manager.namespace_registry'] : $this->getSuluDocumentManager_NamespaceRegistryService()) && false ?: '_'});
    }

    /**
     * Gets the private 'sulu_document_manager.slugifier' shared service.
     *
     * @return \Symfony\Cmf\Api\Slugifier\CallbackSlugifier
     */
    protected function getSuluDocumentManager_SlugifierService()
    {
        return $this->services['sulu_document_manager.slugifier'] = new \Symfony\Cmf\Api\Slugifier\CallbackSlugifier('Ferrandini\\Urlizer::urlize');
    }

    /**
     * Gets the private 'swiftmailer.mailer.default.transport.eventdispatcher' shared service.
     *
     * @return \Swift_Events_SimpleEventDispatcher
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the private 'templating.locator' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, __DIR__);
    }

    /**
     * Gets the private 'translator.data_collector' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator
     */
    protected function getTranslator_DataCollectorService()
    {
        return $this->services['translator.data_collector'] = new \Symfony\Component\Translation\DataCollectorTranslator(new \Symfony\Component\Translation\LoggingTranslator(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->get('translator.default')) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.translation']) ? $this->services['monolog.logger.translation'] : $this->get('monolog.logger.translation')) && false ?: '_'}));
    }

    /**
     * Gets the private 'web_profiler.csp.handler' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler
     */
    protected function getWebProfiler_Csp_HandlerService()
    {
        return $this->services['web_profiler.csp.handler'] = new \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler(new \Symfony\Bundle\WebProfilerBundle\Csp\NonceGenerator());
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = array(
        'kernel.root_dir' => false,
        'kernel.project_dir' => false,
        'kernel.logs_dir' => false,
        'kernel.bundles_metadata' => false,
        'kernel.var_dir' => false,
        'session.save_path' => false,
        'router.resource' => false,
        'sulu.content.structure.paths' => false,
        'sulu_core.webspace.config_dir' => false,
        'massive_search.adapter.zend_lucene.basepath' => false,
        'sulu_media.image_format_files' => false,
        'sulu_media.format_cache.path' => false,
        'sulu_media.media.storage.local.path' => false,
        'sulu_security.security_types.fixture' => false,
        'sulu_website.sitemap.dump_dir' => false,
        'phpcr_migrations.paths' => false,
    );
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        switch ($name) {
            case 'kernel.root_dir': $value = ($this->targetDirs[4].'/app'); break;
            case 'kernel.project_dir': $value = $this->targetDirs[4]; break;
            case 'kernel.logs_dir': $value = ($this->targetDirs[3].'/logs/website'); break;
            case 'kernel.bundles_metadata': $value = array(
                'FrameworkBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ),
                'TwigBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ),
                'MonologBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ),
                'SwiftmailerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony/swiftmailer-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SwiftmailerBundle',
                ),
                'SensioFrameworkExtraBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sensio/framework-extra-bundle'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ),
                'SuluCoreBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle'),
                    'namespace' => 'Sulu\\Bundle\\CoreBundle',
                ),
                'DoctrineBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ),
                'DoctrineCacheBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/doctrine/doctrine-cache-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineCacheBundle',
                ),
                'DoctrineFixturesBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/doctrine/doctrine-fixtures-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\FixturesBundle',
                ),
                'DoctrinePHPCRBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/doctrine/phpcr-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\PHPCRBundle',
                ),
                'StofDoctrineExtensionsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/stof/doctrine-extensions-bundle'),
                    'namespace' => 'Stof\\DoctrineExtensionsBundle',
                ),
                'FOSRestBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle'),
                    'namespace' => 'FOS\\RestBundle',
                ),
                'JMSSerializerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/jms/serializer-bundle/JMS/SerializerBundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ),
                'BazingaHateoasBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/willdurand/hateoas-bundle'),
                    'namespace' => 'Bazinga\\Bundle\\HateoasBundle',
                ),
                'MassiveSearchBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/massive/search-bundle'),
                    'namespace' => 'Massive\\Bundle\\SearchBundle',
                ),
                'SuluSearchBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SearchBundle'),
                    'namespace' => 'Sulu\\Bundle\\SearchBundle',
                ),
                'SuluPersistenceBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/PersistenceBundle'),
                    'namespace' => 'Sulu\\Bundle\\PersistenceBundle',
                ),
                'SuluContactBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContactBundle'),
                    'namespace' => 'Sulu\\Bundle\\ContactBundle',
                ),
                'SuluMediaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle'),
                    'namespace' => 'Sulu\\Bundle\\MediaBundle',
                ),
                'SuluSecurityBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle'),
                    'namespace' => 'Sulu\\Bundle\\SecurityBundle',
                ),
                'SuluCategoryBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CategoryBundle'),
                    'namespace' => 'Sulu\\Bundle\\CategoryBundle',
                ),
                'SuluSnippetBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle'),
                    'namespace' => 'Sulu\\Bundle\\SnippetBundle',
                ),
                'SuluContentBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle'),
                    'namespace' => 'Sulu\\Bundle\\ContentBundle',
                ),
                'SuluTagBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TagBundle'),
                    'namespace' => 'Sulu\\Bundle\\TagBundle',
                ),
                'SuluWebsiteBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsiteBundle'),
                    'namespace' => 'Sulu\\Bundle\\WebsiteBundle',
                ),
                'SuluLocationBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/LocationBundle'),
                    'namespace' => 'Sulu\\Bundle\\LocationBundle',
                ),
                'SuluHttpCacheBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/HttpCacheBundle'),
                    'namespace' => 'Sulu\\Bundle\\HttpCacheBundle',
                ),
                'SuluWebsocketBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/WebsocketBundle'),
                    'namespace' => 'Sulu\\Bundle\\WebsocketBundle',
                ),
                'SuluTranslateBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TranslateBundle'),
                    'namespace' => 'Sulu\\Bundle\\TranslateBundle',
                ),
                'SuluDocumentManagerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/DocumentManagerBundle'),
                    'namespace' => 'Sulu\\Bundle\\DocumentManagerBundle',
                ),
                'SuluHashBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/HashBundle'),
                    'namespace' => 'Sulu\\Bundle\\HashBundle',
                ),
                'SuluCustomUrlBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/CustomUrlBundle'),
                    'namespace' => 'Sulu\\Bundle\\CustomUrlBundle',
                ),
                'SuluRouteBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/RouteBundle'),
                    'namespace' => 'Sulu\\Bundle\\RouteBundle',
                ),
                'SuluMarkupBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MarkupBundle'),
                    'namespace' => 'Sulu\\Bundle\\MarkupBundle',
                ),
                'PhpcrMigrationsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/dantleech/phpcr-migrations-bundle'),
                    'namespace' => 'DTL\\Bundle\\PhpcrMigrations',
                ),
                'DubtureFFmpegBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/pulse00/ffmpeg-bundle'),
                    'namespace' => 'Dubture\\FFmpegBundle',
                ),
                'MassiveBuildBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/massive/build-bundle'),
                    'namespace' => 'Massive\\Bundle\\BuildBundle',
                ),
                'WebProfilerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle'),
                    'namespace' => 'Symfony\\Bundle\\WebProfilerBundle',
                ),
                'SensioDistributionBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sensio/distribution-bundle'),
                    'namespace' => 'Sensio\\Bundle\\DistributionBundle',
                ),
                'SensioGeneratorBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sensio/generator-bundle'),
                    'namespace' => 'Sensio\\Bundle\\GeneratorBundle',
                ),
                'WebServerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/WebServerBundle'),
                    'namespace' => 'Symfony\\Bundle\\WebServerBundle',
                ),
                'SuluTestBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/TestBundle'),
                    'namespace' => 'Sulu\\Bundle\\TestBundle',
                ),
                'DebugBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle'),
                    'namespace' => 'Symfony\\Bundle\\DebugBundle',
                ),
                'CmfRoutingBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[4].'/vendor/symfony-cmf/routing-bundle/src'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\RoutingBundle',
                ),
            ); break;
            case 'kernel.var_dir': $value = $this->targetDirs[3]; break;
            case 'session.save_path': $value = ($this->targetDirs[3].'/sessions/website/dev'); break;
            case 'router.resource': $value = ($this->targetDirs[4].'/app/config/website/routing_dev.yml'); break;
            case 'sulu.content.structure.paths': $value = array(
                'page' => array(
                    0 => array(
                        'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/DependencyInjection/../Content/templates'),
                        'type' => 'page',
                    ),
                    1 => array(
                        'path' => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SnippetBundle/DependencyInjection/../Content/templates'),
                        'type' => 'page',
                    ),
                    2 => array(
                        'path' => ($this->targetDirs[4].'/app/../vendor/sulu/sulu/src/Sulu/Bundle/CoreBundle/Content/templates'),
                        'type' => 'page',
                    ),
                    3 => array(
                        'path' => ($this->targetDirs[4].'/app/Resources/templates/pages'),
                        'type' => 'page',
                    ),
                ),
                'home' => array(
                    0 => array(
                        'path' => ($this->targetDirs[4].'/app/Resources/templates/pages'),
                        'type' => 'home',
                    ),
                ),
                'snippet' => array(
                    0 => array(
                        'path' => ($this->targetDirs[4].'/app/Resources/templates/snippets'),
                        'type' => 'snippet',
                    ),
                ),
            ); break;
            case 'sulu_core.webspace.config_dir': $value = ($this->targetDirs[4].'/app/Resources/webspaces'); break;
            case 'massive_search.adapter.zend_lucene.basepath': $value = ($this->targetDirs[3].'/indexes'); break;
            case 'sulu_media.image_format_files': $value = array(
                0 => ($this->targetDirs[4].'/app/config/image-formats.xml'),
                1 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/MediaBundle/DependencyInjection/../Resources/config/image-formats.xml'),
            ); break;
            case 'sulu_media.format_cache.path': $value = ($this->targetDirs[4].'/app/../web/uploads/media'); break;
            case 'sulu_media.media.storage.local.path': $value = ($this->targetDirs[3].'/uploads/media'); break;
            case 'sulu_security.security_types.fixture': $value = ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/SecurityBundle/DependencyInjection/../DataFixtures/security-types.xml'); break;
            case 'sulu_website.sitemap.dump_dir': $value = ($this->targetDirs[3].'/sitemaps'); break;
            case 'phpcr_migrations.paths': $value = array(
                0 => ($this->targetDirs[4].'/vendor/sulu/sulu/src/Sulu/Bundle/ContentBundle/Resources/phpcr-migrations'),
            ); break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'website',
            'kernel.cache_dir' => __DIR__,
            'kernel.bundles' => array(
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'SuluCoreBundle' => 'Sulu\\Bundle\\CoreBundle\\SuluCoreBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineCacheBundle' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\DoctrineCacheBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'DoctrinePHPCRBundle' => 'Doctrine\\Bundle\\PHPCRBundle\\DoctrinePHPCRBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'BazingaHateoasBundle' => 'Bazinga\\Bundle\\HateoasBundle\\BazingaHateoasBundle',
                'MassiveSearchBundle' => 'Massive\\Bundle\\SearchBundle\\MassiveSearchBundle',
                'SuluSearchBundle' => 'Sulu\\Bundle\\SearchBundle\\SuluSearchBundle',
                'SuluPersistenceBundle' => 'Sulu\\Bundle\\PersistenceBundle\\SuluPersistenceBundle',
                'SuluContactBundle' => 'Sulu\\Bundle\\ContactBundle\\SuluContactBundle',
                'SuluMediaBundle' => 'Sulu\\Bundle\\MediaBundle\\SuluMediaBundle',
                'SuluSecurityBundle' => 'Sulu\\Bundle\\SecurityBundle\\SuluSecurityBundle',
                'SuluCategoryBundle' => 'Sulu\\Bundle\\CategoryBundle\\SuluCategoryBundle',
                'SuluSnippetBundle' => 'Sulu\\Bundle\\SnippetBundle\\SuluSnippetBundle',
                'SuluContentBundle' => 'Sulu\\Bundle\\ContentBundle\\SuluContentBundle',
                'SuluTagBundle' => 'Sulu\\Bundle\\TagBundle\\SuluTagBundle',
                'SuluWebsiteBundle' => 'Sulu\\Bundle\\WebsiteBundle\\SuluWebsiteBundle',
                'SuluLocationBundle' => 'Sulu\\Bundle\\LocationBundle\\SuluLocationBundle',
                'SuluHttpCacheBundle' => 'Sulu\\Bundle\\HttpCacheBundle\\SuluHttpCacheBundle',
                'SuluWebsocketBundle' => 'Sulu\\Bundle\\WebsocketBundle\\SuluWebsocketBundle',
                'SuluTranslateBundle' => 'Sulu\\Bundle\\TranslateBundle\\SuluTranslateBundle',
                'SuluDocumentManagerBundle' => 'Sulu\\Bundle\\DocumentManagerBundle\\SuluDocumentManagerBundle',
                'SuluHashBundle' => 'Sulu\\Bundle\\HashBundle\\SuluHashBundle',
                'SuluCustomUrlBundle' => 'Sulu\\Bundle\\CustomUrlBundle\\SuluCustomUrlBundle',
                'SuluRouteBundle' => 'Sulu\\Bundle\\RouteBundle\\SuluRouteBundle',
                'SuluMarkupBundle' => 'Sulu\\Bundle\\MarkupBundle\\SuluMarkupBundle',
                'PhpcrMigrationsBundle' => 'DTL\\Bundle\\PhpcrMigrations\\PhpcrMigrationsBundle',
                'DubtureFFmpegBundle' => 'Dubture\\FFmpegBundle\\DubtureFFmpegBundle',
                'MassiveBuildBundle' => 'Massive\\Bundle\\BuildBundle\\MassiveBuildBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
                'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle',
                'WebServerBundle' => 'Symfony\\Bundle\\WebServerBundle\\WebServerBundle',
                'SuluTestBundle' => 'Sulu\\Bundle\\TestBundle\\SuluTestBundle',
                'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle',
                'CmfRoutingBundle' => 'Symfony\\Cmf\\Bundle\\RoutingBundle\\CmfRoutingBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'websiteDevDebugProjectContainer',
            'sulu.context' => 'website',
            'database_driver' => 'pdo_mysql',
            'database_host' => 'db',
            'database_port' => NULL,
            'database_name' => 'sulu',
            'database_user' => 'root',
            'database_password' => 'root',
            'database_version' => 5.5,
            'mailer_transport' => 'smtp',
            'mailer_host' => 'maildev',
            'mailer_user' => NULL,
            'mailer_password' => NULL,
            'secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'sulu_admin.name' => 'Sulu',
            'sulu_admin.email' => NULL,
            'websocket_port' => 9876,
            'websocket_url' => 'localhost',
            'phpcr_backend' => array(
                'type' => 'doctrinedbal',
            ),
            'phpcr_workspace' => 'default',
            'phpcr_user' => 'admin',
            'phpcr_pass' => 'admin',
            'phpcr_cache' => 'file_system',
            'locale' => 'en',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.default_locale' => 'en',
            'templating.helper.code.file_link_format' => NULL,
            'debug.file_link_format' => NULL,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => array(
                'cookie_httponly' => true,
                'gc_probability' => 1,
            ),
            'session.metadata.update_threshold' => '0',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
            ),
            'validator.mapping.cache.prefix' => '',
            'validator.mapping.cache.file' => (__DIR__.'/validation.php'),
            'validator.translation_domain' => 'validators',
            'translator.logging' => true,
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => ('file:'.__DIR__.'/profiler'),
            'debug.error_handler.throw_at' => -1,
            'debug.container.dump' => (__DIR__.'/websiteDevDebugProjectContainer.xml'),
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.options.matcher.cache_class' => 'websiteDevDebugProjectContainerUrlMatcher',
            'router.options.generator.cache_class' => 'websiteDevDebugProjectContainerUrlGenerator',
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.cache_class_prefix' => 'websiteDevDebugProjectContainer',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'twig.exception_listener.controller' => 'twig.controller.exception:showAction',
            'twig.form.resources' => array(
                0 => 'form_div_layout.html.twig',
            ),
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => array(

            ),
            'monolog.handlers_to_channels' => array(
                'monolog.handler.console_very_verbose' => array(
                    'type' => 'inclusive',
                    'elements' => array(
                        0 => 'doctrine',
                    ),
                ),
                'monolog.handler.console' => array(
                    'type' => 'exclusive',
                    'elements' => array(
                        0 => 'doctrine',
                    ),
                ),
                'monolog.handler.main' => NULL,
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => 25,
            'swiftmailer.mailer.default.transport.smtp.host' => 'maildev',
            'swiftmailer.mailer.default.transport.smtp.username' => NULL,
            'swiftmailer.mailer.default.transport.smtp.password' => NULL,
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.mailer.default.transport.smtp.local_domain' => NULL,
            'swiftmailer.spool.default.memory.path' => (__DIR__.'/swiftmailer/spool/default'),
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'sulu_core.locales' => array(
                0 => 'de',
                1 => 'en',
                2 => 'fr',
                3 => 'nl',
            ),
            'sulu_core.translated_locales' => array(
                'de' => 'Deutsch',
                'en' => 'English',
                'fr' => 'Français',
                'nl' => 'Nederlands',
            ),
            'sulu_core.translations' => array(
                0 => 'de',
                1 => 'en',
                2 => 'fr',
                3 => 'nl',
            ),
            'sulu_core.fallback_locale' => 'en',
            'sulu.cache_dir' => (__DIR__.'/sulu'),
            'sulu_core.proxy_cache_dir' => (__DIR__.'/sulu/proxies'),
            'sulu.content.language.namespace' => 'i18n',
            'sulu.content.language.default' => 'en',
            'sulu.content.node_names.base' => 'cmf',
            'sulu.content.node_names.content' => 'contents',
            'sulu.content.node_names.route' => 'routes',
            'sulu.content.node_names.snippet' => 'snippets',
            'sulu.content.type.text_line.template' => 'SuluContentBundle:Template:content-types/text_line.html.twig',
            'sulu.content.type.text_area.template' => 'SuluContentBundle:Template:content-types/text_area.html.twig',
            'sulu.content.type.text_editor.template' => 'SuluContentBundle:Template:content-types/text_editor.html.twig',
            'sulu.content.type.resource_locator.template' => 'SuluContentBundle:Template:content-types/resource_locator.html.twig',
            'sulu.content.type.block.template' => 'SuluContentBundle:Template:content-types/block.html.twig',
            'sulu.content.structure.default_types' => array(
                'snippet' => 'default',
            ),
            'sulu.content.structure.default_type.snippet' => 'default',
            'sulu.content.internal_prefix' => '',
            'sulu.content.structure.type_map' => array(
                'page' => 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge',
                'home' => 'Sulu\\Component\\Content\\Compat\\Structure\\PageBridge',
                'snippet' => 'Sulu\\Component\\Content\\Compat\\Structure\\SnippetBridge',
            ),
            'sulu.content.path_cleaner.replacer_loader.file_locator.class' => 'Symfony\\Component\\Config\\FileLocator',
            'sulu.content.path_cleaner.replacer_loader.class' => 'Sulu\\Bundle\\CoreBundle\\DataFixtures\\ReplacerXmlLoader',
            'sulu.content.path_cleaner.class' => 'Sulu\\Component\\PHPCR\\PathCleanup',
            'sulu.content.template_resolver.class' => 'Sulu\\Component\\Content\\Template\\TemplateResolver',
            'sulu.content.mapper.class' => 'Sulu\\Component\\Content\\Mapper\\ContentMapper',
            'sulu.content.structure_manager.class' => 'Sulu\\Component\\Content\\Compat\\StructureManager',
            'sulu.content.webspace_structure_provider.cache.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'sulu.content.webspace_structure_provider.class' => 'Sulu\\Component\\Webspace\\StructureProvider\\WebspaceStructureProvider',
            'sulu.content.type_manager.class' => 'Sulu\\Component\\Content\\ContentTypeManager',
            'sulu.content.type.text_line.class' => 'Sulu\\Component\\Content\\Types\\TextLine',
            'sulu.content.type.text_area.class' => 'Sulu\\Component\\Content\\Types\\TextArea',
            'sulu.content.type.text_editor.class' => 'Sulu\\Component\\Content\\Types\\TextEditor',
            'sulu.content.type.resource_locator.class' => 'Sulu\\Component\\Content\\Types\\ResourceLocator',
            'sulu.content.type.block.class' => 'Sulu\\Component\\Content\\Types\\BlockContentType',
            'sulu.content.resource_locator.mapper.phpcr.class' => 'Sulu\\Component\\Content\\Types\\ResourceLocator\\Mapper\\PhpcrMapper',
            'sulu.content.query_executor.class' => 'Sulu\\Component\\Content\\Query\\ContentQueryExecutor',
            'sulu.cache.warmer.structure.class' => 'Sulu\\Bundle\\CoreBundle\\Cache\\StructureWarmer',
            'sulu.util.node_helper.class' => 'Sulu\\Component\\Util\\SuluNodeHelper',
            'sulu_core.webspace.webspace_manager.class' => 'Sulu\\Component\\Webspace\\Manager\\WebspaceManager',
            'sulu_core.webspace.cache_class' => 'websiteWebspaceCollectionCache',
            'sulu_core.webspace.base_class' => 'WebspaceCollection',
            'sulu_core.webspace.document_manager.webspace_initializer.class' => 'Sulu\\Component\\Webspace\\Document\\Initializer\\WebspaceInitializer',
            'sulu_core.cache.memoize.default_lifetime' => 1,
            'sulu_core.cache.memoize.cache.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'sulu_core.cache.memoize.class' => 'Sulu\\Component\\Cache\\Memoize',
            'sulu.fields_defaults.translations' => array(
                'id' => 'public.id',
                'title' => 'public.title',
                'name' => 'public.name',
                'created' => 'public.created',
                'changed' => 'public.changed',
            ),
            'sulu.fields_defaults.widths' => array(
                'id' => '50px',
            ),
            'sulu_core.list_builder.metadata.provider.general.cache_dir' => (__DIR__.'/sulu/list-builder/general'),
            'sulu_core.list_builder.metadata.provider.doctrine.cache_dir' => (__DIR__.'/sulu/list-builder/doctrine'),
            'sulu.phpcr.session.class' => 'Sulu\\Component\\PHPCR\\SessionManager\\SessionManager',
            'sulu_core.rest_helper.class' => 'Sulu\\Component\\Rest\\RestHelper',
            'sulu_core.doctrine_rest_helper.class' => 'Sulu\\Component\\Rest\\DoctrineRestHelper',
            'sulu_core.list_rest_helper.class' => 'Sulu\\Component\\Rest\\ListBuilder\\ListRestHelper',
            'sulu_core.doctrine_list_builder_factory.class' => 'Sulu\\Component\\Rest\\ListBuilder\\Doctrine\\DoctrineListBuilderFactory',
            'sulu_core.rest.datetime_handler.class' => 'Sulu\\Component\\Rest\\Handler\\DateHandler',
            'sulu_core.build.builder.database.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\DatabaseBuilder',
            'sulu_core.build.builder.phpcr.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\PhpcrBuilder',
            'sulu_core.build.builder.phpcr_migrations.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\PhpcrMigrationsBuilder',
            'sulu_core.build.builder.fixtures.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\FixturesBuilder',
            'sulu_core.build.builder.cache.class' => 'Sulu\\Bundle\\CoreBundle\\Build\\CacheBuilder',
            'sulu.core.localization_manager.class' => 'Sulu\\Component\\Localization\\Manager\\LocalizationManager',
            'sulu.core.localization_manager.core_provider.class' => 'Sulu\\Component\\Localization\\Provider\\LocalizationProvider',
            'sulu_core.array_serialization_visitor.class' => 'Sulu\\Component\\Serializer\\ArraySerializationVisitor',
            'doctrine_cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.apcu.class' => 'Doctrine\\Common\\Cache\\ApcuCache',
            'doctrine_cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' => 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' => 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' => 'Couchbase',
            'doctrine_cache.couchbase.hostnames' => 'localhost:8091',
            'doctrine_cache.file_system.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' => 'Memcache',
            'doctrine_cache.memcache.host' => 'localhost',
            'doctrine_cache.memcache.port' => 11211,
            'doctrine_cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' => 'Memcached',
            'doctrine_cache.memcached.host' => 'localhost',
            'doctrine_cache.memcached.port' => 11211,
            'doctrine_cache.mongodb.class' => 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' => 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' => 'MongoClient',
            'doctrine_cache.mongodb.server' => 'localhost:27017',
            'doctrine_cache.predis.client.class' => 'Predis\\Client',
            'doctrine_cache.predis.scheme' => 'tcp',
            'doctrine_cache.predis.host' => 'localhost',
            'doctrine_cache.predis.port' => 6379,
            'doctrine_cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' => 'Redis',
            'doctrine_cache.redis.host' => 'localhost',
            'doctrine_cache.redis.port' => 6379,
            'doctrine_cache.riak.class' => 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' => 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' => 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' => 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' => 'localhost',
            'doctrine_cache.riak.port' => 8087,
            'doctrine_cache.sqlite3.class' => 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' => 'SQLite3',
            'doctrine_cache.void.class' => 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(

            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerAwareEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.proxy_dir' => (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'doctrine_phpcr.credentials.class' => 'PHPCR\\SimpleCredentials',
            'doctrine_phpcr.class' => 'Doctrine\\Bundle\\PHPCRBundle\\ManagerRegistry',
            'doctrine_phpcr.proxy.class' => 'Doctrine\\Common\\Proxy\\Proxy',
            'doctrine_phpcr.sessions' => array(
                'default' => 'doctrine_phpcr.default_session',
                'live' => 'doctrine_phpcr.live_session',
            ),
            'doctrine_phpcr.odm.document_managers' => array(

            ),
            'doctrine_phpcr.default_session' => 'live',
            'doctrine_phpcr.odm.default_document_manager' => '',
            'doctrine_phpcr.console_dumper.class' => 'PHPCR\\Util\\Console\\Helper\\PhpcrConsoleDumperHelper',
            'doctrine_phpcr.initializer_manager.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Initializer\\InitializerManager',
            'doctrine_phpcr.form.type.phpcr_reference.class' => 'Doctrine\\Bundle\\PHPCRBundle\\Form\\Type\\PHPCRReferenceType',
            'doctrine_phpcr.logger.chain.class' => 'Jackalope\\Transport\\Logging\\LoggerChain',
            'doctrine_phpcr.logger.class' => 'Jackalope\\Transport\\Logging\\Psr3Logger',
            'doctrine_phpcr.logger.profiling.class' => 'Jackalope\\Transport\\Logging\\DebugStack',
            'doctrine_phpcr.logger.stop_watch.class' => 'Doctrine\\Bundle\\PHPCRBundle\\DataCollector\\StopWatchLogger',
            'doctrine_phpcr.data_collector.class' => 'Doctrine\\Bundle\\PHPCRBundle\\DataCollector\\PHPCRDataCollector',
            'doctrine_phpcr.session.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine_phpcr.dump_max_line_length' => 120,
            'doctrine_phpcr.jackalope_doctrine_dbal.schema_listener.class' => 'Doctrine\\Bundle\\PHPCRBundle\\EventListener\\JackalopeDoctrineDbalSchemaListener',
            'doctrine_phpcr.jackalope_doctrine_dbal.repository_schema.class' => 'Jackalope\\Transport\\DoctrineDBAL\\RepositorySchema',
            'doctrine_phpcr.form.type_guess' => array(

            ),
            'stof_doctrine_extensions.event_listener.locale.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LocaleListener',
            'stof_doctrine_extensions.event_listener.logger.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LoggerListener',
            'stof_doctrine_extensions.event_listener.blame.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\BlameListener',
            'stof_doctrine_extensions.uploadable.manager.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadableManager',
            'stof_doctrine_extensions.uploadable.mime_type_guesser.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\MimeTypeGuesserAdapter',
            'stof_doctrine_extensions.uploadable.default_file_info.class' => 'Stof\\DoctrineExtensionsBundle\\Uploadable\\UploadedFileInfo',
            'stof_doctrine_extensions.default_locale' => 'en',
            'stof_doctrine_extensions.default_file_path' => NULL,
            'stof_doctrine_extensions.translation_fallback' => false,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.uploadable.validate_writable_directory' => true,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'fos_rest.serializer.exclusion_strategy.version' => '',
            'fos_rest.serializer.exclusion_strategy.groups' => '',
            'fos_rest.view_handler.jsonp.callback_param' => '',
            'fos_rest.view.exception_wrapper_handler' => 'FOS\\RestBundle\\View\\ExceptionWrapperHandler',
            'fos_rest.view_handler.default.class' => 'FOS\\RestBundle\\View\\ViewHandler',
            'fos_rest.view_handler.jsonp.class' => 'FOS\\RestBundle\\View\\JsonpHandler',
            'fos_rest.serializer.exception_wrapper_serialize_handler.class' => 'FOS\\RestBundle\\Serializer\\ExceptionWrapperSerializeHandler',
            'fos_rest.routing.loader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader',
            'fos_rest.routing.loader.yaml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestYamlCollectionLoader',
            'fos_rest.routing.loader.xml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestXmlCollectionLoader',
            'fos_rest.routing.loader.processor.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteProcessor',
            'fos_rest.routing.loader.reader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestControllerReader',
            'fos_rest.routing.loader.reader.action.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestActionReader',
            'fos_rest.format_negotiator.class' => 'FOS\\RestBundle\\Util\\FormatNegotiator',
            'fos_rest.inflector.class' => 'FOS\\RestBundle\\Util\\Inflector\\DoctrineInflector',
            'fos_rest.request_matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'fos_rest.violation_formatter.class' => 'FOS\\RestBundle\\Util\\ViolationFormatter',
            'fos_rest.request.param_fetcher.class' => 'FOS\\RestBundle\\Request\\ParamFetcher',
            'fos_rest.request.param_fetcher.reader.class' => 'FOS\\RestBundle\\Request\\ParamReader',
            'fos_rest.cache_dir' => (__DIR__.'/fos_rest'),
            'fos_rest.routing.loader.default_format' => 'json',
            'fos_rest.routing.loader.include_format' => true,
            'fos_rest.serializer.serialize_null' => false,
            'fos_rest.exception.codes' => array(
                'Sulu\\Component\\DocumentManager\\Exception\\DocumentNotFoundException' => 404,
                'Sulu\\Component\\CustomUrl\\Manager\\TitleAlreadyExistsException' => 400,
                'Sulu\\Component\\CustomUrl\\Generator\\MissingDomainPartException' => 400,
                'Sulu\\Component\\CustomUrl\\Manager\\RouteNotRemovableException' => 420,
                'Sulu\\Component\\DocumentManager\\Exception\\VersionNotFoundException' => 404,
                'Sulu\\Component\\Content\\Exception\\MandatoryPropertyException' => 400,
                'Sulu\\Component\\Content\\Exception\\ResourceLocatorAlreadyExistsException' => 409,
                'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryIdNotFoundException' => 404,
                'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryKeyNotFoundException' => 404,
                'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryKeyNotUniqueException' => 409,
                'Sulu\\Bundle\\CategoryBundle\\Exception\\CategoryNameMissingException' => 400,
                'Sulu\\Bundle\\CategoryBundle\\Exception\\KeywordIsMultipleReferencedException' => 409,
                'Sulu\\Bundle\\CategoryBundle\\Exception\\KeywordNotUniqueException' => 409,
                'Sulu\\Bundle\\SecurityBundle\\Exception\\RoleNameAlreadyExistsException' => 409,
                'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\MediaNotFoundException' => 404,
                'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\FileVersionNotFoundException' => 404,
                'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\FormatNotFoundException' => 404,
                'Sulu\\Bundle\\MediaBundle\\Media\\Exception\\FormatOptionsMissingParameterException' => 400,
                'Sulu\\Component\\Rest\\Exception\\MissingParameterException' => 400,
                'Sulu\\Component\\Rest\\Exception\\InvalidHashException' => 409,
                'Sulu\\Component\\Rest\\Csv\\ObjectNotSupportedException' => 406,
            ),
            'fos_rest.exception.messages' => array(

            ),
            'fos_rest.converter.request_body.validation_errors_argument' => 'validationErrors',
            'fos_rest.mime_types' => array(

            ),
            'fos_rest.formats' => array(
                'json' => false,
                'csv' => false,
                'html' => true,
            ),
            'fos_rest.force_redirects' => array(
                'html' => 302,
            ),
            'fos_rest.failed_validation' => 400,
            'fos_rest.empty_content' => 204,
            'fos_rest.serialize_null' => false,
            'fos_rest.default_engine' => 'twig',
            'fos_rest.normalizer.camel_keys.class' => 'FOS\\RestBundle\\Normalizer\\CamelKeysNormalizer',
            'fos_rest.decoder.json.class' => 'FOS\\RestBundle\\Decoder\\JsonDecoder',
            'fos_rest.decoder.jsontoform.class' => 'FOS\\RestBundle\\Decoder\\JsonToFormDecoder',
            'fos_rest.decoder.xml.class' => 'FOS\\RestBundle\\Decoder\\XmlDecoder',
            'fos_rest.decoder_provider.class' => 'FOS\\RestBundle\\Decoder\\ContainerDecoderProvider',
            'fos_rest.body_listener.class' => 'FOS\\RestBundle\\EventListener\\BodyListener',
            'fos_rest.throw_exception_on_unsupported_content_type' => false,
            'fos_rest.body_default_format' => NULL,
            'fos_rest.decoders' => array(
                'json' => 'fos_rest.decoder.json',
                'xml' => 'fos_rest.decoder.xml',
            ),
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.identical_property_naming_strategy.class' => 'JMS\\Serializer\\Naming\\IdenticalPropertyNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.twig_runtime_extension.class' => 'JMS\\Serializer\\Twig\\SerializerRuntimeExtension',
            'jms_serializer.twig_runtime_extension_helper.class' => 'JMS\\Serializer\\Twig\\SerializerRuntimeHelper',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.xml_serialization_visitor.format_output' => true,
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'JMS\\Serializer\\Handler\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.configured_context_factory.class' => 'JMS\\SerializerBundle\\ContextFactory\\ConfiguredContextFactory',
            'jms_serializer.expression_evaluator.class' => 'JMS\\Serializer\\Expression\\ExpressionEvaluator',
            'jms_serializer.expression_language.class' => 'Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage',
            'jms_serializer.expression_language.function_provider.class' => 'JMS\\SerializerBundle\\ExpressionLanguage\\BasicSerializerFunctionsProvider',
            'jms_serializer.accessor_strategy.default.class' => 'JMS\\Serializer\\Accessor\\DefaultAccessorStrategy',
            'jms_serializer.accessor_strategy.expression.class' => 'JMS\\Serializer\\Accessor\\ExpressionAccessorStrategy',
            'hateoas.link_factory.class' => 'Hateoas\\Factory\\LinkFactory',
            'hateoas.links_factory.class' => 'Hateoas\\Factory\\LinksFactory',
            'hateoas.embeds_factory.class' => 'Hateoas\\Factory\\EmbeddedsFactory',
            'hateoas.expression.evaluator.class' => 'Bazinga\\Bundle\\HateoasBundle\\Hateoas\\Expression\\LazyFunctionExpressionEvaluator',
            'bazinga_hateoas.expression_language.class' => 'Bazinga\\Bundle\\HateoasBundle\\ExpressionLanguage\\ExpressionLanguage',
            'hateoas.expression.link.class' => 'Hateoas\\Expression\\LinkExpressionFunction',
            'hateoas.serializer.xml.class' => 'Hateoas\\Serializer\\XmlSerializer',
            'hateoas.serializer.json_hal.class' => 'Hateoas\\Serializer\\JsonHalSerializer',
            'hateoas.serializer.exclusion_manager.class' => 'Hateoas\\Serializer\\ExclusionManager',
            'hateoas.event_subscriber.xml.class' => 'Hateoas\\Serializer\\EventSubscriber\\XmlEventSubscriber',
            'hateoas.event_subscriber.json.class' => 'Hateoas\\Serializer\\EventSubscriber\\JsonEventSubscriber',
            'hateoas.inline_deferrer.embeds.class' => 'Hateoas\\Serializer\\Metadata\\InlineDeferrer',
            'hateoas.inline_deferrer.links.class' => 'Hateoas\\Serializer\\Metadata\\InlineDeferrer',
            'hateoas.configuration.provider.resolver.chain.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\ChainResolver',
            'hateoas.configuration.provider.resolver.method.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\MethodResolver',
            'hateoas.configuration.provider.resolver.static_method.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\StaticMethodResolver',
            'hateoas.configuration.provider.resolver.symfony_container.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\SymfonyContainerResolver',
            'hateoas.configuration.relation_provider.class' => 'Hateoas\\Configuration\\Provider\\RelationProvider',
            'hateoas.configuration.relations_repository.class' => 'Hateoas\\Configuration\\RelationsRepository',
            'hateoas.configuration.metadata.yaml_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\YamlDriver',
            'hateoas.configuration.metadata.xml_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\XmlDriver',
            'hateoas.configuration.metadata.annotation_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\AnnotationDriver',
            'hateoas.configuration.metadata.extension_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\ExtensionDriver',
            'hateoas.generator.registry.class' => 'Hateoas\\UrlGenerator\\UrlGeneratorRegistry',
            'hateoas.generator.symfony.class' => 'Hateoas\\UrlGenerator\\SymfonyUrlGenerator',
            'hateoas.helper.link.class' => 'Hateoas\\Helper\\LinkHelper',
            'hateoas.twig.link.class' => 'Hateoas\\Twig\\Extension\\LinkExtension',
            'massive_search.search_manager.class' => 'Massive\\Bundle\\SearchBundle\\Search\\SearchManager',
            'massive_search.object_to_document_converter.class' => 'Massive\\Bundle\\SearchBundle\\Search\\ObjectToDocumentConverter',
            'massive_search.expression_language.class' => 'Massive\\Bundle\\SearchBundle\\Search\\ExpressionLanguage\\MassiveSearchExpressionLanguage',
            'massive_search.search.adapter.zend_lucene.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Adapter\\ZendLuceneAdapter',
            'massive_search.search.adapter.test.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Adapter\\TestAdapter',
            'massive_search.factory_default.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Factory',
            'massive_search.controller.rest.class' => 'Massive\\Bundle\\SearchBundle\\Controller\\SearchController',
            'massive_search.events.index' => 'massive_search.index',
            'massive_search.events.deindex' => 'massive_search.deindex',
            'massive_search.adapter.zend_lucene.hide_index_exception' => false,
            'massive_search.adapter.zend_lucene.encoding' => 'UTF-8',
            'massive_search.metadata.prefix' => 'massive',
            'massive_search.metadata.cache_dir' => (__DIR__.'/massive-search'),
            'massive_search.metadata.debug' => true,
            'massive_search.metadata.driver.xml.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\Driver\\XmlDriver',
            'massive_search.metadata.driver.annotation.class' => 'Symfony\\Cmf\\Bundle\\TreeUiBundle\\Tree\\Metadata\\Driver\\AnnotationDriver',
            'massive_search.metadata.driver.chain.class' => 'Metadata\\Driver\\DriverChain',
            'massive_search.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'massive_search.metadata.factory.class' => 'Metadata\\MetadataFactory',
            'massive_search.metadata.field_evaluator.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\FieldEvaluator',
            'massive_search.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'massive_search.metadata.provider.default.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\Provider\\DefaultProvider',
            'massive_search.metadata.provider.chain.class' => 'Massive\\Bundle\\SearchBundle\\Search\\Metadata\\Provider\\ChainProvider',
            'sulu_search.indexes' => array(
                'snippet' => array(
                    'security_context' => 'sulu.global.snippets',
                    'contexts' => array(

                    ),
                ),
                'media' => array(
                    'security_context' => 'sulu.media.collections',
                    'contexts' => array(

                    ),
                ),
                'contact' => array(
                    'security_context' => 'sulu.contact.people',
                    'contexts' => array(

                    ),
                ),
                'account' => array(
                    'security_context' => 'sulu.contact.organizations',
                    'contexts' => array(

                    ),
                ),
                'page_example' => array(
                    'security_context' => 'sulu.webspaces.example',
                    'name' => 'example.com',
                ),
                'page_example_published' => array(
                    'security_context' => 'sulu.webspaces.example',
                    'name' => 'example.com',
                    'contexts' => array(
                        0 => 'website',
                    ),
                ),
            ),
            'sulu_search.controller.search.class' => 'Sulu\\Bundle\\SearchBundle\\Controller\\SearchController',
            'sulu_search.search.factory.class' => 'Sulu\\Bundle\\SearchBundle\\Search\\Factory',
            'sulu_search.admin.class' => 'Sulu\\Bundle\\SearchBundle\\Admin\\SuluSearchAdmin',
            'sulu_search.build.index.class' => 'Sulu\\Bundle\\SearchBundle\\Build\\IndexBuilder',
            'sulu.persistence.event_subscriber.orm.timestampable.class' => 'Sulu\\Component\\Persistence\\EventSubscriber\\ORM\\TimestampableSubscriber',
            'sulu.persistence.event_subscriber.orm.user_blame.class' => 'Sulu\\Component\\Persistence\\EventSubscriber\\ORM\\UserBlameSubscriber',
            'sulu.persistence.event_subscriber.orm.metadata.class' => 'Sulu\\Component\\Persistence\\EventSubscriber\\ORM\\MetadataSubscriber',
            'sulu_contact.admin.class' => 'Sulu\\Bundle\\ContactBundle\\Admin\\ContactAdmin',
            'sulu_contact.contact_content_navigation_provider.class' => 'Sulu\\Bundle\\ContactBundle\\Admin\\ContactContentNavigationProvider',
            'sulu_contact.account_content_navigation_provider.class' => 'Sulu\\Bundle\\ContactBundle\\Admin\\AccountContentNavigationProvider',
            'sulu_contact.account_listener.class' => 'Sulu\\Bundle\\ContactBundle\\EventListener\\AccountListener',
            'sulu_contact.contact_manager.class' => 'Sulu\\Bundle\\ContactBundle\\Contact\\ContactManager',
            'sulu_contact.account_manager.class' => 'Sulu\\Bundle\\ContactBundle\\Contact\\AccountManager',
            'sulu_contact.customer_manager.class' => 'Sulu\\Bundle\\ContactBundle\\Contact\\CustomerManager',
            'sulu_contact.twig.class' => 'Sulu\\Bundle\\ContactBundle\\Twig\\ContactTwigExtension',
            'sulu_contact.twig.cache.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'sulu_contact.account.entity' => 'SuluContactBundle:Account',
            'sulu_contact.country.entity' => 'SuluContactBundle:Country',
            'sulu_contact.account_repository.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\AccountRepository',
            'sulu_contact.contact_repository.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactRepository',
            'sulu_contact.account_factory.class' => 'Sulu\\Bundle\\ContactBundle\\Contact\\AccountFactory',
            'sulu_contact.contact.entity' => 'SuluContactBundle:Contact',
            'sulu_contact.contact_title.entity' => 'SuluContactBundle:ContactTitle',
            'sulu_contact.contact_title_repository.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactTitleRepository',
            'sulu_contact.smart_content.data_provider.contact.class' => 'Sulu\\Component\\Contact\\SmartContent\\ContactDataProvider',
            'sulu_contact.smart_content.data_provider.account.class' => 'Sulu\\Component\\Contact\\SmartContent\\AccountDataProvider',
            'sulu_contact.util.index_comparator.class' => 'Sulu\\Bundle\\ContactBundle\\Util\\IndexComparator',
            'sulu_contact.util.id_converter.class' => 'Sulu\\Bundle\\ContactBundle\\Util\\CustomerIdConverter',
            'sulu_contact.content.contact.class' => 'Sulu\\Bundle\\ContactBundle\\Content\\Types\\ContactSelectionContentType',
            'sulu_contact.defaults' => array(
                'phoneType' => '1',
                'phoneTypeMobile' => '3',
                'phoneTypeIsdn' => '1',
                'emailType' => '1',
                'addressType' => '1',
                'urlType' => '1',
                'faxType' => '1',
                'socialMediaProfileType' => '1',
                'country' => 'AT',
            ),
            'sulu_contact.form_of_address' => array(
                'male' => array(
                    'id' => 0,
                    'name' => 'male',
                    'translation' => 'contact.contacts.formOfAddress.male',
                ),
                'female' => array(
                    'id' => 1,
                    'name' => 'female',
                    'translation' => 'contact.contacts.formOfAddress.female',
                ),
            ),
            'sulu_contact.contact_form.category_root' => NULL,
            'sulu_contact.account_form.category_root' => NULL,
            'sulu_contact.content-type.contact.template' => 'SuluContactBundle:Template:content-types/contact-selection.html.twig',
            'sulu.model.contact.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Contact',
            'sulu.repository.contact.class' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactRepository',
            'sulu.persistence.objects' => array(
                'sulu' => array(
                    'route' => array(
                        'model' => 'Sulu\\Bundle\\RouteBundle\\Entity\\Route',
                        'repository' => 'Sulu\\Bundle\\RouteBundle\\Entity\\RouteRepository',
                    ),
                    'tag' => array(
                        'model' => 'Sulu\\Bundle\\TagBundle\\Entity\\Tag',
                        'repository' => 'Sulu\\Bundle\\TagBundle\\Entity\\TagRepository',
                    ),
                    'category' => array(
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryRepository',
                    ),
                    'category_meta' => array(
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMeta',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMetaRepository',
                    ),
                    'category_translation' => array(
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslation',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslationRepository',
                    ),
                    'keyword' => array(
                        'model' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword',
                        'repository' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\KeywordRepository',
                    ),
                    'user' => array(
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\User',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserRepository',
                    ),
                    'role' => array(
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\Role',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleRepository',
                    ),
                    'role_setting' => array(
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSetting',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSettingRepository',
                    ),
                    'access_control' => array(
                        'model' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl',
                        'repository' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControlRepository',
                    ),
                    'media' => array(
                        'model' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Media',
                        'repository' => 'Sulu\\Bundle\\MediaBundle\\Entity\\MediaRepository',
                    ),
                    'contact' => array(
                        'model' => 'Sulu\\Bundle\\ContactBundle\\Entity\\Contact',
                        'repository' => 'Sulu\\Bundle\\ContactBundle\\Entity\\ContactRepository',
                    ),
                ),
            ),
            'sulu_media.system_collections' => array(
                'sulu_media' => array(
                    'meta_title' => array(
                        'en' => 'Sulu media',
                        'de' => 'Sulu Medien',
                    ),
                    'collections' => array(
                        'preview_image' => array(
                            'meta_title' => array(
                                'en' => 'Preview images',
                                'de' => 'Vorschaubilder',
                            ),
                        ),
                    ),
                ),
                'sulu_contact' => array(
                    'meta_title' => array(
                        'en' => 'Sulu contacts',
                        'de' => 'Sulu Kontakte',
                    ),
                    'collections' => array(
                        'contact' => array(
                            'meta_title' => array(
                                'en' => 'People',
                                'de' => 'Personen',
                            ),
                        ),
                        'account' => array(
                            'meta_title' => array(
                                'en' => 'Organizations',
                                'de' => 'Organisationen',
                            ),
                        ),
                    ),
                ),
            ),
            'sulu_media.format_cache.media_proxy_path' => '/uploads/media/{slug}',
            'sulu_media.media_manager.media_download_path' => '/media/{id}/download/{slug}',
            'sulu_media.format_manager.response_headers' => array(
                'Expires' => '+1 month',
                'Pragma' => 'public',
                'Cache-Control' => 'public',
            ),
            'sulu_media.format_manager.default_imagine_options' => array(

            ),
            'sulu_media.format_manager.mime_types' => array(
                0 => 'image/*',
                1 => 'video/*',
                2 => 'application/pdf',
            ),
            'sulu_media.format_cache.save_image' => true,
            'sulu_media.format_cache.segments' => 10,
            'sulu_media.ghost_script.path' => 'gs',
            'sulu_media.media.max_file_size' => '16MB',
            'sulu_media.media.blocked_file_types' => array(
                0 => 'file/exe',
            ),
            'sulu_media.media.storage.local.segments' => 10,
            'sulu_media.collection.type.default' => array(
                'id' => 1,
            ),
            'sulu_media.collection.previews.format' => 'sulu-50x50',
            'sulu_media.media.types' => array(
                0 => array(
                    'type' => 'document',
                    'mimeTypes' => array(
                        0 => '*',
                    ),
                ),
                1 => array(
                    'type' => 'image',
                    'mimeTypes' => array(
                        0 => 'image/*',
                    ),
                ),
                2 => array(
                    'type' => 'video',
                    'mimeTypes' => array(
                        0 => 'video/*',
                    ),
                ),
                3 => array(
                    'type' => 'audio',
                    'mimeTypes' => array(
                        0 => 'audio/*',
                    ),
                ),
            ),
            'sulu_media.search.default_image_format' => 'sulu-170x170',
            'sulu_media.disposition_type.default' => 'attachment',
            'sulu_media.disposition_type.mime_types_inline' => array(

            ),
            'sulu_media.disposition_type.mime_types_attachment' => array(

            ),
            'sulu_media.upload.max_filesize' => 256,
            'sulu_media.adobe_creative_key' => NULL,
            'sulu_media.admin.class' => 'Sulu\\Bundle\\MediaBundle\\Admin\\MediaAdmin',
            'sulu_media.media_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\Manager\\MediaManager',
            'sulu_media.admin.content_navigation_provider.class' => 'Sulu\\Bundle\\MediaBundle\\Admin\\MediaContentNavigationProvider',
            'sulu_media.collection_repository.class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\CollectionRepository',
            'sulu_media.storage.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\Storage\\LocalStorage',
            'sulu_media.file_validator.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FileValidator\\FileValidator',
            'sulu_media.format_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatManager\\FormatManager',
            'sulu_media.format_cache_clearer.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatCache\\FormatCacheClearer',
            'sulu_media.format_cache.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatCache\\LocalFormatCache',
            'sulu_media.image.converter.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\ImagineImageConverter',
            'sulu_media.image.scaler.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\Scaler\\Scaler',
            'sulu_media.image.cropper.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\Cropper\\Cropper',
            'sulu_media.image.transformation_pool.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\TransformationPool',
            'sulu_media.image.transformation.crop.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\ImageConverter\\Transformation\\CropTransformation',
            'sulu_media.media_selection.class' => 'Sulu\\Bundle\\MediaBundle\\Content\\Types\\MediaSelectionContentType',
            'sulu_media.media_selection.template' => 'SuluMediaBundle:Template:content-types/media-selection.html.twig',
            'sulu_media.collection_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Collection\\Manager\\CollectionManager',
            'sulu_media.type_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\TypeManager\\TypeManager',
            'sulu_media.format_options_manager.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\FormatOptions\\FormatOptionsManager',
            'sulu_media.collection_entity' => 'SuluMediaBundle:Collection',
            'sulu_media.format_options_entity' => 'SuluMediaBundle:FormatOptions',
            'sulu_media.entity.file_version_meta' => 'SuluMediaBundle:FileVersionMeta',
            'sulu_media.twig_extension.disposition_type.class' => 'Sulu\\Bundle\\MediaBundle\\Twig\\DispositionTypeTwigExtension',
            'sulu_media.twig_extension.media.class' => 'Sulu\\Bundle\\MediaBundle\\Twig\\MediaTwigExtension',
            'tmp' => 'Sulu\\Bundle\\MediaBundle\\Twig\\MediaTwigExtension',
            'sulu_media.video_thumbnail_generator.class' => 'Sulu\\Bundle\\MediaBundle\\Media\\Video\\VideoThumbnailService',
            'sulu_media.search.subscriber.structure_media.class' => 'Sulu\\Bundle\\MediaBundle\\Search\\Subscriber\\StructureMediaSearchSubscriber',
            'sulu_media.search.subscriber.media.class' => 'Sulu\\Bundle\\MediaBundle\\Search\\Subscriber\\MediaSearchSubscriber',
            'sulu.model.media.class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\Media',
            'sulu.repository.media.class' => 'Sulu\\Bundle\\MediaBundle\\Entity\\MediaRepository',
            'sulu_security.system' => 'Sulu',
            'sulu_security.reset_password.mail.token_send_limit' => 3,
            'sulu_security.reset_password.mail.sender' => '',
            'sulu_security.reset_password.mail.subject' => 'security.reset.mail-subject',
            'sulu_security.reset_password.mail.template' => 'SuluSecurityBundle:mail_templates:reset_password.html.twig',
            'sulu_security.reset_password.mail.translation_domain' => 'backend',
            'sulu_security.permissions' => array(
                'view' => 64,
                'add' => 32,
                'edit' => 16,
                'delete' => 8,
                'archive' => 4,
                'live' => 2,
                'security' => 1,
            ),
            'permissions' => array(
                'view' => 64,
                'add' => 32,
                'edit' => 16,
                'delete' => 8,
                'archive' => 4,
                'live' => 2,
                'security' => 1,
            ),
            'sulu_security.admin.class' => 'Sulu\\Bundle\\SecurityBundle\\Admin\\SecurityAdmin',
            'sulu_security.authentication_entry_point.class' => 'Sulu\\Bundle\\SecurityBundle\\Security\\AuthenticationEntryPoint',
            'sulu_security.authentication_handler.class' => 'Sulu\\Bundle\\SecurityBundle\\Security\\AuthenticationHandler',
            'sulu_security.mask_converter.class' => 'Sulu\\Component\\Security\\Authorization\\MaskConverter',
            'sulu_security.salt_generator.class' => 'Sulu\\Component\\Security\\Authentication\\SaltGenerator',
            'sulu_security.token_generator.class' => 'Sulu\\Bundle\\SecurityBundle\\Util\\TokenGenerator',
            'sulu_security.contacts_content_navigation_provider.class' => 'Sulu\\Bundle\\SecurityBundle\\Admin\\ContactsContentNavigationProvider',
            'sulu_security.roles_content_navigation_provider.class' => 'Sulu\\Bundle\\SecurityBundle\\Admin\\RolesContentNavigationProvider',
            'sulu_security.security_context_voter.class' => 'Sulu\\Component\\Security\\Authorization\\SecurityContextVoter',
            'sulu_security.access_control_manager.class' => 'Sulu\\Component\\Security\\Authorization\\AccessControl\\AccessControlManager',
            'sulu_security.phpcr_access_control_provider.class' => 'Sulu\\Component\\Security\\Authorization\\AccessControl\\PhpcrAccessControlProvider',
            'sulu_security.doctrine_access_control_provider.class' => 'Sulu\\Component\\Security\\Authorization\\AccessControl\\DoctrineAccessControlProvider',
            'sulu_security.permission_controller.class' => 'Sulu\\Bundle\\SecurityBundle\\Controller\\PermissionController',
            'sulu_security.group_repository.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\GroupRepository',
            'sulu_security.user_repository.class' => 'Sulu\\Component\\Security\\Authentication\\UserRepository',
            'sulu_security.user_setting_repository.class' => 'Sulu\\Component\\Security\\Authentication\\UserSettingRepository',
            'sulu_security.user_repository_factory.class' => 'Sulu\\Component\\Security\\Authentication\\UserRepositoryFactory',
            'sulu_security.build.user.class' => 'Sulu\\Bundle\\SecurityBundle\\Build\\UserBuilder',
            'sulu_security.entity.role' => 'SuluSecurityBundle:Role',
            'sulu_security.entity.group' => 'SuluSecurityBundle:Group',
            'sulu_security.entity.user_setting' => 'SuluSecurityBundle:UserSetting',
            'sulu_security.profile_controller.class' => 'Sulu\\Bundle\\SecurityBundle\\Controller\\ProfileController',
            'sulu.model.user.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\User',
            'sulu.repository.user.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\UserRepository',
            'sulu.model.role.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\Role',
            'sulu.repository.role.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleRepository',
            'sulu.model.role_setting.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSetting',
            'sulu.repository.role_setting.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\RoleSettingRepository',
            'sulu.model.access_control.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl',
            'sulu.repository.access_control.class' => 'Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControlRepository',
            'sulu_category.content.type.category_list.template' => 'SuluCategoryBundle:Template:content-types/category_list.html.twig',
            'sulu_category.admin.class' => 'Sulu\\Bundle\\CategoryBundle\\Admin\\CategoryAdmin',
            'sulu_category.category_manager.class' => 'Sulu\\Bundle\\CategoryBundle\\Category\\CategoryManager',
            'sulu_category.content_navigation_provider.class' => 'Sulu\\Bundle\\CategoryBundle\\Admin\\CategoryContentNavigationProvider',
            'sulu_category.content.type.category_list.class' => 'Sulu\\Bundle\\CategoryBundle\\Content\\Types\\CategoryList',
            'sulu_category.category_request_handler.class' => 'Sulu\\Component\\Category\\Request\\CategoryRequestHandler',
            'sulu_category.twig_extension.class' => 'Sulu\\Bundle\\CategoryBundle\\Twig\\CategoryTwigExtension',
            'sulu.model.category.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category',
            'sulu.repository.category.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryRepository',
            'sulu.model.category_meta.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMeta',
            'sulu.repository.category_meta.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryMetaRepository',
            'sulu.model.category_translation.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslation',
            'sulu.repository.category_translation.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\CategoryTranslationRepository',
            'sulu.model.keyword.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword',
            'sulu.repository.keyword.class' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\KeywordRepository',
            'sulu_snippet.content-type.template' => 'SuluSnippetBundle:Template:content-types/snippet.html.twig',
            'sulu_snippet.content-type.default_enabled' => true,
            'sulu_snippet.twig.snippet.cache_lifetime' => 1,
            'sulu_snippet.repository.class' => 'Sulu\\Bundle\\SnippetBundle\\Snippet\\SnippetRepository',
            'sulu_snippet.controller.snippet.class' => 'Sulu\\Bundle\\SnippetBundle\\Controller\\SnippetController',
            'sulu_snippet.twig.snippet.class' => 'Sulu\\Bundle\\SnippetBundle\\Twig\\SnippetTwigExtension',
            'sulu_snippet.twig.snippet.memoized.class' => 'Sulu\\Bundle\\SnippetBundle\\Twig\\MemoizedSnippetTwigExtension',
            'sulu_snippet.form.snippet.class' => 'Sulu\\Bundle\\SnippetBundle\\Form\\SnippetType',
            'sulu_snippet.document.snippet_initializer.class' => 'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetInitializer',
            'sulu_snippet.export.snippet.formats' => array(
                '1.2.xliff' => 'SuluContentBundle:Export:Snippet/1.2.xliff.twig',
            ),
            'sulu_snippet.admin.class' => 'Sulu\\Bundle\\SnippetBundle\\Admin\\SnippetAdmin',
            'sulu_snippet.content_navigation_provider.class' => 'Sulu\\Bundle\\SnippetBundle\\Admin\\SnippetContentNavigationProvider',
            'sulu_snippet.jsconfig.class' => 'Sulu\\Bundle\\AdminBundle\\Admin\\JsConfig',
            'sulu.content.type.smart_content.template' => 'SuluContentBundle:Template:content-types/smart_content.html.twig',
            'sulu.content.type.internal_links.template' => 'SuluContentBundle:Template:content-types/internal_links.html.twig',
            'sulu.content.type.single_internal_link.template' => 'SuluContentBundle:Template:content-types/single_internal_link.html.twig',
            'sulu.content.type.phone.template' => 'SuluContentBundle:Template:content-types/phone.html.twig',
            'sulu.content.type.password.template' => 'SuluContentBundle:Template:content-types/password.html.twig',
            'sulu.content.type.url.template' => 'SuluContentBundle:Template:content-types/url.html.twig',
            'sulu.content.type.email.template' => 'SuluContentBundle:Template:content-types/email.html.twig',
            'sulu.content.type.date.template' => 'SuluContentBundle:Template:content-types/date.html.twig',
            'sulu.content.type.time.template' => 'SuluContentBundle:Template:content-types/time.html.twig',
            'sulu.content.type.color.template' => 'SuluContentBundle:Template:content-types/color.html.twig',
            'sulu.content.type.checkbox.template' => 'SuluContentBundle:Template:content-types/checkbox.html.twig',
            'sulu.content.type.multiple_select.template' => 'SuluContentBundle:Template:content-types/multiple_select.html.twig',
            'sulu.content.type.single_select.template' => 'SuluContentBundle:Template:content-types/single_select.html.twig',
            'sulu.content.type.teaser_selection.template' => 'SuluContentBundle:Template:content-types/teaser-selection.html.twig',
            'sulu_content.search.mapping' => array(
                'Sulu\\Bundle\\ContentBundle\\Document\\PageDocument' => array(
                    'index' => 'page',
                    'decorate_index' => true,
                ),
                'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetDocument' => array(
                    'index' => 'snippet',
                    'decorate_index' => false,
                ),
            ),
            'sulu_content.search.metadata.provider.structure.class' => 'Sulu\\Bundle\\ContentBundle\\Search\\Metadata\\StructureProvider',
            'sulu_content.search.event_subscriber.blame_timestamp.class' => 'Sulu\\Bundle\\ContentBundle\\Search\\EventSubscriber\\BlameTimestampSubscriber',
            'sulu_content.search.event_subscriber.structure.class' => 'Sulu\\Bundle\\ContentBundle\\Search\\EventSubscriber\\StructureSubscriber',
            'sulu_search.event_listener.hit.class' => 'Sulu\\Bundle\\ContentBundle\\Search\\EventListener\\HitListener',
            'sulu_content.admin.class' => 'Sulu\\Bundle\\ContentBundle\\Admin\\ContentAdmin',
            'sulu_content.twig_extension.class' => 'Sulu\\Bundle\\ContentBundle\\Twig\\ContentTwigExtension',
            'sulu_content.content_navigation_provider.class' => 'Sulu\\Bundle\\ContentBundle\\Admin\\ContentContentNavigationProvider',
            'sulu_content.node_repository.class' => 'Sulu\\Bundle\\ContentBundle\\Repository\\NodeRepository',
            'sulu_content.rl_repository.class' => 'Sulu\\Bundle\\ContentBundle\\Repository\\ResourceLocatorRepository',
            'sulu_content.extension.seo.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Structure\\SeoStructureExtension',
            'sulu_content.extension.excerpt.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Structure\\ExcerptStructureExtension',
            'sulu_content.smart_content.data_provider_pool.class' => 'Sulu\\Component\\SmartContent\\DataProviderPool',
            'sulu_content.smart_content.data_provider.content.query_builder.class' => 'Sulu\\Component\\Content\\SmartContent\\QueryBuilder',
            'sulu_content.smart_content.data_provider.content.class' => 'Sulu\\Component\\Content\\SmartContent\\ContentDataProvider',
            'sulu_content.smart_content.data_provider.content.proxy_factory.class' => 'ProxyManager\\Factory\\LazyLoadingValueHolderFactory',
            'sulu_content.smart_content.content_type.class' => 'Sulu\\Component\\SmartContent\\ContentType',
            'sulu.content.type.internal_links.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\InternalLinks',
            'sulu.content.type.single_internal_link.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\SingleInternalLink',
            'sulu.content.type.phone.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Phone',
            'sulu.content.type.password.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Password',
            'sulu.content.type.url.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Url',
            'sulu.content.type.email.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Email',
            'sulu.content.type.date.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Date',
            'sulu.content.type.time.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Time',
            'sulu.content.type.color.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Color',
            'sulu.content.type.checkbox.class' => 'Sulu\\Bundle\\ContentBundle\\Content\\Types\\Checkbox',
            'sulu_content.structure.factory.class' => 'Sulu\\Component\\Content\\Metadata\\Factory\\StructureMetadataFactory',
            'sulu_content.structure.loader.xml.class' => 'Sulu\\Component\\Content\\Metadata\\Loader\\XmlLoader',
            'sulu_content.extension.manager.class' => 'Sulu\\Component\\Content\\Extension\\ExtensionManager',
            'sulu_content.export.webspace.formats' => array(
                '1.2.xliff' => 'SuluContentBundle:Export:Webspace/1.2.xliff.twig',
            ),
            'sulu_content.default_author' => true,
            'sulu_content.seo' => array(
                'max_title_length' => 55,
                'max_description_length' => 155,
                'max_keywords' => 5,
                'keywords_separator' => ',',
                'url_prefix' => 'www.yoursite.com/{locale}',
            ),
            'sulu.model.tag.class' => 'Sulu\\Bundle\\TagBundle\\Entity\\Tag',
            'sulu.repository.tag.class' => 'Sulu\\Bundle\\TagBundle\\Entity\\TagRepository',
            'sulu_tag.content.type.tag_list.template' => 'SuluTagBundle:Template:content-types/tag_list.html.twig',
            'sulu_tag.admin.class' => 'Sulu\\Bundle\\TagBundle\\Admin\\TagAdmin',
            'sulu_tag.tag_manager.class' => 'Sulu\\Bundle\\TagBundle\\Tag\\TagManager',
            'sulu_tag.tag_repository.class' => 'Sulu\\Bundle\\TagBundle\\Entity\\TagRepository',
            'sulu_tag.content.type.tag_list.class' => 'Sulu\\Bundle\\TagBundle\\Content\\Types\\TagList',
            'sulu_tag.tag_request_handler.class' => 'Sulu\\Component\\Tag\\Request\\TagRequestHandler',
            'sulu_tag.twig_extension.class' => 'Sulu\\Bundle\\TagBundle\\Twig\\TagTwigExtension',
            'sulu_tag.entity.tag' => 'SuluTagBundle:Tag',
            'sulu_website.navigation.cache.lifetime' => 1,
            'sulu_website.content.cache.lifetime' => 1,
            'sulu_website.sitemap.cache.lifetime' => 1,
            'sulu_website.sitemap.default_host' => NULL,
            'sulu_website.admin.class' => 'Sulu\\Bundle\\WebsiteBundle\\Admin\\WebsiteAdmin',
            'sulu_website.navigation_mapper.class' => 'Sulu\\Bundle\\WebsiteBundle\\Navigation\\NavigationMapper',
            'sulu_website.sitemap.class' => 'Sulu\\Bundle\\WebsiteBundle\\Sitemap\\SitemapGenerator',
            'sulu_website.twig.content_path.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Content\\ContentPathTwigExtension',
            'sulu_website.twig.navigation.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Navigation\\NavigationTwigExtension',
            'sulu_website.twig.navigation.memoized.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Navigation\\MemoizedNavigationTwigExtension',
            'sulu_website.twig.sitemap.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Sitemap\\SitemapTwigExtension',
            'sulu_website.twig.sitemap.memoized.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Sitemap\\MemoizedSitemapTwigExtension',
            'sulu_website.twig.content.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Content\\ContentTwigExtension',
            'sulu_website.twig.content.memoized.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Content\\MemoizedContentTwigExtension',
            'sulu_website.twig.meta.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Meta\\MetaTwigExtension',
            'sulu_website.twig.seo.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Seo\\SeoTwigExtension',
            'sulu_website.twig.util.class' => 'Sulu\\Bundle\\WebsiteBundle\\Twig\\Core\\UtilTwigExtension',
            'sulu_website.routing.portal_loader.class' => 'Sulu\\Bundle\\WebsiteBundle\\Routing\\PortalLoader',
            'sulu_website.exception.controller.class' => 'Sulu\\Bundle\\WebsiteBundle\\Controller\\ExceptionController',
            'sulu_website.resolver.request_analyzer.class' => 'Sulu\\Bundle\\WebsiteBundle\\Resolver\\RequestAnalyzerResolver',
            'sulu_website.resolver.structure.class' => 'Sulu\\Bundle\\WebsiteBundle\\Resolver\\StructureResolver',
            'sulu_website.resolver.parameter.class' => 'Sulu\\Bundle\\WebsiteBundle\\Resolver\\ParameterResolver',
            'sulu_website.navigation_mapper.query_builder.class' => 'Sulu\\Bundle\\WebsiteBundle\\Navigation\\NavigationQueryBuilder',
            'sulu_website.sitemap.query_builder.class' => 'Sulu\\Bundle\\WebsiteBundle\\Sitemap\\SitemapContentQueryBuilder',
            'sulu_website.data_collector.sulu_collector.class' => 'Sulu\\Bundle\\WebsiteBundle\\DataCollector\\SuluCollector',
            'sulu_location.content.type.location.class' => 'Sulu\\Bundle\\LocationBundle\\Content\\Types\\LocationContentType',
            'sulu_location.admin.class' => 'Sulu\\Bundle\\LocationBundle\\Admin\\LocationAdmin',
            'sulu_location.map_manager.class' => 'Sulu\\Bundle\\LocationBundle\\Map\\MapManager',
            'sulu_location.guzzle.client.class' => 'GuzzleHttp\\Client',
            'sulu_location.geolocator.manager.class' => 'Sulu\\Bundle\\LocationBundle\\Geolocator\\GeolocatorManager',
            'sulu_location.geolocator.nominatim.class' => 'Sulu\\Bundle\\LocationBundle\\Geolocator\\Service\\NominatimGeolocator',
            'sulu_location.geolocator.google.class' => 'Sulu\\Bundle\\LocationBundle\\Geolocator\\Service\\GoogleGeolocator',
            'sulu.content.type.location.template' => 'SuluLocationBundle:Template:content-types/location.html.twig',
            'sulu_location.geolocator.name' => 'nominatim',
            'sulu_location.geolocator.service.nominatim.endpoint' => 'http://open.mapquestapi.com/nominatim/v1/search.php',
            'sulu_location.geolocator.service.google.api_key' => '',
            'sulu_http_cache.event_subscriber.flush_subscriber.class' => 'Sulu\\Component\\HttpCache\\EventSubscriber\\FlushSubscriber',
            'sulu_http_cache.event_subscriber.update_response_subscriber.class' => 'Sulu\\Component\\HttpCache\\EventSubscriber\\UpdateResponseSubscriber',
            'sulu_http_cache.proxy_client.varnish.class' => 'FOS\\HttpCache\\ProxyClient\\Varnish',
            'sulu_http_cache.proxy_client.symfony.class' => 'Sulu\\Component\\HttpCache\\ProxyClient\\Symfony',
            'sulu_http_cache.proxy_client.varnish.enabled' => false,
            'sulu_http_cache.proxy_client.varnish.servers' => array(

            ),
            'sulu_http_cache.proxy_client.varnish.base_url' => NULL,
            'sulu_http_cache.proxy_client.name' => 'symfony',
            'sulu_http_cache.handler.public.max_age' => 240,
            'sulu_http_cache.handler.public.shared_max_age' => 240,
            'sulu_http_cache.handler.public.use_page_ttl' => true,
            'sulu_http_cache.handler.aggregate.handlers' => array(
                0 => 'debug',
            ),
            'sulu_websocket.enabled' => false,
            'sulu_websocket.server.ip_address' => '0.0.0.0',
            'sulu_websocket.server.port' => 9876,
            'sulu_websocket.server.http_host' => 'localhost',
            'sulu_websocket.manager.class' => 'Sulu\\Component\\Websocket\\RatchetAppManager',
            'sulu_websocket.admin.class' => 'Sulu\\Bundle\\WebsocketBundle\\Admin\\WebsocketAdmin',
            'sulu_websocket.jsconfig.class' => 'Sulu\\Bundle\\WebsocketBundle\\Admin\\AppJsConfig',
            'sulu_websocket.admin.message_dispatcher.app.class' => 'Sulu\\Component\\Websocket\\MessageDispatcher\\MessageDispatcherApp',
            'sulu_websocket.admin.message_dispatcher.app.cache.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'sulu_websocket.admin.message_dispatcher.class' => 'Sulu\\Component\\Websocket\\MessageDispatcher\\MessageDispatcher',
            'sulu_websocket.fallback_controller.class' => 'Sulu\\Bundle\\WebsocketBundle\\Controller\\FallbackController',
            'sulu_document_manager.mapping' => array(
                0 => array(
                    'alias' => 'custom_url',
                    'class' => 'Sulu\\Component\\CustomUrl\\Document\\CustomUrlDocument',
                    'phpcr_type' => 'sulu:custom_url',
                    'mapping' => array(
                        'published' => array(
                            'property' => 'published',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ),
                        'baseDomain' => array(
                            'property' => 'baseDomain',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ),
                        'domainParts' => array(
                            'property' => 'domainParts',
                            'type' => 'json_array',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ),
                        'canonical' => array(
                            'property' => 'canonical',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ),
                        'redirect' => array(
                            'property' => 'redirect',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ),
                        'targetLocale' => array(
                            'property' => 'targetLocale',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ),
                    ),
                ),
                1 => array(
                    'alias' => 'custom_url_route',
                    'class' => 'Sulu\\Component\\CustomUrl\\Document\\RouteDocument',
                    'phpcr_type' => 'sulu:custom_url_route',
                    'mapping' => array(
                        'locale' => array(
                            'property' => 'locale',
                            'encoding' => 'content',
                            'mapped' => true,
                            'multiple' => false,
                            'default' => NULL,
                        ),
                    ),
                ),
                2 => array(
                    'alias' => 'page',
                    'class' => 'Sulu\\Bundle\\ContentBundle\\Document\\PageDocument',
                    'phpcr_type' => 'sulu:page',
                    'form_type' => 'Sulu\\Bundle\\ContentBundle\\Form\\Type\\PageDocumentType',
                    'set_default_author' => true,
                    'mapping' => array(

                    ),
                ),
                3 => array(
                    'alias' => 'home',
                    'class' => 'Sulu\\Bundle\\ContentBundle\\Document\\HomeDocument',
                    'phpcr_type' => 'sulu:home',
                    'form_type' => 'Sulu\\Bundle\\ContentBundle\\Form\\Type\\HomeDocumentType',
                    'set_default_author' => true,
                    'mapping' => array(

                    ),
                ),
                4 => array(
                    'alias' => 'route',
                    'class' => 'Sulu\\Bundle\\ContentBundle\\Document\\RouteDocument',
                    'phpcr_type' => 'sulu:path',
                    'mapping' => array(

                    ),
                ),
                5 => array(
                    'alias' => 'snippet',
                    'class' => 'Sulu\\Bundle\\SnippetBundle\\Document\\SnippetDocument',
                    'phpcr_type' => 'sulu:snippet',
                    'form_type' => 'Sulu\\Bundle\\SnippetBundle\\Form\\SnippetType',
                    'mapping' => array(

                    ),
                ),
            ),
            'sulu_document_manager.namespace_mapping' => array(
                'extension_localized' => 'i18n',
                'system' => 'sulu',
                'system_localized' => 'i18n',
                'content' => NULL,
                'content_localized' => 'i18n',
            ),
            'sulu_document_manager.versioning.enabled' => false,
            'sulu_document_manager.show_drafts' => false,
            'sulu_document_manager.segments' => array(
                'custom_urls' => 'custom-urls',
                'custom_urls_items' => 'items',
                'custom_urls_routes' => 'routes',
                'base' => 'cmf',
                'content' => 'contents',
                'route' => 'routes',
                'snippet' => 'snippets',
            ),
            'sulu_custom_urls.uri_filter_regexp' => NULL,
            'sulu_route.mappings' => array(

            ),
            'sulu_route.content_types.route.template' => 'SuluRouteBundle:Template:content-types/route.html.twig',
            'sulu_route.routing.uri_filter_regexp' => NULL,
            'sulu.model.route.class' => 'Sulu\\Bundle\\RouteBundle\\Entity\\Route',
            'sulu.repository.route.class' => 'Sulu\\Bundle\\RouteBundle\\Entity\\RouteRepository',
            'phpcr_migrations.version_node_name' => 'jcr:versions',
            'dubture_ffmpeg.binary' => '/usr/local/bin/ffmpeg',
            'dubture_ffprobe.binary' => '/usr/local/bin/ffprobe',
            'dubture_ffmpeg.binary_timeout' => 300,
            'dubture_ffmpeg.threads_count' => 4,
            'massive_build.command.build.class' => 'Sulu\\Bundle\\CoreBundle\\CommandOptional\\SuluBuildCommand',
            'massive_build.build.registry.class' => 'Massive\\Bundle\\BuildBundle\\Build\\BuildRegistry',
            'web_profiler.debug_toolbar.position' => 'bottom',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'cmf_routing.uri_filter_regexp' => '',
            'cmf_routing.default_controller' => NULL,
            'cmf_routing.generic_controller' => NULL,
            'cmf_routing.controllers_by_type' => array(

            ),
            'cmf_routing.controllers_by_class' => array(

            ),
            'cmf_routing.templates_by_class' => array(

            ),
            'cmf_routing.route_collection_limit' => 0,
            'cmf_routing.dynamic.limit_candidates' => 20,
            'cmf_routing.dynamic.locales' => array(

            ),
            'cmf_routing.dynamic.auto_locale_pattern' => false,
            'cmf_routing.replace_symfony_router' => true,
            'data_collector.templates' => array(
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.ajax' => array(
                    0 => 'ajax',
                    1 => '@WebProfiler/Collector/ajax.html.twig',
                ),
                'data_collector.form' => array(
                    0 => 'form',
                    1 => '@WebProfiler/Collector/form.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.cache' => array(
                    0 => 'cache',
                    1 => '@WebProfiler/Collector/cache.html.twig',
                ),
                'data_collector.translation' => array(
                    0 => 'translation',
                    1 => '@WebProfiler/Collector/translation.html.twig',
                ),
                'data_collector.twig' => array(
                    0 => 'twig',
                    1 => '@WebProfiler/Collector/twig.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ),
                'doctrine_phpcr.data_collector' => array(
                    0 => 'phpcr',
                    1 => 'DoctrinePHPCRBundle:Collector:phpcr',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.dump' => array(
                    0 => 'dump',
                    1 => '@Debug/Profiler/dump.html.twig',
                ),
                'sulu_website.data_collector.sulu_collector' => array(
                    0 => 'sulu',
                    1 => 'SuluWebsiteBundle:Profiler:layout',
                ),
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
            ),
            'console.command.ids' => array(
                'console.command.doctrine_bundle_doctrinecachebundle_command_containscommand' => 'doctrine_cache.contains_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_deletecommand' => 'doctrine_cache.delete_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_flushcommand' => 'doctrine_cache.flush_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_statscommand' => 'doctrine_cache.stats_command',
                'console.command.doctrine_bundle_doctrinebundle_command_createdatabasedoctrinecommand' => 'doctrine.database_create_command',
                'console.command.doctrine_bundle_doctrinebundle_command_dropdatabasedoctrinecommand' => 'doctrine.database_drop_command',
                'console.command.doctrine_bundle_doctrinebundle_command_generateentitiesdoctrinecommand' => 'doctrine.generate_entities_command',
                'console.command.doctrine_bundle_doctrinebundle_command_importmappingdoctrinecommand' => 'doctrine.mapping_import_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearmetadatacachedoctrinecommand' => 'doctrine.cache_clear_metadata_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearquerycachedoctrinecommand' => 'doctrine.cache_clear_query_cache_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearresultcachedoctrinecommand' => 'doctrine.cache_clear_result_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_collectionregiondoctrinecommand' => 'doctrine.cache_collection_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_convertmappingdoctrinecommand' => 'doctrine.mapping_convert_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_createschemadoctrinecommand' => 'doctrine.schema_create_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_dropschemadoctrinecommand' => 'doctrine.schema_drop_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_ensureproductionsettingsdoctrinecommand' => 'doctrine.ensure_production_settings_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_entityregioncachedoctrinecommand' => 'doctrine.clear_entity_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_importdoctrinecommand' => 'doctrine.database_import_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_infodoctrinecommand' => 'doctrine.mapping_info_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_queryregioncachedoctrinecommand' => 'doctrine.clear_query_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_rundqldoctrinecommand' => 'doctrine.query_dql_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_runsqldoctrinecommand' => 'doctrine.query_sql_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_updateschemadoctrinecommand' => 'doctrine.schema_update_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_validateschemacommand' => 'doctrine.schema_validate_command',
                'console.command.doctrine_bundle_fixturesbundle_command_loaddatafixturesdoctrinecommand' => 'doctrine.fixtures_load_command',
                'console.command.massive_bundle_searchbundle_command_initcommand' => 'massive_search.command.init',
                'console.command.massive_bundle_searchbundle_command_statuscommand' => 'massive_search.command.status',
                'console.command.massive_bundle_searchbundle_command_querycommand' => 'massive_search.command.query',
                'console.command.massive_bundle_searchbundle_command_reindexcommand' => 'massive_search.command.reindex',
                'console.command.massive_bundle_searchbundle_command_indexrebuildcommand' => 'massive_search.command.index_rebuild_deprecated',
                'console.command.massive_bundle_searchbundle_command_purgecommand' => 'massive_search.command.purge',
                'console.command.sulu_bundle_contentbundle_command_maintainresourcelocatorcommand' => 'sulu_content.command.maintain_resource_locator',
                'console.command.sulu_bundle_contentbundle_command_cleanuphistorycommand' => 'sulu_content.command.cleanup_history',
                'console.command.sulu_bundle_documentmanagerbundle_command_fixturesloadcommand' => 'sulu_document_manager.command.fixtures_load',
                'console.command.sulu_bundle_documentmanagerbundle_command_initializecommand' => 'sulu_document_manager.command.initialize',
                'console.command.dtl_bundle_phpcrmigrations_command_statuscommand' => 'phpcr_migrations.command.status',
                'console.command.dtl_bundle_phpcrmigrations_command_migratecommand' => 'phpcr_migrations.command.migrate',
                'console.command.dtl_bundle_phpcrmigrations_command_initializecommand' => 'phpcr_migrations.command.initialize',
                'console.command.sulu_bundle_corebundle_commandoptional_sulubuildcommand' => 'massive_build.command.build',
                'console.command.sensiolabs_security_command_securitycheckercommand' => 'sensio_distribution.security_checker.command',
                'console.command.symfony_bundle_webserverbundle_command_serverruncommand' => 'console.command.symfony_bundle_webserverbundle_command_serverruncommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstartcommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstopcommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand',
            ),
            'doctrine_phpcr.migrate.migrators' => array(

            ),
            'sulu_media.image.formats' => array(
                'sulu-400x400' => array(
                    'key' => 'sulu-400x400',
                    'internal' => true,
                    'meta' => array(
                        'title' => array(
                            'en' => 'Contact avatar (Sulu)',
                            'de' => 'Kontaktavatar (Sulu)',
                            'fr' => 'Avatar du contact (Sulu)',
                            'nl' => 'Contact avatar (Sulu)',
                        ),
                    ),
                    'scale' => array(
                        'x' => 400,
                        'y' => 400,
                        'mode' => 'outbound',
                        'retina' => false,
                        'forceRatio' => true,
                    ),
                    'transformations' => array(

                    ),
                    'options' => array(

                    ),
                ),
                'sulu-400x400-inset' => array(
                    'key' => 'sulu-400x400-inset',
                    'internal' => true,
                    'meta' => array(
                        'title' => array(
                            'en' => 'Organization logo (Sulu)',
                            'de' => 'Organisationslogo (Sulu)',
                            'fr' => 'Logo d\'organisation (Sulu)',
                            'nl' => 'Organisatie logo (Sulu)',
                        ),
                    ),
                    'scale' => array(
                        'x' => 400,
                        'y' => 400,
                        'mode' => 'inset',
                        'retina' => false,
                        'forceRatio' => true,
                    ),
                    'transformations' => array(

                    ),
                    'options' => array(

                    ),
                ),
                'sulu-260x' => array(
                    'key' => 'sulu-260x',
                    'internal' => true,
                    'meta' => array(
                        'title' => array(
                            'en' => 'Masonry preview (Sulu)',
                            'de' => 'Masonry Vorschau (Sulu)',
                            'fr' => 'Prévisualisation maçonnerie (Sulu)',
                            'nl' => 'Masonry voorbeeld (Sulu)',
                        ),
                    ),
                    'scale' => array(
                        'x' => 260,
                        'y' => NULL,
                        'mode' => 'outbound',
                        'retina' => false,
                        'forceRatio' => true,
                    ),
                    'transformations' => array(

                    ),
                    'options' => array(

                    ),
                ),
                'sulu-170x170' => array(
                    'key' => 'sulu-170x170',
                    'internal' => true,
                    'meta' => array(
                        'title' => array(
                            'en' => 'Search (Sulu)',
                            'de' => 'Suche (Sulu)',
                            'fr' => 'Recherche (Sulu)',
                            'nl' => 'Zoeken (Sulu)',
                        ),
                    ),
                    'scale' => array(
                        'x' => 170,
                        'y' => 170,
                        'mode' => 'outbound',
                        'retina' => false,
                        'forceRatio' => true,
                    ),
                    'transformations' => array(

                    ),
                    'options' => array(

                    ),
                ),
                'sulu-100x100' => array(
                    'key' => 'sulu-100x100',
                    'internal' => true,
                    'meta' => array(
                        'title' => array(
                            'en' => 'Contact card (Sulu)',
                            'de' => 'Personenkarte (Sulu)',
                            'fr' => 'Carte personnelle (Sulu)',
                            'nl' => 'Contact kaart (Sulu)',
                        ),
                    ),
                    'scale' => array(
                        'x' => 100,
                        'y' => 100,
                        'mode' => 'outbound',
                        'retina' => false,
                        'forceRatio' => true,
                    ),
                    'transformations' => array(

                    ),
                    'options' => array(

                    ),
                ),
                'sulu-100x100-inset' => array(
                    'key' => 'sulu-100x100-inset',
                    'internal' => true,
                    'meta' => array(
                        'title' => array(
                            'en' => 'Organization card (Sulu)',
                            'de' => 'Organisationskarte (Sulu)',
                            'fr' => 'Carte d\'organisation (Sulu)',
                            'nl' => 'Organisatie kaart (Sulu)',
                        ),
                    ),
                    'scale' => array(
                        'x' => 100,
                        'y' => 100,
                        'mode' => 'inset',
                        'retina' => false,
                        'forceRatio' => true,
                    ),
                    'transformations' => array(

                    ),
                    'options' => array(

                    ),
                ),
                'sulu-50x50' => array(
                    'key' => 'sulu-50x50',
                    'internal' => true,
                    'meta' => array(
                        'title' => array(
                            'en' => 'Small thumbnail (Sulu)',
                            'de' => 'Kleines Thumbnail (Sulu)',
                            'fr' => 'Image miniature (Sulu)',
                            'nl' => 'Kleine thumbnail (Sulu)',
                        ),
                    ),
                    'scale' => array(
                        'x' => 50,
                        'y' => 50,
                        'mode' => 'outbound',
                        'retina' => false,
                        'forceRatio' => true,
                    ),
                    'transformations' => array(

                    ),
                    'options' => array(

                    ),
                ),
            ),
            'sulu_category.entity.category' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Category',
            'sulu_category.entity.keyword' => 'Sulu\\Bundle\\CategoryBundle\\Entity\\Keyword',
            'sulu_snippet.areas' => array(
                'default' => array(
                    'key' => 'default',
                    'template' => 'default',
                    'title' => array(
                        'de' => 'Standard',
                        'en' => 'Default',
                        'fr' => 'Default',
                        'nl' => 'Default',
                    ),
                ),
            ),
            'sulu.version' => '1.6.7',
            'app.version' => NULL,
        );
    }
}

class DoctrineORMEntityManager_00000000199dc25f000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d extends \Doctrine\ORM\EntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5a0cba4dd7308760047951 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5a0cba4dd7332702892833 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5a0cba4dd7275855888872 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function getConnection()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getConnection', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getConnection();
    }

    /**
     * {@inheritDoc}
     */
    public function getMetadataFactory()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getMetadataFactory', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getMetadataFactory();
    }

    /**
     * {@inheritDoc}
     */
    public function getExpressionBuilder()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getExpressionBuilder', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getExpressionBuilder();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'beginTransaction', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function getCache()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getCache', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getCache();
    }

    /**
     * {@inheritDoc}
     */
    public function transactional($func)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'transactional', array('func' => $func), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->transactional($func);
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'commit', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollback()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'rollback', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->rollback();
    }

    /**
     * {@inheritDoc}
     */
    public function getClassMetadata($className)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getClassMetadata', array('className' => $className), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getClassMetadata($className);
    }

    /**
     * {@inheritDoc}
     */
    public function createQuery($dql = '')
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'createQuery', array('dql' => $dql), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->createQuery($dql);
    }

    /**
     * {@inheritDoc}
     */
    public function createNamedQuery($name)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'createNamedQuery', array('name' => $name), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->createNamedQuery($name);
    }

    /**
     * {@inheritDoc}
     */
    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->createNativeQuery($sql, $rsm);
    }

    /**
     * {@inheritDoc}
     */
    public function createNamedNativeQuery($name)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->createNamedNativeQuery($name);
    }

    /**
     * {@inheritDoc}
     */
    public function createQueryBuilder()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'createQueryBuilder', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->createQueryBuilder();
    }

    /**
     * {@inheritDoc}
     */
    public function flush($entity = null)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'flush', array('entity' => $entity), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->flush($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'find', array('entityName' => $entityName, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->find($entityName, $id, $lockMode, $lockVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getReference($entityName, $id)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getReference($entityName, $id);
    }

    /**
     * {@inheritDoc}
     */
    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getPartialReference($entityName, $identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function clear($entityName = null)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'clear', array('entityName' => $entityName), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->clear($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function close()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'close', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->close();
    }

    /**
     * {@inheritDoc}
     */
    public function persist($entity)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'persist', array('entity' => $entity), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->persist($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($entity)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'remove', array('entity' => $entity), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->remove($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function refresh($entity)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'refresh', array('entity' => $entity), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->refresh($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function detach($entity)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'detach', array('entity' => $entity), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->detach($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function merge($entity)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'merge', array('entity' => $entity), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->merge($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function copy($entity, $deep = false)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->copy($entity, $deep);
    }

    /**
     * {@inheritDoc}
     */
    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->lock($entity, $lockMode, $lockVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getRepository($entityName)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getRepository', array('entityName' => $entityName), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getRepository($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function contains($entity)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'contains', array('entity' => $entity), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->contains($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventManager()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getEventManager', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getEventManager();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfiguration()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getConfiguration', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getConfiguration();
    }

    /**
     * {@inheritDoc}
     */
    public function isOpen()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'isOpen', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->isOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitOfWork()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getUnitOfWork', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getUnitOfWork();
    }

    /**
     * {@inheritDoc}
     */
    public function getHydrator($hydrationMode)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getHydrator($hydrationMode);
    }

    /**
     * {@inheritDoc}
     */
    public function newHydrator($hydrationMode)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->newHydrator($hydrationMode);
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyFactory()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getProxyFactory', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getProxyFactory();
    }

    /**
     * {@inheritDoc}
     */
    public function initializeObject($obj)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'initializeObject', array('obj' => $obj), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->initializeObject($obj);
    }

    /**
     * {@inheritDoc}
     */
    public function getFilters()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'getFilters', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->getFilters();
    }

    /**
     * {@inheritDoc}
     */
    public function isFiltersStateClean()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'isFiltersStateClean', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->isFiltersStateClean();
    }

    /**
     * {@inheritDoc}
     */
    public function hasFilters()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'hasFilters', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return $this->valueHolder5a0cba4dd7308760047951->hasFilters();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $instance, 'Doctrine\\ORM\\EntityManager')->__invoke($instance);

        $instance->initializer5a0cba4dd7332702892833 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    protected function __construct(\Doctrine\DBAL\Connection $conn, \Doctrine\ORM\Configuration $config, \Doctrine\Common\EventManager $eventManager)
    {
        static $reflection;

        if (! $this->valueHolder5a0cba4dd7308760047951) {
            $reflection = $reflection ?: new \ReflectionClass('Doctrine\\ORM\\EntityManager');
            $this->valueHolder5a0cba4dd7308760047951 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);

        }

        $this->valueHolder5a0cba4dd7308760047951->__construct($conn, $config, $eventManager);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, '__get', ['name' => $name], $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        if (isset(self::$publicProperties5a0cba4dd7275855888872[$name])) {
            return $this->valueHolder5a0cba4dd7308760047951->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dd7308760047951;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dd7308760047951;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dd7308760047951;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dd7308760047951;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, '__isset', array('name' => $name), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dd7308760047951;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dd7308760047951;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, '__unset', array('name' => $name), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dd7308760047951;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dd7308760047951;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, '__clone', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        $this->valueHolder5a0cba4dd7308760047951 = clone $this->valueHolder5a0cba4dd7308760047951;
    }

    public function __sleep()
    {
        $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, '__sleep', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;

        return array('valueHolder5a0cba4dd7308760047951');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5a0cba4dd7332702892833 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5a0cba4dd7332702892833;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5a0cba4dd7332702892833 && ($this->initializer5a0cba4dd7332702892833->__invoke($valueHolder5a0cba4dd7308760047951, $this, 'initializeProxy', array(), $this->initializer5a0cba4dd7332702892833) || 1) && $this->valueHolder5a0cba4dd7308760047951 = $valueHolder5a0cba4dd7308760047951;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5a0cba4dd7308760047951;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5a0cba4dd7308760047951;
    }


}

class FFMpegFFMpeg_00000000199dd5e6000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d extends \FFMpeg\FFMpeg implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5a0cba4de4abb811546548 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5a0cba4de4acd345107650 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5a0cba4de4a83310097098 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function setFFProbe(\FFMpeg\FFProbe $ffprobe)
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, 'setFFProbe', array('ffprobe' => $ffprobe), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        return $this->valueHolder5a0cba4de4abb811546548->setFFProbe($ffprobe);
    }

    /**
     * {@inheritDoc}
     */
    public function getFFProbe()
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, 'getFFProbe', array(), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        return $this->valueHolder5a0cba4de4abb811546548->getFFProbe();
    }

    /**
     * {@inheritDoc}
     */
    public function setFFMpegDriver(\FFMpeg\Driver\FFMpegDriver $ffmpeg)
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, 'setFFMpegDriver', array('ffmpeg' => $ffmpeg), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        return $this->valueHolder5a0cba4de4abb811546548->setFFMpegDriver($ffmpeg);
    }

    /**
     * {@inheritDoc}
     */
    public function getFFMpegDriver()
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, 'getFFMpegDriver', array(), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        return $this->valueHolder5a0cba4de4abb811546548->getFFMpegDriver();
    }

    /**
     * {@inheritDoc}
     */
    public function open($pathfile)
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, 'open', array('pathfile' => $pathfile), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        return $this->valueHolder5a0cba4de4abb811546548->open($pathfile);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $instance, 'FFMpeg\\FFMpeg')->__invoke($instance);

        $instance->initializer5a0cba4de4acd345107650 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct(\FFMpeg\Driver\FFMpegDriver $ffmpeg, \FFMpeg\FFProbe $ffprobe)
    {
        static $reflection;

        if (! $this->valueHolder5a0cba4de4abb811546548) {
            $reflection = $reflection ?: new \ReflectionClass('FFMpeg\\FFMpeg');
            $this->valueHolder5a0cba4de4abb811546548 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $this, 'FFMpeg\\FFMpeg')->__invoke($this);

        }

        $this->valueHolder5a0cba4de4abb811546548->__construct($ffmpeg, $ffprobe);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, '__get', ['name' => $name], $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        if (isset(self::$publicProperties5a0cba4de4a83310097098[$name])) {
            return $this->valueHolder5a0cba4de4abb811546548->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de4abb811546548;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de4abb811546548;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de4abb811546548;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de4abb811546548;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, '__isset', array('name' => $name), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de4abb811546548;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de4abb811546548;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, '__unset', array('name' => $name), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de4abb811546548;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de4abb811546548;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, '__clone', array(), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        $this->valueHolder5a0cba4de4abb811546548 = clone $this->valueHolder5a0cba4de4abb811546548;
    }

    public function __sleep()
    {
        $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, '__sleep', array(), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;

        return array('valueHolder5a0cba4de4abb811546548');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $this, 'FFMpeg\\FFMpeg')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5a0cba4de4acd345107650 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5a0cba4de4acd345107650;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5a0cba4de4acd345107650 && ($this->initializer5a0cba4de4acd345107650->__invoke($valueHolder5a0cba4de4abb811546548, $this, 'initializeProxy', array(), $this->initializer5a0cba4de4acd345107650) || 1) && $this->valueHolder5a0cba4de4abb811546548 = $valueHolder5a0cba4de4abb811546548;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5a0cba4de4abb811546548;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5a0cba4de4abb811546548;
    }


}

class FFMpegFFProbe_00000000199dd619000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d extends \FFMpeg\FFProbe implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5a0cba4de6f3b110541309 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5a0cba4de6f4f961233809 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5a0cba4de6efc189786961 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function getParser()
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'getParser', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->getParser();
    }

    /**
     * {@inheritDoc}
     */
    public function setParser(\FFMpeg\FFProbe\OutputParserInterface $parser)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'setParser', array('parser' => $parser), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->setParser($parser);
    }

    /**
     * {@inheritDoc}
     */
    public function getFFProbeDriver()
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'getFFProbeDriver', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->getFFProbeDriver();
    }

    /**
     * {@inheritDoc}
     */
    public function setFFProbeDriver(\FFMpeg\Driver\FFProbeDriver $ffprobe)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'setFFProbeDriver', array('ffprobe' => $ffprobe), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->setFFProbeDriver($ffprobe);
    }

    /**
     * {@inheritDoc}
     */
    public function setOptionsTester(\FFMpeg\FFProbe\OptionsTesterInterface $tester)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'setOptionsTester', array('tester' => $tester), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->setOptionsTester($tester);
    }

    /**
     * {@inheritDoc}
     */
    public function getOptionsTester()
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'getOptionsTester', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->getOptionsTester();
    }

    /**
     * {@inheritDoc}
     */
    public function setCache(\Doctrine\Common\Cache\Cache $cache)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'setCache', array('cache' => $cache), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->setCache($cache);
    }

    /**
     * {@inheritDoc}
     */
    public function getCache()
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'getCache', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->getCache();
    }

    /**
     * {@inheritDoc}
     */
    public function getMapper()
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'getMapper', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->getMapper();
    }

    /**
     * {@inheritDoc}
     */
    public function setMapper(\FFMpeg\FFProbe\MapperInterface $mapper)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'setMapper', array('mapper' => $mapper), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->setMapper($mapper);
    }

    /**
     * {@inheritDoc}
     */
    public function format($pathfile)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'format', array('pathfile' => $pathfile), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->format($pathfile);
    }

    /**
     * {@inheritDoc}
     */
    public function streams($pathfile)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'streams', array('pathfile' => $pathfile), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return $this->valueHolder5a0cba4de6f3b110541309->streams($pathfile);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $instance, 'FFMpeg\\FFProbe')->__invoke($instance);

        $instance->initializer5a0cba4de6f4f961233809 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct(\FFMpeg\Driver\FFProbeDriver $ffprobe, \Doctrine\Common\Cache\Cache $cache)
    {
        static $reflection;

        if (! $this->valueHolder5a0cba4de6f3b110541309) {
            $reflection = $reflection ?: new \ReflectionClass('FFMpeg\\FFProbe');
            $this->valueHolder5a0cba4de6f3b110541309 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $this, 'FFMpeg\\FFProbe')->__invoke($this);

        }

        $this->valueHolder5a0cba4de6f3b110541309->__construct($ffprobe, $cache);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, '__get', ['name' => $name], $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        if (isset(self::$publicProperties5a0cba4de6efc189786961[$name])) {
            return $this->valueHolder5a0cba4de6f3b110541309->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de6f3b110541309;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de6f3b110541309;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de6f3b110541309;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de6f3b110541309;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, '__isset', array('name' => $name), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de6f3b110541309;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de6f3b110541309;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, '__unset', array('name' => $name), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4de6f3b110541309;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4de6f3b110541309;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, '__clone', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        $this->valueHolder5a0cba4de6f3b110541309 = clone $this->valueHolder5a0cba4de6f3b110541309;
    }

    public function __sleep()
    {
        $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, '__sleep', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;

        return array('valueHolder5a0cba4de6f3b110541309');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $this, 'FFMpeg\\FFProbe')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5a0cba4de6f4f961233809 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5a0cba4de6f4f961233809;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5a0cba4de6f4f961233809 && ($this->initializer5a0cba4de6f4f961233809->__invoke($valueHolder5a0cba4de6f3b110541309, $this, 'initializeProxy', array(), $this->initializer5a0cba4de6f4f961233809) || 1) && $this->valueHolder5a0cba4de6f3b110541309 = $valueHolder5a0cba4de6f3b110541309;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5a0cba4de6f3b110541309;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5a0cba4de6f3b110541309;
    }


}

class SymfonyComponentCacheAdapterFilesystemAdapter_00000000199ddbca000000000f44d0530d8db11587dbfdf9801c3a34b496eb0d extends \Symfony\Component\Cache\Adapter\FilesystemAdapter implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5a0cba4dea4bf858810033 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5a0cba4dea547378762388 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5a0cba4dea31e893851985 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function getItem($key)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'getItem', array('key' => $key), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->getItem($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getItems(array $keys = [])
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'getItems', array('keys' => $keys), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->getItems($keys);
    }

    /**
     * {@inheritDoc}
     */
    public function save(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'save', array('item' => $item), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->save($item);
    }

    /**
     * {@inheritDoc}
     */
    public function saveDeferred(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'saveDeferred', array('item' => $item), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->saveDeferred($item);
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'commit', array(), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function __destruct()
    {
        $this->initializer5a0cba4dea547378762388 || $this->valueHolder5a0cba4dea4bf858810033->__destruct();
    }

    /**
     * {@inheritDoc}
     */
    public function hasItem($key)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'hasItem', array('key' => $key), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->hasItem($key);
    }

    /**
     * {@inheritDoc}
     */
    public function clear()
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'clear', array(), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->clear();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteItem($key)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'deleteItem', array('key' => $key), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->deleteItem($key);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteItems(array $keys)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'deleteItems', array('keys' => $keys), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->deleteItems($keys);
    }

    /**
     * {@inheritDoc}
     */
    public function enableVersioning($enable = true)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'enableVersioning', array('enable' => $enable), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->enableVersioning($enable);
    }

    /**
     * {@inheritDoc}
     */
    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'setLogger', array('logger' => $logger), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return $this->valueHolder5a0cba4dea4bf858810033->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->maxIdLength, $instance->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $instance, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($instance);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $instance, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($instance);

        $instance->initializer5a0cba4dea547378762388 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($namespace = '', $defaultLifetime = 0, $directory = null)
    {
        static $reflection;

        if (! $this->valueHolder5a0cba4dea4bf858810033) {
            $reflection = $reflection ?: new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter');
            $this->valueHolder5a0cba4dea4bf858810033 = $reflection->newInstanceWithoutConstructor();
        unset($this->maxIdLength, $this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($this);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($this);

        }

        $this->valueHolder5a0cba4dea4bf858810033->__construct($namespace, $defaultLifetime, $directory);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, '__get', ['name' => $name], $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        if (isset(self::$publicProperties5a0cba4dea31e893851985[$name])) {
            return $this->valueHolder5a0cba4dea4bf858810033->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dea4bf858810033;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dea4bf858810033;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dea4bf858810033;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dea4bf858810033;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, '__isset', array('name' => $name), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dea4bf858810033;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dea4bf858810033;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, '__unset', array('name' => $name), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5a0cba4dea4bf858810033;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5a0cba4dea4bf858810033;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, '__clone', array(), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        $this->valueHolder5a0cba4dea4bf858810033 = clone $this->valueHolder5a0cba4dea4bf858810033;
    }

    public function __sleep()
    {
        $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, '__sleep', array(), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;

        return array('valueHolder5a0cba4dea4bf858810033');
    }

    public function __wakeup()
    {
        unset($this->maxIdLength, $this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($this);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5a0cba4dea547378762388 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5a0cba4dea547378762388;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5a0cba4dea547378762388 && ($this->initializer5a0cba4dea547378762388->__invoke($valueHolder5a0cba4dea4bf858810033, $this, 'initializeProxy', array(), $this->initializer5a0cba4dea547378762388) || 1) && $this->valueHolder5a0cba4dea4bf858810033 = $valueHolder5a0cba4dea4bf858810033;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5a0cba4dea4bf858810033;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5a0cba4dea4bf858810033;
    }


}
